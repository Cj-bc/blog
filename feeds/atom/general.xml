<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/general.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/general.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2021-04-26T00:00:00Z</updated>
    <entry>
    <title>ewwでスタイリッシュなスライダーを使う</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-04-26-eww-linux-minimal-design-slider.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-04-26-eww-linux-minimal-design-slider.html</id>
    <published>2021-04-26T00:00:00Z</published>
    <updated>2021-04-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>ewwでスタイリッシュなスライダーを使う</h1>
  <div class="ui list">
    <div class="item">Posted on April 26, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on April 27, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;eww&#39;." href="/tags/eww.html" class="ui tag label">eww</a><a title="All pages tagged &#39;scss&#39;." href="/tags/scss.html" class="ui tag label">scss</a><a title="All pages tagged &#39;linux&#39;." href="/tags/linux.html" class="ui tag label">linux</a>
  
</div>

<p><a href="https://github.com/Axarva/dotfiles-2.0">Axarva/dotfiles-2.0</a> に触発されて、 <a href="https://github.com/elkowar/eww">elkowar/eww</a> を使い始めました。(Emacsのewwではない)</p>
<p>キーボードドリブンな設計にしたかったので、axarvaの設定を参考にしながら自分で書いていました。 でも、デフォルトでは以下のような形に。</p>
<p><img src="file:///images/cropped-slider-without-scss.png" class="ui rounded image" /></p>
<p>本当は以下のようになってほしい。特に <strong>スライダーノブを消したい</strong> 。</p>
<p><img src="file:///images/cropped-slider-with-scss.png" class="ui rounded image" /></p>
<p>色々と設定を写したのですが上手くいかなかったけど、</p>
<div class="ui segment">
<div class="ui top right attached label">
css
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode css SourceCode"><code class="sourceCode css"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="op">*</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  <span class="kw">all</span>: <span class="bu">unset</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>}</span></code></pre></div>
</div>
<p>を設定したら出来た!!</p>
<p>ビフォー:</p>
<p><img src="file:///images/slider-without-scss.png" class="ui rounded image" /></p>
<p>アフター:</p>
<p><img src="file:///images/slider-with-scss.png" class="ui rounded image" /></p>
]]></summary>
</entry>
<entry>
    <title>うちのlightdmのログインループはxmonadが原因だった</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-04-12-lightdm-login-loop-was-caused-by-xmonad.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-04-12-lightdm-login-loop-was-caused-by-xmonad.html</id>
    <published>2021-04-12T00:00:00Z</published>
    <updated>2021-04-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>うちのlightdmのログインループはxmonadが原因だった</h1>
  <div class="ui list">
    <div class="item">Posted on April 12, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on April 12, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;lightdm&#39;." href="/tags/lightdm.html" class="ui tag label">lightdm</a><a title="All pages tagged &#39;xmonad&#39;." href="/tags/xmonad.html" class="ui tag label">xmonad</a><a title="All pages tagged &#39;archlinux&#39;." href="/tags/archlinux.html" class="ui tag label">archlinux</a>
  
</div>

<h1 id="起きていたこと">起きていたこと</h1>
<p><code>pacman -Syu</code> して再起動した後、=light DM= できちんとログインしても <code>light DM</code> が再度呼び出されてしまう問題があった。</p>
<p>調べた所、色々な要因があるようだがどれも私のケースではなかった。 私のケースで問題だったのは、 「 <strong>コンパイル済みのxmonadが要求するライブラリが、アップデートによって消えていた</strong> 」 ことだった。</p>
<p>xmonadはユーザーの書いた <code>/.xmonad/xmonad.hs</code> をコンパイルして動くが、そのバイナリはいくつかの動的ライブラリを参照している。 ~pacman -Syu~の際、(例えば <code>xmonad-contrib</code> など)がアップデートされると動的ライブラリのパスが変わってしまう。 それにより、xmonadが読みにいこうとしたライブラリが存在しなくなり、エラーが起きる。 エラーのせいでxmonadが立ち上がらないため、lightdmは「Window managerが終了した」と判断(しているのか正確には知らないが)し、またログイン画面に戻ってくる。</p>
<h1 id="直し方">直し方</h1>
<ol>
<li><code>light DM</code> の画面で <code>Alt+Control+F1</code> でGUI環境を抜け、CUIを開く。</li>
<li><code>Alt+F2</code> をし、新しいターミナルを開きそこからログインする。</li>
<li><code>xmonad --recompile</code> する</li>
<li><code>Alt+Control+F7</code> でGUI環境に戻り、ログインを試すと入れるはず。</li>
</ol>
<h1 id="他に考えられる原因">他に考えられる原因</h1>
<p><a href="https://askubuntu.com/questions/223501/ubuntu-gets-stuck-in-a-login-loop">色々調べる途中で見付けたaskubuntuのスレッド</a> で、ありうる原因として挙げられていたものたち:</p>
<ul>
<li>indicator-multiloadをインストールしたのが原因だった</li>
<li>flatpakが原因だった</li>
<li>~/.Xauthorityの所有者が自分ではない</li>
<li>~/.ICEauthorityの所有者が自分ではない（場合によっては必要なファイル、うちにはなかった）</li>
<li>/tmpのパーミッションが777&amp;&amp;file mode bitがt</li>
<li>sudo startxした（これのせいで~/.Xauthorityの所有者が変わってしまう模様）</li>
<li>Nvidiaの公式サイトから落としたドライバーが、きちんとテストされてないことがあるらしい</li>
<li>~/.profileにtypoや構文ミスがある</li>
<li>容量不足</li>
</ul>
<h1 id="おまけ: xmonadを、関連パッケージがアップデートされる度に自動リビルドさせる。">おまけ: xmonadを、関連パッケージがアップデートされる度に自動リビルドさせる。</h1>
<p>このためには、pacmanのhook機能が使える。 pacmanのhookは、指定した条件に合致した場合に指定した内容を実行する仕組みである。 ファイルは(多分)ini形式で書かれ、デフォルトでは <code>/etc/pacman.d/hooks</code> 以下に配置される。</p>
<p>ここでは簡単に、必要最低限の解説だけする。 hookの書き方について詳しくは <a href="man:alpm-hooks">man:alpm-hooks</a> を参照してほしい。</p>
<p>先に完成形はこちら(最新版は <a href="github:Cj-bc/dotfiles">github:Cj-bc/dotfiles</a> の <code>dotfiles/pacman/hooks/xmonad.hook</code>)</p>
<p>尚、 <strong>このhookはまだテストされていません</strong> (アップデートを実行した直後に書いたため)</p>
<div class="ui segment">
<div class="ui top right attached label">
dosini
</div>
<pre class="dosini SourceCode"><code>[Trigger]
Operation = Upgrade
Type = Package
Target = xmonad*
Target = haskell-*

[Action]
Description = Rebuild xmonad to prevent login loop
Exec = xmonad --recompile
When = PostTransaction
</code></pre>
</div>
<h2 id="pacman hookの作り">pacman hookの作り</h2>
<p>pacman hookは <code>[Trigger]</code> と <code>[Action]</code> の二つのブロックから構成される。 <code>[Trigger]</code> で「そのHookが実行される条件」を指定し、 <code>[Action]</code> で実行する内容を指定する。</p>
<p><code>Operation</code> で指定された操作が、 <code>Target</code> に一致するファイル・パッケージに対して実行された時にhookが実行される。</p>
<p>このhookの場合は、 <code>xmonad*</code> 若しくは <code>haskell-*</code> という名前のパッケージがUpgradeされた時、Upgrade処理が終わった後に <code>xmonad --recompile</code> を実行する。</p>
]]></summary>
</entry>
<entry>
    <title>vim9scriptで気をつけること</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-03-02-vim-vim9script-struggling-memo-v8.2_1-2560.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-03-02-vim-vim9script-struggling-memo-v8.2_1-2560.html</id>
    <published>2021-03-02T00:00:00Z</published>
    <updated>2021-03-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>vim9scriptで気をつけること</h1>
  <div class="ui list">
    <div class="item">Posted on March  2, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on March  2, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;vim&#39;." href="/tags/vim.html" class="ui tag label">vim</a><a title="All pages tagged &#39;vim script&#39;." href="/tags/vim%20script.html" class="ui tag label">vim script</a><a title="All pages tagged &#39;vim9&#39;." href="/tags/vim9.html" class="ui tag label">vim9</a>
  
</div>

<p><a href="https://vim-jp.org/vimdoc-ja/usr_46.html">vim9script</a>は、新しく実装が進められているvim用のスクリプト言語で、 型を取り入れたりモジュールの概念を取り入れたりなど「モダンな言語」の機能をふんだんに取り入れています。</p>
<p><strong>現在はまだ開発中であり不安定である</strong> ためプラグインの作成などには向かないようですが、あくまでも自己責任ということで使ってみたくなったので <a href="https://github.com/Cj-bc/dotfiles/tree/master/dotfiles/vim">自分のvimrc</a> の新しく書く部分に少し使ってみたりしています。</p>
<p>が、如何せん開発中のものなのでバグが多かったり、ドキュメントが不足していたり。。。</p>
<p>取り急ぎ、自分で把握したものはメモしていきます。</p>
<p>なお当方のvimは現時点でのgitのマスターブランチから <code>make</code> コマンドのみによってコンパイルされたもので、</p>
<p>バージョンは <code>8.2 (2019 Dec 12, compiled Mar 2 2021 10:43:55) patch 1-2560</code> です。</p>
<p>又、コードの実行には <a href="https://github.com/thinca/vim-quickrun">thinca/vim-quickrun</a> を使用させていただいております。</p>
<h1 id="文字列連結は&#39;..&#39;。&#39;.&#39;ではない。">文字列連結は'..'。'.'ではない。</h1>
<p>これは明確に「変更点」としては見当たらなかったのですが、恐らく変更されているところです。 <code>.</code> を使って連結しようとしてみたところ、 <code>E15: 無効な式です</code> と言われてしまいました。</p>
<p>&lt;画像入れる&gt;</p>
<p>これを <code>..</code> に変えたところすんなり動きました。</p>
<h1 id="&#39;map()&#39;と&#39;mapnew()&#39;を使い分ける">'map()'と'mapnew()'を使い分ける</h1>
<p><code>map()</code> は、リストや辞書型のオブジェクトの要素ひとつひとつに対して関数を適用してくれる関数です。</p>
<p>Haskellとかやってると馴染みが深いですが、その分注意する必要がある点があります。</p>
<p><code>map()</code> 関数、実は <strong>与えられたリストや辞書型のオブジェクトをそのまま更新</strong> します。 つまり <strong>新しいオブジェクトを作って返すわけではない</strong> のです。</p>
<p>今まではこれで良かったのですが、=vim9script= になると違います。 使用する関数を気をつけないと、 <strong>型の不一致でコンパイルエラー</strong> を受けます。</p>
<p>例えば、</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>var ret = [1, 2, 3]
map(ret, (n) =&gt; n + 1)
</code></pre>
</div>
<p>は <code>a -&gt; a</code> な関数を渡しているので動きますが、</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>var ret = [1, 2, 3]
map(ret, (n) =&gt; n .. &quot;th&quot;)
</code></pre>
</div>
<p>は~a -&gt; b~ (<code>number -&gt; string</code>) な関数を渡しているのでコンパイルエラーになります。</p>
<p>この場合、*新しいオブジェクトを作って返す* バージョンである <code>mapnew()</code> を使用して回避できます。</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>var ret = mapnew([1,2,3], (n) =&gt; n .. &quot;th&quot;)
</code></pre>
</div>
]]></summary>
</entry>
<entry>
    <title>Redox OSとかいう新しいOSが気になった話</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-23-redox-os.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-23-redox-os.html</id>
    <published>2021-02-24T00:00:00Z</published>
    <updated>2021-02-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>Redox OSとかいう新しいOSが気になった話</h1>
  <div class="ui list">
    <div class="item">Posted on February 24, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 24, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;redox os&#39;." href="/tags/redox%20os.html" class="ui tag label">redox os</a><a title="All pages tagged &#39;os&#39;." href="/tags/os.html" class="ui tag label">os</a><a title="All pages tagged &#39;rust&#39;." href="/tags/rust.html" class="ui tag label">rust</a>
  
</div>

<h1 id="お断り">お断り</h1>
<p>私は一切Redox OSを使ったことがないし、関係者でもなくただ単に「気になってちょっとドキュメントみた」程度なので、 その程度の知識しかないことはご了承ください。</p>
<h1 id="redox osとは">redox osとは</h1>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>Redox OS は、Rustで書かれたUNIXライクなオペレーションシステムで、 Rustという革命的手法を、モダンなマイクロカーネルおよび 全てのアプリケーションに持ち込むことを目指しています</p>
<p>– 公式サイト <a href="https://www.redox-os.org/jp">https://www.redox-os.org/jp</a> より</p>
</blockquote>
</div>
<p>Rust製のマイクロカーネルなOSのようです。</p>
<p>別段OS(というかカーネル)は何気に色々あるのでそこまで特筆すべきほど驚くか？ と言われると微妙なところではありますが、個人的に面白いなと思ったところを軽く書いておこうと 思います。</p>
<h1 id="面白いところ">面白いところ</h1>
<h2 id="公式サイトに日本語訳がある">公式サイトに日本語訳がある</h2>
<p>これは本当に驚いたところで、感動したところでもあります。</p>
<p>大体のプロジェクトには日本語なんてないし、そもそも多国語対応している 物の方が少ないと思います。 <del>知らんけど</del></p>
<p>全てが対応しているわけではないようですが、それでも十分インパクトがありました。</p>
<p>ちなみにページの情報によると、全部で次のような言語があるようですね。 …読めないものも多い！！</p>
<ul>
<li>日本語</li>
<li>English</li>
<li>中文</li>
<li>Español</li>
<li>Русский</li>
<li>Français</li>
<li>Deutsch</li>
<li>Italiano</li>
<li>Türkçe</li>
<li>Svenska</li>
<li>Nederlands</li>
<li>Dansk</li>
<li>Norsk</li>
<li>Čeština</li>
<li>Esperanto</li>
<li>Português</li>
<li>한국어</li>
<li>Magyar</li>
<li>Polski</li>
<li>Українська</li>
</ul>
<p><a href="https://www.jei.or.jp/3pundesiru/">Esperanto</a> があるのは個人的にめちゃくちゃ好き！！！</p>
<p>人工言語意外と好きなので… (今の推しは <a href="https://mw.lojban.org/index.php?title=Lojban&amp;setlang=ja">lojban</a> ですが。)</p>
<h2 id="Rust製である">Rust製である</h2>
<p>何かと低レイヤーに使われがちな気はしていますが、 カーネルはCが使われるイメージしかなかったのでとても斬新に感じました。</p>
<p>まぁ多分そうじゃないのもたくさんあるんだろうけど…疎いので…</p>
<h2 id="Coreutilとかshellとかエディタとか自作である">Coreutilとかshellとかエディタとか自作である</h2>
<p>何気にこれほんとすごいと思います。</p>
<ul>
<li><a href="https://gitlab.redox-os.org/redox-os/coreutils">coreutils</a></li>
<li><a href="https://gitlab.redox-os.org/redox-os/binutils">binutils</a></li>
<li><a href="https://gitlab.redox-os.org/redox-os/bootloader-efi">bootloader-efi</a></li>
<li><a href="https://gitlab.redox-os.org/redox-os/ion">ion(shell)</a></li>
<li><a href="https://gitlab.redox-os.org/redox-os/sodium">sodium(editor)</a></li>
</ul>
<h2 id="独自のshellがある">独自のshellがある</h2>
<p>これは自分がshell好きだからでもあるのですが、知らないshellを見るとやっぱりワクワクしますよね… <a href="https://gitlab.redox-os.org/redox-os/ion">ion(shell)</a></p>
]]></summary>
</entry>
<entry>
    <title>Python Language Serverにmypyにmypyの設定を追加した</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-21-python-install-pyls-mypy-along-with-vim-lsp-settings.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-21-python-install-pyls-mypy-along-with-vim-lsp-settings.html</id>
    <published>2021-02-21T00:00:00Z</published>
    <updated>2021-02-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>Python Language Serverにmypyにmypyの設定を追加した</h1>
  <div class="ui list">
    <div class="item">Posted on February 21, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 21, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;python&#39;." href="/tags/python.html" class="ui tag label">python</a><a title="All pages tagged &#39;環境構築&#39;." href="/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89.html" class="ui tag label">環境構築</a>
  
</div>

<h1 id="環境">環境</h1>
<table>
<tbody>
<tr class="odd">
<td>エディター</td>
<td>vim</td>
</tr>
<tr class="even">
<td>LSPクライアント</td>
<td>vim-lsp</td>
</tr>
<tr class="odd">
<td>PythonのLSP</td>
<td><a href="https://github.com/palantir/python-language-server">https://github.com/palantir/python-language-server</a></td>
</tr>
<tr class="even">
<td>他</td>
<td><a href="https://github.com/mattn/vim-lsp-settings">mattn/vim-lsp-settings</a> 使用</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="pyls-mypy">pyls-mypy</h1>
<p><em>pyls-mypy</em> はその名前の通り、Pyls(palantir氏のもの)にmypy対応させるプラグインです。</p>
<p>私は型大好き人間でAnnotationを頻繁に使うため、入れます。</p>
<h2 id="Install先">Install先</h2>
<p><em>pyls</em> を <em>vim-lsp-settings</em> で導入しているので、それがインストールしているのと同じ環境に <em>pyls-mypy</em> を入れてあげる 必要があります。</p>
<p>これは、 <code>XDG_DATA_HOME</code> が設定されていれば <code>XDG_DATA_HOME/vim-lsp-settings/servers</code> 、設定されていなければ <code>~/.local/share/vim-lsp-settings/servers</code> になります。</p>
<p>又、 <code>pyls</code> 自体はそのディレクトリの下に <code>pyls-all/venv</code> 等としてvenvを作っています。 なので、それを呼べばいいわけです。</p>
<p>自分用のスクリプトがdotfileにあるのですが、まだcommitしてないので実際の処理部分のみ載せます。 後にリンクに変えるかもしれません。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="va">vimLspSettings_dataDir=</span><span class="st">&quot;</span><span class="va">${XDG_DATA_HOME:-$HOME</span>/.local/share<span class="va">}</span><span class="st">/vim-lsp-settings}&quot;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="kw">[[</span> <span class="ot">-d</span> <span class="va">$vimLspSettings_dataDir</span><span class="kw"> ]]</span> <span class="kw">&amp;&amp;</span> <span class="kw">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    <span class="bu">.</span> <span class="st">&quot;</span><span class="va">${vimLspSettings_dataDir}</span><span class="st">/servers/pyls-all/venv/bin/activate&quot;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="ex">pip</span> install pyls-mypy</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>    <span class="ex">deactivate</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a></span></code></pre></div>
</div>
]]></summary>
</entry>
<entry>
    <title>機密が見えるかもしれないshell作業をストリーミングする方法が見つかりそう</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-20-tmux-how-to-hide-credentials-on-screencast.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-20-tmux-how-to-hide-credentials-on-screencast.html</id>
    <published>2021-02-20T00:00:00Z</published>
    <updated>2021-02-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>機密が見えるかもしれないshell作業をストリーミングする方法が見つかりそう</h1>
  <div class="ui list">
    <div class="item">Posted on February 20, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 21, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;shell&#39;." href="/tags/shell.html" class="ui tag label">shell</a><a title="All pages tagged &#39;tmux&#39;." href="/tags/tmux.html" class="ui tag label">tmux</a>
  
</div>

<p>わーい！！</p>
<p>…じゃ、なくて、説明をします</p>
<h1 id="Shell作業配信の現状の怖さ">Shell作業配信の現状の怖さ</h1>
<p>shell作業してること、よくあると思います。 人類の殆どの人間が、人生の訳80%程はshellに費やすと言われています(当社調べ)ので、 その作業を配信に流したくなることも勿論あるでしょう。</p>
<p>あるんですよ。</p>
<p>その時に困るのが、「作業中に必要or非表示にできない機密情報」の扱いです。</p>
<p>例えば:</p>
<ul>
<li>ユーザー名(ディレクトリ構造からバレることがあります)</li>
<li>Token類(APIなど)</li>
<li>RSAキー</li>
</ul>
<p>などなど…</p>
<p>これらが映るかもしれない作業は配信に載せることができませんよね。怖いので。</p>
<h1 id="指定の文字列を隠して配信をする方法！！！！">指定の文字列を隠して配信をする方法！！！！</h1>
<p>ですが！！この問題は意外と簡単に倒すことができます。</p>
<p>そう、*tmuxならね*</p>
<p>tmux知らない人はこんなニッチな記事には来ないと思うのですが簡単に説明しておくと、 GNU screenやbyobuと同じ「ターミナルマルチプレクサ」というプログラムです。</p>
<p><code>あとはggってください</code></p>
<h2 id="手順！！">手順！！</h2>
<p>具体的な方法に移ります。</p>
<p>簡単です。</p>
<ol>
<li>tmuxで作業を開きます。</li>
<li>使用しているターミナルで別ウィンドウを開きます。 <code>tty</code> コマンドで、使用している仮想端末を確認してください(このウィンドウを配信に使います)</li>
<li>2.で開いたウィンドウで、 <code>tput civis; unset PS1</code> します</li>
<li>作業しているtmux windowの中で、新しくpaneを開きます</li>
<li>そこで <code>clear &gt;&lt;2.で確認した仮想端末&gt;; tmux capture-pane -t 1 -pe | sed 's/&lt;隠したい情報&gt;/置換して代わりにおく文字列/g' &gt; &lt;2.で確認した端末&gt;</code> します。</li>
<li>するとあら不思議！！2.で開いたウィンドウにそっくりそのまま、隠したい情報だけ隠されて表示されました！！</li>
</ol>
<p>あとはこれをループさせて、裏で走らせればいいだけです！！</p>
<p>ちなみに寝る前にお風呂で思いついてしまい、とりあえず試してみたら動いたみたいなアイデアなのでまだ実装していませんが、のちに実装します。</p>
<p>多分。</p>
]]></summary>
</entry>
<entry>
    <title>fix-typoのデバッグメモ</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-20-blender-vrm-plugin-bugfix-after-merged-memo.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-20-blender-vrm-plugin-bugfix-after-merged-memo.html</id>
    <published>2021-02-20T00:00:00Z</published>
    <updated>2021-02-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>fix-typoのデバッグメモ</h1>
  <div class="ui list">
    <div class="item">Posted on February 20, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 22, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;python&#39;." href="/tags/python.html" class="ui tag label">python</a><a title="All pages tagged &#39;blender&#39;." href="/tags/blender.html" class="ui tag label">blender</a><a title="All pages tagged &#39;vrm&#39;." href="/tags/vrm.html" class="ui tag label">vrm</a><a title="All pages tagged &#39;VRM_IMPORTER_for_Blender&#39;." href="/tags/VRM_IMPORTER_for_Blender.html" class="ui tag label">VRM_IMPORTER_for_Blender</a>
  
</div>

<table>
<tbody>
<tr class="odd">
<td>該当PR</td>
<td><a href="https://github.com/saturday06/VRM_Addon_for_Blender/pull/23">saturday06/VRM<sub>IMPORTERforBlender</sub>: PR #23</a></td>
</tr>
<tr class="even">
<td>作業メモ</td>
<td><a href="https://Cj-bc.github.io/blog/posts/2021-01-11-blender-python-memo.html">https://Cj-bc.github.io/blog/posts/2021-01-11-blender-python-memo.html</a></td>
</tr>
</tbody>
</table>
<h1 id="問題">問題</h1>
<p><a href="https://github.com/saturday06/VRM_Addon_for_Blender/pull/23#issuecomment-782580000">issueでsaturday06さんが教えてくれた</a> のですが、「一度古いプラグインでVRMを読み込んだblendファイルで、新しくVRMを読み込むとエラーを吐く」</p>
<h2 id="トレースバック">トレースバック</h2>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>Traceback (most recent call last):
  File &quot;/Users/me/Library/Application
  Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/__init__.py&quot;,
  line 88, in execute
      blend_model.BlendModel(context, vrm_load.read_vrm(self.filepath, self),
      self)
        File &quot;/Users/me/Library/Application
        Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
        line 53, in __init__
            self.vrm_model_build()
              File &quot;/Users/me/Library/Application
              Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
              line 71, in vrm_model_build
                  self.make_material()
                    File &quot;/Users/me/Library/Application
                    Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
                    line 333, in make_material
                        self.build_material_from_mtoon(b_mat, mat)
                          File &quot;/Users/me/Library/Application
                          Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
                          line 646, in build_material_from_mtoon
                              color_socket_to_connect=sg.inputs[tex_dic[tex_name]],
                              KeyError: &#39;bpy_prop_collection[key]: key
                              &quot;NormalmapTexture&quot; not found&#39;

                              location: &lt;unknown location&gt;:-1
</code></pre>
</div>
<h1 id="バグが起きた場所">バグが起きた場所</h1>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>__init__.ImportVRM.execute()
└blend_model.BlendModel.__init__()
 └BlendModel.vrm_model_build()
  └BlendModel.make_material()
   └BlendModel.build_material_from_mtoon()
</code></pre>
</div>
<h1 id="バグの原因">バグの原因</h1>
<p><code>importer/blend_model.py:449</code> で <code>bpy.data.node_groups[shader_node_group_name]</code> を取ってきているところが原因。</p>
<p><code>bpy.data.node_groups</code> はblendfile内にある <code>node_groups</code> を保持しており、 既に「古いバージョンで読み込まれたVRM」がある場合 <code>bpy.data.node_groups["MToon_unversioned"]</code> は 「古いバージョンの <code>MToon_unversioned</code> 」=typoが含まれたものを返してしまう。</p>
<p>そうすると、 <code>node_group_create</code> から返されたのちに <code>.inputs["Normalmap"]</code> が読まれた際に存在せずにクラッシュしてしまう。</p>
<h1 id="解決方法">解決方法</h1>
<p>ここでできるのは</p>
<ol>
<li>今までと同じように"Normalmap"が存在しなかったら"Nomalmap"を読ませる</li>
<li>そもそも古い <code>bpy.data.node_groups["MToon_unversioned"]</code> を更新させる(どのタイミングで？)</li>
</ol>
]]></summary>
</entry>
<entry>
    <title>TERMをtmux-256colorにする</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-16-terminal-set-TERM-to-tmux-256color.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-16-terminal-set-TERM-to-tmux-256color.html</id>
    <published>2021-02-15T00:00:00Z</published>
    <updated>2021-02-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>TERMをtmux-256colorにする</h1>
  <div class="ui list">
    <div class="item">Posted on February 15, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 16, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;tmux&#39;." href="/tags/tmux.html" class="ui tag label">tmux</a><a title="All pages tagged &#39;terminal&#39;." href="/tags/terminal.html" class="ui tag label">terminal</a><a title="All pages tagged &#39;vim&#39;." href="/tags/vim.html" class="ui tag label">vim</a>
  
</div>

<h1 id="なぜやるのか">なぜやるのか</h1>
<p>かねてよりmacOSが重くなることに困っていて、 <a href="https://github.com/tmux/tmux/issues/353#issuecomment-202726966">macでtmuxとvimを使うとvimがすごく重くなる</a> を見つけました。</p>
<p>結果論としては「これがパフォーマンスをよくする」というわけではなさそうでしたが、 とりあえずtmuxを使っているので、揃えることにしました。</p>
<h1 id="前提知識">前提知識</h1>
<h2 id="そもそもTERM環境変数とは何か">そもそもTERM環境変数とは何か</h2>
<p><code>$TERM</code> は、ncursesなどが使っている <strong>terminfoライブラリ</strong> の動作に影響する環境変数です。 この変数で「なんの端末を使っているか」を設定し、terminfoライブラリがそれに応じて出力を変えているため、 cursesを使用する開発者は端末の差をあまり考えずに様々な端末に対応したソフトウェアを書くことができるのです。 (エスケープシーケンスとか決めている)</p>
<p>実は端末エミュレーター(とそもそもの端末)には色々な種類があります。有名どころだと <code>xterm</code>, <code>cygwin</code>, <code>guru</code>, <code>vtシリーズ</code> などでしょうか</p>
<p>筆者もそこまで詳しくないですが、途方もない数の仕様の端末が存在しています。 それらを共通のインターフェースで扱えるようにするのが <code>terminfo</code>, そして「今使っている端末」を設定するのが <code>TERM</code> 環境変数、ということです。</p>
<p>ちなみに余談ですが、=terminfo= で使用されるデータはmacの場合、 <code>/usr/share/terminfo</code> に格納されています。</p>
<h2 id="terminfoエントリ">terminfoエントリ</h2>
<p>terminfoエントリは、</p>
<p><a href="info:terminfo">info:terminfo</a></p>
<h1 id="手順">手順</h1>
<ul>
<li><a href="#tmux.confで、tmux内でのTERMを設定する">tmux.confで、tmux内でのTERMを設定する</a></li>
<li><a href="#terminfoエントリーを追加する">(terminfoのエラーが出る場合) terminfoエントリーを追加する</a></li>
</ul>
<h2 id="tmux.confで、tmux内でのTERMを設定する">tmux.confで、tmux内でのTERMを設定する</h2>
<p><a href="https://github.com/tmux/tmux/issues/353#issuecomment-202726966">前出のリンク</a>で説明されているように、 以下を <code>~/. tmux.conf</code> (または使っているtmux.confファイル)に追加します</p>
<div class="ui segment">
<div class="ui top right attached label">
tmux
</div>
<pre class="tmux SourceCode"><code>set -g default-terminal &quot;xterm-256color&quot;
</code></pre>
</div>
<h2 id="terminfoエントリーを追加する">terminfoエントリーを追加する</h2>
<p>筆者の環境(macOS+homebrew)では、terminfoエントリーがないと怒られてしまいエスケープシーケンスが全く使えなくなりました。</p>
<p>しかし、実はhomebrewもきちんとterminfoエントリーを作成してくれています。 <code>/usr/local/opt/ncurses/bin/infocmp</code> には作成されたエントリーが保存されているのですが、ここは残念ながら参照されません。</p>
<p>そこで、<a href="https://github.com/tmux/tmux/issues/1257#issuecomment-581378716">tmuxのissueにあった方法</a> で <code>/usr/bin/infocmp</code> に追加します</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>$ <span class="ex">brew</span> install ncurses</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>$ <span class="ex">/usr/local/opt/ncurses/bin/infocmp</span> tmux-256color <span class="op">&gt;</span> ~/tmux-256color.info</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>$ <span class="ex">tic</span> -xe tmux-256color tmux-256color.info</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co"># This creates a complied entry in ~/.terminfo</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>$ <span class="ex">infocmp</span> tmux-256color <span class="kw">|</span> <span class="fu">head</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="co">#       Reconstructed via infocmp from file:</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co">#       /Users/libin/.terminfo/74/tmux-256color</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="ex">tmux-256color</span><span class="kw">|</span><span class="ex">tmux</span> with 256 colors,</span></code></pre></div>
</div>
<h1 id="参考リンク">参考リンク</h1>
<ul>
<li><a href="https://github.com/tmux/tmux/issues/353#issuecomment-202726966">https://github.com/tmux/tmux/issues/353#issuecomment-202726966</a></li>
<li><a href="https://chakku.hatenablog.com/entry/2018/07/22/040129">tmux上でtmux-256colorを使用する(mac) – ちゃっくのメモ帳</a></li>
<li><a href="https://github.com/tmux/tmux/issues/1257#issuecomment-581378716">https://github.com/tmux/tmux/issues/1257#issuecomment-581378716</a></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>org fileでの投稿のテストです</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-01-31-org-file-test.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-01-31-org-file-test.html</id>
    <published>2021-01-31T00:00:00Z</published>
    <updated>2021-01-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>org fileでの投稿のテストです</h1>
  <div class="ui list">
    <div class="item">Posted on January 31, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February  1, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;org&#39;." href="/tags/org.html" class="ui tag label">org</a>
  
</div>

<h1 id="org fileでの投稿のテストです">org fileでの投稿のテストです</h1>
<p>org fileには別の~Compiler~が必要かな？ もしかして <code>code</code> の左右には空白が必要？</p>
<h2 id="h2, 大体は動いてそう">h2, 大体は動いてそう</h2>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;hello world&quot;</span></span></code></pre></div>
</div>
]]></summary>
</entry>
<entry>
    <title>AEのMarker</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-01-19-after-effect-markers.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-01-19-after-effect-markers.html</id>
    <published>2021-01-19T00:00:00Z</published>
    <updated>2021-01-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>AEのMarker</h1>
  <div class="ui list">
    <div class="item">Posted on January 19, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on January 19, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;after effect&#39;." href="/tags/after%20effect.html" class="ui tag label">after effect</a>
  
</div>

<ul>
<li><a href="https://helpx.adobe.com/jp/after-effects/user-guide.html/jp/after-effects/using/layer-markers-composition-markers.ug.html">公式URL</a></li>
</ul>
<h1 id="Markerとは">Markerとは</h1>
<p><strong>keyframeとは別</strong> である。 <em>レイヤーマーカー</em> と <em>コンポジションマーカー</em> の二種類がある。 今回コンポジションマーカー使わないので、使うときにでも追記する</p>
<h2 id="レイヤーマーカー">レイヤーマーカー</h2>
<p>キーフレームに似ているが、Expressionからその値を参照することができる。</p>
<h3 id="作り方">作り方</h3>
<ol>
<li>レイヤーを選択</li>
<li>マーカーを置きたいframeに移動する</li>
<li><code>レイヤー/マーカー/マーカーを追加</code>もしくは <em>キーパッドの</em> <code>*</code></li>
</ol>
]]></summary>
</entry>

</feed>
