<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/general.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/general.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2021-02-21T00:00:00Z</updated>
    <entry>
    <title>Python Language Serverにmypyにmypyの設定を追加した</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-21-python-install-pyls-mypy-along-with-vim-lsp-settings.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-21-python-install-pyls-mypy-along-with-vim-lsp-settings.html</id>
    <published>2021-02-21T00:00:00Z</published>
    <updated>2021-02-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>Python Language Serverにmypyにmypyの設定を追加した</h1>
  <div class="ui list">
    <div class="item">Posted on February 21, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 21, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;python&#39;." href="/tags/python.html" class="ui tag label">python</a><a title="All pages tagged &#39;環境構築&#39;." href="/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89.html" class="ui tag label">環境構築</a>
  
</div>

<h1 id="環境">環境</h1>
<table>
<tbody>
<tr class="odd">
<td>エディター</td>
<td>vim</td>
</tr>
<tr class="even">
<td>LSPクライアント</td>
<td>vim-lsp</td>
</tr>
<tr class="odd">
<td>PythonのLSP</td>
<td><a href="https://github.com/palantir/python-language-server">https://github.com/palantir/python-language-server</a></td>
</tr>
<tr class="even">
<td>他</td>
<td><a href="https://github.com/mattn/vim-lsp-settings">mattn/vim-lsp-settings</a> 使用</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="pyls-mypy">pyls-mypy</h1>
<p><em>pyls-mypy</em> はその名前の通り、Pyls(palantir氏のもの)にmypy対応させるプラグインです。</p>
<p>私は型大好き人間でAnnotationを頻繁に使うため、入れます。</p>
<h2 id="Install先">Install先</h2>
<p><em>pyls</em> を <em>vim-lsp-settings</em> で導入しているので、それがインストールしているのと同じ環境に <em>pyls-mypy</em> を入れてあげる 必要があります。</p>
<p>これは、 <code>XDG_DATA_HOME</code> が設定されていれば <code>XDG_DATA_HOME/vim-lsp-settings/servers</code> 、設定されていなければ <code>~/.local/share/vim-lsp-settings/servers</code> になります。</p>
<p>又、 <code>pyls</code> 自体はそのディレクトリの下に <code>pyls-all/venv</code> 等としてvenvを作っています。 なので、それを呼べばいいわけです。</p>
<p>自分用のスクリプトがdotfileにあるのですが、まだcommitしてないので実際の処理部分のみ載せます。 後にリンクに変えるかもしれません。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="va">vimLspSettings_dataDir=</span><span class="st">&quot;</span><span class="va">${XDG_DATA_HOME:-$HOME</span>/.local/share<span class="va">}</span><span class="st">/vim-lsp-settings}&quot;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="kw">[[</span> <span class="ot">-d</span> <span class="va">$vimLspSettings_dataDir</span><span class="kw"> ]]</span> <span class="kw">&amp;&amp;</span> <span class="kw">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    <span class="bu">.</span> <span class="st">&quot;</span><span class="va">${vimLspSettings_dataDir}</span><span class="st">/servers/pyls-all/venv/bin/activate&quot;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="ex">pip</span> install pyls-mypy</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>    <span class="ex">deactivate</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a></span></code></pre></div>
</div>
]]></summary>
</entry>
<entry>
    <title>機密が見えるかもしれないshell作業をストリーミングする方法が見つかりそう</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-20-tmux-how-to-hide-credentials-on-screencast.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-20-tmux-how-to-hide-credentials-on-screencast.html</id>
    <published>2021-02-20T00:00:00Z</published>
    <updated>2021-02-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>機密が見えるかもしれないshell作業をストリーミングする方法が見つかりそう</h1>
  <div class="ui list">
    <div class="item">Posted on February 20, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 21, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;shell&#39;." href="/tags/shell.html" class="ui tag label">shell</a><a title="All pages tagged &#39;tmux&#39;." href="/tags/tmux.html" class="ui tag label">tmux</a>
  
</div>

<p>わーい！！</p>
<p>…じゃ、なくて、説明をします</p>
<h1 id="Shell作業配信の現状の怖さ">Shell作業配信の現状の怖さ</h1>
<p>shell作業してること、よくあると思います。 人類の殆どの人間が、人生の訳80%程はshellに費やすと言われています(当社調べ)ので、 その作業を配信に流したくなることも勿論あるでしょう。</p>
<p>あるんですよ。</p>
<p>その時に困るのが、「作業中に必要or非表示にできない機密情報」の扱いです。</p>
<p>例えば:</p>
<ul>
<li>ユーザー名(ディレクトリ構造からバレることがあります)</li>
<li>Token類(APIなど)</li>
<li>RSAキー</li>
</ul>
<p>などなど…</p>
<p>これらが映るかもしれない作業は配信に載せることができませんよね。怖いので。</p>
<h1 id="指定の文字列を隠して配信をする方法！！！！">指定の文字列を隠して配信をする方法！！！！</h1>
<p>ですが！！この問題は意外と簡単に倒すことができます。</p>
<p>そう、*tmuxならね*</p>
<p>tmux知らない人はこんなニッチな記事には来ないと思うのですが簡単に説明しておくと、 GNU screenやbyobuと同じ「ターミナルマルチプレクサ」というプログラムです。</p>
<p><code>あとはggってください</code></p>
<h2 id="手順！！">手順！！</h2>
<p>具体的な方法に移ります。</p>
<p>簡単です。</p>
<ol>
<li>tmuxで作業を開きます。</li>
<li>使用しているターミナルで別ウィンドウを開きます。 <code>tty</code> コマンドで、使用している仮想端末を確認してください(このウィンドウを配信に使います)</li>
<li>2.で開いたウィンドウで、 <code>tput civis; unset PS1</code> します</li>
<li>作業しているtmux windowの中で、新しくpaneを開きます</li>
<li>そこで <code>clear &gt;&lt;2.で確認した仮想端末&gt;; tmux capture-pane -t 1 -pe | sed 's/&lt;隠したい情報&gt;/置換して代わりにおく文字列/g' &gt; &lt;2.で確認した端末&gt;</code> します。</li>
<li>するとあら不思議！！2.で開いたウィンドウにそっくりそのまま、隠したい情報だけ隠されて表示されました！！</li>
</ol>
<p>あとはこれをループさせて、裏で走らせればいいだけです！！</p>
<p>ちなみに寝る前にお風呂で思いついてしまい、とりあえず試してみたら動いたみたいなアイデアなのでまだ実装していませんが、のちに実装します。</p>
<p>多分。</p>
]]></summary>
</entry>
<entry>
    <title>fix-typoのデバッグメモ</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-20-blender-vrm-plugin-bugfix-after-merged-memo.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-20-blender-vrm-plugin-bugfix-after-merged-memo.html</id>
    <published>2021-02-20T00:00:00Z</published>
    <updated>2021-02-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>fix-typoのデバッグメモ</h1>
  <div class="ui list">
    <div class="item">Posted on February 20, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 21, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;python&#39;." href="/tags/python.html" class="ui tag label">python</a><a title="All pages tagged &#39;blender&#39;." href="/tags/blender.html" class="ui tag label">blender</a><a title="All pages tagged &#39;vrm&#39;." href="/tags/vrm.html" class="ui tag label">vrm</a><a title="All pages tagged &#39;VRM_IMPORTER_for_Blender&#39;." href="/tags/VRM_IMPORTER_for_Blender.html" class="ui tag label">VRM_IMPORTER_for_Blender</a>
  
</div>

<p>該当PR: <a href="https://github.com/saturday06/VRM_Addon_for_Blender/pull/23">saturday06/VRM<sub>IMPORTERforBlender</sub>: PR #23</a> 作業メモ: <a href="https://Cj-bc.github.io/blog/posts/2021-01-11-blender-python-memo.html">https://Cj-bc.github.io/blog/posts/2021-01-11-blender-python-memo.html</a></p>
<h1 id="問題">問題</h1>
<p><a href="https://github.com/saturday06/VRM_Addon_for_Blender/pull/23#issuecomment-782580000">issueでsaturday06さんが教えてくれた</a> のですが、「一度古いプラグインでVRMを読み込んだblendファイルで、新しくVRMを読み込むとエラーを吐く」</p>
<h2 id="トレースバック">トレースバック</h2>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>Traceback (most recent call last):
  File &quot;/Users/me/Library/Application
  Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/__init__.py&quot;,
  line 88, in execute
      blend_model.BlendModel(context, vrm_load.read_vrm(self.filepath, self),
      self)
        File &quot;/Users/me/Library/Application
        Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
        line 53, in __init__
            self.vrm_model_build()
              File &quot;/Users/me/Library/Application
              Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
              line 71, in vrm_model_build
                  self.make_material()
                    File &quot;/Users/me/Library/Application
                    Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
                    line 333, in make_material
                        self.build_material_from_mtoon(b_mat, mat)
                          File &quot;/Users/me/Library/Application
                          Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
                          line 646, in build_material_from_mtoon
                              color_socket_to_connect=sg.inputs[tex_dic[tex_name]],
                              KeyError: &#39;bpy_prop_collection[key]: key
                              &quot;NormalmapTexture&quot; not found&#39;

                              location: &lt;unknown location&gt;:-1
</code></pre>
</div>
<h1 id="バグが起きた場所">バグが起きた場所</h1>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>__init__.ImportVRM.execute()
└blend_model.BlendModel.__init__()
 └BlendModel.vrm_model_build()
  └BlendModel.make_material()
   └BlendModel.build_material_from_mtoon()
</code></pre>
</div>
<h1 id="バグの原因">バグの原因</h1>
<p><code>node_group_create</code> は新しいNodegroupを作って返すが、</p>
<p>importer/blend<sub>model</sub>.py:449 で <code>bpy.data.node_groups[shader_node_group_name]</code> を取ってきているところが原因。</p>
<p><code>bpy.data.node_groups</code> はblendfile内にあるnode<sub>groupsを保持しており</sub>、 既に「古いバージョンで読み込まれたVRM」がある場合 <code>bpy.data.node_groups["MToon_unversioned"]</code> は 「古いバージョンのMToon<sub>unversioned</sub>」=typoが含まれたものを返してしまう。 そうすると、 <code>node_group_create</code> から返されたのちに <code>.inputs["Normalmap"]</code> が読まれた際に存在せずにクラッシュしてしまう。</p>
<h1 id="解決方法">解決方法</h1>
<p>ここでできるのは</p>
<ol>
<li>今までと同じように"Normalmap"が存在しなかったら"Nomalmap"を読ませる</li>
<li>そもそも古い <code>bpy.data.node_groups["MToon_unversioned"]</code> を更新させる</li>
<li></li>
</ol>
]]></summary>
</entry>
<entry>
    <title>TERMをtmux-256colorにする</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-16-terminal-set-TERM-to-tmux-256color.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-16-terminal-set-TERM-to-tmux-256color.html</id>
    <published>2021-02-15T00:00:00Z</published>
    <updated>2021-02-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>TERMをtmux-256colorにする</h1>
  <div class="ui list">
    <div class="item">Posted on February 15, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 16, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;tmux&#39;." href="/tags/tmux.html" class="ui tag label">tmux</a><a title="All pages tagged &#39;terminal&#39;." href="/tags/terminal.html" class="ui tag label">terminal</a><a title="All pages tagged &#39;vim&#39;." href="/tags/vim.html" class="ui tag label">vim</a>
  
</div>

<h1 id="なぜやるのか">なぜやるのか</h1>
<p>かねてよりmacOSが重くなることに困っていて、 <a href="https://github.com/tmux/tmux/issues/353#issuecomment-202726966">macでtmuxとvimを使うとvimがすごく重くなる</a> を見つけました。</p>
<p>結果論としては「これがパフォーマンスをよくする」というわけではなさそうでしたが、 とりあえずtmuxを使っているので、揃えることにしました。</p>
<h1 id="前提知識">前提知識</h1>
<h2 id="そもそもTERM環境変数とは何か">そもそもTERM環境変数とは何か</h2>
<p><code>$TERM</code> は、ncursesなどが使っている <strong>terminfoライブラリ</strong> の動作に影響する環境変数です。 この変数で「なんの端末を使っているか」を設定し、terminfoライブラリがそれに応じて出力を変えているため、 cursesを使用する開発者は端末の差をあまり考えずに様々な端末に対応したソフトウェアを書くことができるのです。 (エスケープシーケンスとか決めている)</p>
<p>実は端末エミュレーター(とそもそもの端末)には色々な種類があります。有名どころだと <code>xterm</code>, <code>cygwin</code>, <code>guru</code>, <code>vtシリーズ</code> などでしょうか</p>
<p>筆者もそこまで詳しくないですが、途方もない数の仕様の端末が存在しています。 それらを共通のインターフェースで扱えるようにするのが <code>terminfo</code>, そして「今使っている端末」を設定するのが <code>TERM</code> 環境変数、ということです。</p>
<p>ちなみに余談ですが、=terminfo= で使用されるデータはmacの場合、 <code>/usr/share/terminfo</code> に格納されています。</p>
<h2 id="terminfoエントリ">terminfoエントリ</h2>
<p>terminfoエントリは、</p>
<p><a href="info:terminfo">info:terminfo</a></p>
<h1 id="手順">手順</h1>
<ul>
<li><a href="#tmux.confで、tmux内でのTERMを設定する">tmux.confで、tmux内でのTERMを設定する</a></li>
<li><a href="#terminfoエントリーを追加する">(terminfoのエラーが出る場合) terminfoエントリーを追加する</a></li>
</ul>
<h2 id="tmux.confで、tmux内でのTERMを設定する">tmux.confで、tmux内でのTERMを設定する</h2>
<p><a href="https://github.com/tmux/tmux/issues/353#issuecomment-202726966">前出のリンク</a>で説明されているように、 以下を <code>~/. tmux.conf</code> (または使っているtmux.confファイル)に追加します</p>
<div class="ui segment">
<div class="ui top right attached label">
tmux
</div>
<pre class="tmux SourceCode"><code>set -g default-terminal &quot;xterm-256color&quot;
</code></pre>
</div>
<h2 id="terminfoエントリーを追加する">terminfoエントリーを追加する</h2>
<p>筆者の環境(macOS+homebrew)では、terminfoエントリーがないと怒られてしまいエスケープシーケンスが全く使えなくなりました。</p>
<p>しかし、実はhomebrewもきちんとterminfoエントリーを作成してくれています。 <code>/usr/local/opt/ncurses/bin/infocmp</code> には作成されたエントリーが保存されているのですが、ここは残念ながら参照されません。</p>
<p>そこで、<a href="https://github.com/tmux/tmux/issues/1257#issuecomment-581378716">tmuxのissueにあった方法</a> で <code>/usr/bin/infocmp</code> に追加します</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>$ <span class="ex">brew</span> install ncurses</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>$ <span class="ex">/usr/local/opt/ncurses/bin/infocmp</span> tmux-256color <span class="op">&gt;</span> ~/tmux-256color.info</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>$ <span class="ex">tic</span> -xe tmux-256color tmux-256color.info</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co"># This creates a complied entry in ~/.terminfo</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>$ <span class="ex">infocmp</span> tmux-256color <span class="kw">|</span> <span class="fu">head</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="co">#       Reconstructed via infocmp from file:</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co">#       /Users/libin/.terminfo/74/tmux-256color</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="ex">tmux-256color</span><span class="kw">|</span><span class="ex">tmux</span> with 256 colors,</span></code></pre></div>
</div>
<h1 id="参考リンク">参考リンク</h1>
<ul>
<li><a href="https://github.com/tmux/tmux/issues/353#issuecomment-202726966">https://github.com/tmux/tmux/issues/353#issuecomment-202726966</a></li>
<li><a href="https://chakku.hatenablog.com/entry/2018/07/22/040129">tmux上でtmux-256colorを使用する(mac) – ちゃっくのメモ帳</a></li>
<li><a href="https://github.com/tmux/tmux/issues/1257#issuecomment-581378716">https://github.com/tmux/tmux/issues/1257#issuecomment-581378716</a></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>org fileでの投稿のテストです</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-01-31-org-file-test.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-01-31-org-file-test.html</id>
    <published>2021-01-31T00:00:00Z</published>
    <updated>2021-01-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>org fileでの投稿のテストです</h1>
  <div class="ui list">
    <div class="item">Posted on January 31, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February  1, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;org&#39;." href="/tags/org.html" class="ui tag label">org</a>
  
</div>

<h1 id="org fileでの投稿のテストです">org fileでの投稿のテストです</h1>
<p>org fileには別の~Compiler~が必要かな？ もしかして <code>code</code> の左右には空白が必要？</p>
<h2 id="h2, 大体は動いてそう">h2, 大体は動いてそう</h2>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;hello world&quot;</span></span></code></pre></div>
</div>
]]></summary>
</entry>
<entry>
    <title>AEのMarker</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-01-19-after-effect-markers.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-01-19-after-effect-markers.html</id>
    <published>2021-01-19T00:00:00Z</published>
    <updated>2021-01-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>AEのMarker</h1>
  <div class="ui list">
    <div class="item">Posted on January 19, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on January 19, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;after effect&#39;." href="/tags/after%20effect.html" class="ui tag label">after effect</a>
  
</div>

<ul>
<li><a href="https://helpx.adobe.com/jp/after-effects/user-guide.html/jp/after-effects/using/layer-markers-composition-markers.ug.html">公式URL</a></li>
</ul>
<h1 id="Markerとは">Markerとは</h1>
<p><strong>keyframeとは別</strong> である。 <em>レイヤーマーカー</em> と <em>コンポジションマーカー</em> の二種類がある。 今回コンポジションマーカー使わないので、使うときにでも追記する</p>
<h2 id="レイヤーマーカー">レイヤーマーカー</h2>
<p>キーフレームに似ているが、Expressionからその値を参照することができる。</p>
<h3 id="作り方">作り方</h3>
<ol>
<li>レイヤーを選択</li>
<li>マーカーを置きたいframeに移動する</li>
<li><code>レイヤー/マーカー/マーカーを追加</code>もしくは <em>キーパッドの</em> <code>*</code></li>
</ol>
]]></summary>
</entry>
<entry>
    <title>fzf.vimでカレントディレクトリ以外のGitファイルを検索</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-01-13-GFiles-more-careful-with-fzf.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-01-13-GFiles-more-careful-with-fzf.html</id>
    <published>2021-01-14T00:00:00Z</published>
    <updated>2021-01-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>fzf.vimでカレントディレクトリ以外のGitファイルを検索</h1>
  <div class="ui list">
    <div class="item">Posted on January 14, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on January 14, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;fzf.vim&#39;." href="/tags/fzf.vim.html" class="ui tag label">fzf.vim</a><a title="All pages tagged &#39;fzf&#39;." href="/tags/fzf.html" class="ui tag label">fzf</a><a title="All pages tagged &#39;vim&#39;." href="/tags/vim.html" class="ui tag label">vim</a>
  
</div>

<h1 id="GFilesは便利"><code>GFiles</code>は便利</h1>
<p><code>GFiles</code>は、カレントディレクトリにgitレポジトリがあると仮定して、そのレポジトリに認識されるファイル(=一度はコミットされているファイル) の一覧を作り出します。</p>
<p>しかし、場合によっては「カレントディレクトリ以外のgitレポジトリにあるファイルを参照したい」ことがあると思います。</p>
<p>例えば、私は普段プロジェクトに取り組んでいる最中にブログを書いたりするのですが、まさにその時などです。 カレントディレクトリはプロジェクトディレクトリのままで、ブログのレポジトリに対して<code>GFiles</code>を使いたいのです。</p>
<p>これは公式の方法が(多分)ないので直接書き換えます。</p>
<p><code>~/.vim/bundle/fzf.vim/autoload/fzf/vim.vim</code>の<code>s:get_git_root()</code>がgitレポジトリを見つけるためのコードなので、ここにfugitiveが使う<code>b:git_dir</code>変数の中身を適用するように編集します。</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>function! s:get_git_root()
  let root = split(system(&#39;git rev-parse --show-toplevel&#39;), &#39;\n&#39;)[0]
  return v:shell_error ? &#39;&#39; : root
endfunction</code></pre>
</div>
<p>こうだったのが</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>function! s:get_git_root()
  let root = split(system(&#39;git rev-parse --show-toplevel&#39;), &#39;\n&#39;)[0]
  let root_ = root ? root : b:git_dir
  return v:shell_error ? &#39;&#39; : root_
endfunction</code></pre>
</div>
<p>こうすることにより、<code>git_dir</code>も有効に検索されるようになりました。</p>
]]></summary>
</entry>
<entry>
    <title>After Effectショートカットキーチートシート(個人用)</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-01-13-after-effect-cheat-sheet.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-01-13-after-effect-cheat-sheet.html</id>
    <published>2021-01-13T00:00:00Z</published>
    <updated>2021-01-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>After Effectショートカットキーチートシート(個人用)</h1>
  <div class="ui list">
    <div class="item">Posted on January 13, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on January 14, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;after effect&#39;." href="/tags/after%20effect.html" class="ui tag label">after effect</a><a title="All pages tagged &#39;cheat sheet&#39;." href="/tags/cheat%20sheet.html" class="ui tag label">cheat sheet</a>
  
</div>

<p>個人用のチートシート</p>
<p>やりたいこと ショートカットキー ----------------- ------------------- Layerをカットする Ctrl+Shift+D</p>
]]></summary>
</entry>
<entry>
    <title>Expressionを使ったアニメーションのメモ</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-01-13-after-effect-animation-with-expressions.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-01-13-after-effect-animation-with-expressions.html</id>
    <published>2021-01-13T00:00:00Z</published>
    <updated>2021-01-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>Expressionを使ったアニメーションのメモ</h1>
  <div class="ui list">
    <div class="item">Posted on January 13, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on January 19, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;after effect&#39;." href="/tags/after%20effect.html" class="ui tag label">after effect</a>
  
</div>

<h1 id="Expression制御のEffectは必ずリネームする">Expression制御のEffectは必ずリネームする</h1>
<p>同じ種類のExpression制御Effectを一度しか使わないなら問題にはならない気がしますが、 後々見やすいのでリネームをした方が良いです。<br />
そして、<strong>できる限り早く</strong>リネームするようにしてください。 複数の同じエフェクトを作成・Expressionから参照した後にリネームした場合、 <strong>Expression内の同名の部分が全て新しい名前に置き換わります</strong>。<br />
例えば、</p>
<h2 id="リネームの仕方">リネームの仕方</h2>
<p><a href="https://creativecow.net/forums/thread/rename-expression-controlsae-2/">参考にしたもの</a></p>
<p>例えばスライダー制御のEffectをリネームする場合、<code>エフェクト→スライダー制御</code>を選択してEnterを押します。 すると普段通りにリネームできます。~~私は気付かなかった...~~</p>
<h1 id="Expressionのコピペ">Expressionのコピペ</h1>
<p>作成したExpressionを含むプロパティを選択しC-cで普段通りコピー。 コピー先のレイヤーを選択してC-vするとそのままペーストされる。</p>
<h1 id="一定の時間から色などを変化させる">一定の時間から色などを変化させる</h1>
<p>固定値を使わなくても<code>Marker</code>を使えばできる。</p>
<ul>
<li><a href="https://helpx.adobe.com/jp/after-effects/user-guide.html/jp/after-effects/using/layer-markers-composition-markers.ug.html">公式URL</a></li>
<li><a href="https://cj-bc.github.com/blog/posts/2021-01-19-after-effect-markers.html">Markerについて</a></li>
</ul>
<h2 id="レイヤーマーカーを参照する">レイヤーマーカーを参照する</h2>
<p>https://helpx.adobe.com/jp/after-effects/user-guide.html/jp/after-effects/using/expression-language-reference.ug.html</p>
<div class="ui segment">
<div class="ui top right attached label">
javascript
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript SourceCode"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>thisLayer<span class="op">.</span><span class="at">marker</span><span class="op">.</span><span class="fu">key</span>(n<span class="op">:</span> int)    <span class="co">// n番目のマーカーを参照する</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>thisLayer<span class="op">.</span><span class="at">marker</span><span class="op">.</span><span class="fu">key</span>(name<span class="op">:</span> str) <span class="co">// nameという名前のマーカーを参照する</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>thisLayer<span class="op">.</span><span class="at">marker</span><span class="op">.</span><span class="fu">nearestKey</span>(t<span class="op">:</span> float) <span class="co">// tという時間に一番近いマーカーを参照する</span></span></code></pre></div>
</div>
]]></summary>
</entry>
<entry>
    <title>VRM_IMPORTER_for_Blender \#23 作業メモ</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-01-11-blender-python-memo.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-01-11-blender-python-memo.html</id>
    <published>2021-01-11T00:00:00Z</published>
    <updated>2021-01-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>VRM_IMPORTER_for_Blender \#23 作業メモ</h1>
  <div class="ui list">
    <div class="item">Posted on January 11, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on January 15, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;blender&#39;." href="/tags/blender.html" class="ui tag label">blender</a><a title="All pages tagged &#39;python&#39;." href="/tags/python.html" class="ui tag label">python</a>
  
</div>

<h1 id="追加されたシェーダーを探す">追加されたシェーダーを探す</h1>
<h2 id="場所の特定">場所の特定</h2>
<p>そもそもファイルがどこに追加されているのかを確かめる必要がある。 そこで、<code>__init__.py</code>を参照する。(どうでもいいけど中身のある<code>__init__.py</code>は初めて見た)<br />
Blenderは、Addonが追加されるとクラスなどを登録するために<code>register()</code>という関数を探して実行する。 以下がこのAddonの<code>register()</code>関数。 (<a href="https://github.com/saturday06/VRM_IMPORTER_for_Blender/blob/a14835bfbc573a1d8f2be2a74ed198da46a573e4/__init__.py#L277-L285">githubで確認する</a>)</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co"># アドオン有効化時の処理</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">def</span> register():</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="cf">for</span> cls <span class="kw">in</span> classes:</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>        bpy.utils.register_class(cls)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    bpy.types.TOPBAR_MT_file_import.append(menu_import)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>    bpy.types.TOPBAR_MT_file_export.append(menu_export)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>    bpy.types.VIEW3D_MT_armature_add.append(add_armature)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>    <span class="co"># bpy.types.VIEW3D_MT_mesh_add.append(make_mesh)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>    bpy.app.handlers.load_post.append(add_shaders)</span></code></pre></div>
</div>
<p>明らかに<code>bpy.app.handlers.load_post.append(add_shaders)</code>が怪しい。というか、<code>add_shaders</code>という わかりやすい名前があるので間違い無くここで追加している。 ということで<code>add_shaders</code>を見てみると (<a href="https://github.com/saturday06/VRM_IMPORTER_for_Blender/blob/a14835bfbc573a1d8f2be2a74ed198da46a573e4/__init__.py#L245-L253">githubで確認する</a>)</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="at">@persistent</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">def</span> add_shaders(<span class="va">self</span>):</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    filedir <span class="op">=</span> os.path.join(</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>        os.path.dirname(<span class="va">__file__</span>), <span class="st">&quot;resources&quot;</span>, <span class="st">&quot;material_node_groups.blend&quot;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>    )</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    <span class="cf">with</span> bpy.data.libraries.load(filedir, link<span class="op">=</span><span class="va">False</span>) <span class="im">as</span> (data_from, data_to):</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>        <span class="cf">for</span> nt <span class="kw">in</span> data_from.node_groups:</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>            <span class="cf">if</span> nt <span class="kw">not</span> <span class="kw">in</span> bpy.data.node_groups:</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>                data_to.node_groups.append(nt)</span></code></pre></div>
</div>
<h2 id="実際にshaderを追加している部分">実際にshaderを追加している部分</h2>
<p>このコードである。そして、読めば字の如くだが、レポジトリにある<code>resources/material_node_groups.blend</code> にある<code>node_groups</code>の中でBlenderに存在していないものがあれば <code>data_to.node_groups.append()</code>して追加している。<br />
結論から言うと<a href="https://docs.blender.org/api/current/bpy.types.BlendData.html?highlight=node_groups#bpy.types.BlendData.node_groups"><code>node_groups</code></a>は nodeで表現されるもの(オブジェクト？)、つまり<code>Shading</code>/<code>Textures</code>/<code>Compositin</code>に関わるものの集合である。 (<a href="https://docs.blender.org/api/current/bpy.types.NodeTree.html#bpy.types.NodeTree">公式doc</a>)<br />
type()によると、<code>bpy.data</code>は<code>bpy.types.BlendData</code>であるので、<code>node_groups</code>は <a href="https://docs.blender.org/api/current/bpy.types.BlendData.html?highlight=node_groups#bpy.types.BlendData.node_groups"><code>bpy.types.BlendData.node_groups</code></a> である。 ここで、なんとなく<code>bpy.data</code>を見てみると<code>bpy.data.node_groups</code>に追加されてることがわかる。</p>
<details>
<summary>`bpy.data.node_groups`までたどり着く道のりメモ(でもよくわからなくて落書き)</summary>
`data_to`は[`bpy.data.libraries.load`](https://docs.blender.org/api/current/bpy.types.BlendDataLibraries.html#bpy.types.BlendDataLibraries.load)から返されている。
`bpy.data`が[`BlendData`](https://docs.blender.org/api/current/bpy.types.BlendData.html)のインスタンスであることから
`bpy.data.libraries.load`は[`BlendDataLibraries.load`](https://docs.blender.org/api/current/bpy.types.BlendDataLibraries.html#bpy.types.BlendDataLibraries.load)である。  

...で、なんとなく`bpy.data`を見る、に戻る
</details>
<p><code>node_groups</code>の中で入力を受け付けてるものなら<code>.inputs</code>にある。 今回でいうと、<code>MToon</code>マテリアルにある<code>NomalmapTexture</code>というtypoを直したいので、 <code>bpy.data.node_groups['MToon_unversioned'].input['NomalmapTexture']</code>を参照する</p>
<h1 id="今行き詰まっている問題">今行き詰まっている問題</h1>
<h2 id="bpypropcollectionに追加できない">bpy<em>prop</em>collectionに追加できない</h2>
<p>これをtypoが直った<code>bpy.data.node_groups['MToon_unversioned'].input['NormalmapTexture']</code>に変えたいのだけど、 どうやら<code>input['NomalmapTexture']</code>の型である<code>bpy_prop_collection</code>がC実装なようで、普段のpythonのようにはいかない。 具体的にいうと</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>bpy.data.node_groups[<span class="st">&#39;MToon_unversioned&#39;</span>].<span class="bu">input</span>[<span class="st">&#39;NormalmapTexture&#39;</span>] <span class="op">=</span> bpy.data.node_groups[<span class="st">&#39;MToon_unversioned&#39;</span>].<span class="bu">input</span>[<span class="st">&#39;NomalmapTexture&#39;</span>]</span></code></pre></div>
</div>
<p>では以下のようにエラーを吐かれてうまくいかない。</p>
<div class="ui segment">
<div class="ui top right attached label">
python-repl
</div>
<pre class="python-repl SourceCode"><code>&gt;&gt;&gt; mtonNode = bpy.data.node_groups[&#39;MToon_unversioned&#39;]
&gt;&gt;&gt; mtoonNode.inputs[&#39;NormalmapTexture&#39;] = mtoonNode.inputs[&#39;NomalmapTexture&#39;]
Traceback (most recent call last):
  File &quot;&lt;console&gt;&quot;, line 1, in &lt;module&gt;
TypeError: bpy_prop_collection[key]: invalid key, must be a string or an int, not str</code></pre>
</div>
<h3 id="試したこと">試したこと</h3>
<p><a href="https://docs.blender.org/api/current/bpy.types.bpy_prop_collection.html?highlight=bpy_prop_collection#bpy.types.bpy_prop_collection"><code>bpy_prop_collection</code></a>のドキュメントと<code>dir(mtoonNode.inputs[0])</code>を読んでみた所、 ドキュメントには書かれていなかったけど<code>move</code>と<code>new</code>があった。</p>
<div class="ui segment">
<div class="ui top right attached label">
python-repl
</div>
<pre class="python-repl SourceCode"><code>&gt;&gt;&gt; dir(mtoonNode.inputs)
[&#39;__bool__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__doc__&#39;
, &#39;__doc__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__iter__&#39;, &#39;__len__&#39;
, &#39;__module__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__slots__&#39;, &#39;bl_rna&#39;
, &#39;clear&#39;, &#39;find&#39;, &#39;foreach_get&#39;, &#39;foreach_set&#39;, &#39;get&#39;
, &#39;items&#39;, &#39;keys&#39;, &#39;move&#39;, &#39;new&#39;, &#39;remove&#39;, &#39;rna_type&#39;, &#39;values&#39;]</code></pre>
</div>
<p>それぞれの挙動を試してみたが、どっちもうまく動かず...というか挙動がわからなかった</p>
<h4 id="new()"><code>new()</code></h4>
<details> <summary>Replの結果ですが長いので折りたたみ</summary>
``` python-repl
>>> mtoonNode.inputs
bpy.data...inputs
>>> mtoonNode
bpy.data.node_groups['MToon_unversioned']
>>> mtoonNode.inputs.new
<bpy_func NodeTreeInputs.new()>
>>> mtoonNode.inputs.new()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: NodeTreeInputs.new(): required parameter "type" not specified
>>> # mtoonNode.inputs['NomalmapTexture']から値を拝借
>>> mtoonNode.inputs.new('RGBA')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: NodeTreeInputs.new(): required parameter "name" not specified
>>> mtoonNode.inputs.new('RGBA', 'NormalmapTexture')
>>> mtoonNode.inputs
bpy.data...inputs
>>> mtoonNode.inputs['NormalmapTexture']
Traceback (most recent call last):
  File "<console>", line 1, in <module>
KeyError: 'bpy_prop_collection[key]: key "NormalmapTexture" not found'
>>> mtoonNode.inputs.items()
[('MainTexture', bpy.data...inputs[0])
, ('MainTextureAlpha', bpy.data...inputs[1])
, ('ShadeTexture', bpy.data...inputs[2])
, ('ReceiveShadow_Texture_alpha', bpy.data...inputs[3])
, ('NomalmapTexture', bpy.data...inputs[4])
, ('ShadingGradeTexture', bpy.data...inputs[5])
, ('Emission_Texture', bpy.data...inputs[6])
, ('SphereAddTexture', bpy.data...inputs[7])
, ('OutlineWidthTexture', bpy.data...inputs[8])
, ('UV_Animation_Mask_Texture', bpy.data...inputs[9])
, ('DiffuseColor', bpy.data...inputs[10])
, ('ShadeColor', bpy.data...inputs[11])
, ('EmissionColor', bpy.data...inputs[12])
, ('OutlineColor', bpy.data...inputs[13])
, ('RimColor', bpy.data...inputs[14])
, ('RimTexture', bpy.data...inputs[15])
, ('RimLightingMix', bpy.data...inputs[16])
, ('RimFresnelPower', bpy.data...inputs[17])
, ('RimLift', bpy.data...inputs[18])
, ('CutoffRate', bpy.data...inputs[19])
, ('BumpScale', bpy.data...inputs[20])
, ('ReceiveShadowRate', bpy.data...inputs[21])
, ('ShadeShift', bpy.data...inputs[22])
, ('ShadeToony', bpy.data...inputs[23])
, ('ShadingGradeRate', bpy.data...inputs[24])
, ('LightColorAttenuation', bpy.data...inputs[25])
, ('IndirectLightIntensity', bpy.data...inputs[26])
, ('OutlineWidth', bpy.data...inputs[27])
, ('OutlineScaleMaxDistance', bpy.data...inputs[28])
, ('OutlineLightingMix', bpy.data...inputs[29])
, ('OutlineWidthMode', bpy.data...inputs[30])
, ('OutlineColorMode', bpy.data...inputs[31])
, ('UV_Scroll_X', bpy.data...inputs[32])
, ('UV_Scroll_Y', bpy.data...inputs[33])
, ('UV_Scroll_Rotation', bpy.data...inputs[34])]
```
</details>
<h4 id="move()">move()</h4>
<details> <summary> Replの結果。長いため折りたたみ。 </summary>
``` python-repl
>>> mtoonNode.inputs.move()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: NodeTreeInputs.move(): required parameter "from_index" not specified
>>> mtoonNode.inputs.move(4)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: NodeTreeInputs.move(): required parameter "to_index" not specified
>>> mtoonNode.inputs.move(4, 35)
>>> mtoonNode.inputs.items()
[('MainTexture', bpy.data...inputs[0]), ('MainTextureAlpha', bpy.data...inputs[1])
, ('ShadeTexture', bpy.data...inputs[2])
, ('ReceiveShadow_Texture_alpha', bpy.data...inputs[3])
, ('NomalmapTexture', bpy.data...inputs[4])
, ('ShadingGradeTexture', bpy.data...inputs[5])
, ('Emission_Texture', bpy.data...inputs[6])
, ('SphereAddTexture', bpy.data...inputs[7])
, ('OutlineWidthTexture', bpy.data...inputs[8])
, ('UV_Animation_Mask_Texture', bpy.data...inputs[9])
, ('DiffuseColor', bpy.data...inputs[10])
, ('ShadeColor', bpy.data...inputs[11])
, ('EmissionColor', bpy.data...inputs[12])
, ('OutlineColor', bpy.data...inputs[13])
, ('RimColor', bpy.data...inputs[14])
, ('RimTexture', bpy.data...inputs[15])
, ('RimLightingMix', bpy.data...inputs[16])
, ('RimFresnelPower', bpy.data...inputs[17])
, ('RimLift', bpy.data...inputs[18])
, ('CutoffRate', bpy.data...inputs[19])
, ('BumpScale', bpy.data...inputs[20])
, ('ReceiveShadowRate', bpy.data...inputs[21])
, ('ShadeShift', bpy.data...inputs[22])
, ('ShadeToony', bpy.data...inputs[23])
, ('ShadingGradeRate', bpy.data...inputs[24])
, ('LightColorAttenuation', bpy.data...inputs[25])
, ('IndirectLightIntensity', bpy.data...inputs[26])
, ('OutlineWidth', bpy.data...inputs[27])
, ('OutlineScaleMaxDistance', bpy.data...inputs[28])
, ('OutlineLightingMix', bpy.data...inputs[29])
, ('OutlineWidthMode', bpy.data...inputs[30])
, ('OutlineColorMode', bpy.data...inputs[31])
, ('UV_Scroll_X', bpy.data...inputs[32])
, ('UV_Scroll_Y', bpy.data...inputs[33])
, ('UV_Scroll_Rotation', bpy.data...inputs[34])]
>>> mtoonNode.inputs.values()
[bpy.data...inputs[0]
, bpy.data...inputs[1], bpy.data...inputs[2]
, bpy.data...inputs[3], bpy.data...inputs[4]
, bpy.data...inputs[5], bpy.data...inputs[6]
, bpy.data...inputs[7], bpy.data...inputs[8]
, bpy.data...inputs[9], bpy.data...inputs[10]
, bpy.data...inputs[11], bpy.data...inputs[12]
, bpy.data...inputs[13], bpy.data...inputs[14]
, bpy.data...inputs[15], bpy.data...inputs[16]
, bpy.data...inputs[17], bpy.data...inputs[18]
, bpy.data...inputs[19], bpy.data...inputs[20]
, bpy.data...inputs[21], bpy.data...inputs[22]
, bpy.data...inputs[23], bpy.data...inputs[24]
, bpy.data...inputs[25], bpy.data...inputs[26]
, bpy.data...inputs[27], bpy.data...inputs[28]
, bpy.data...inputs[29], bpy.data...inputs[30]
, bpy.data...inputs[31], bpy.data...inputs[32]
, bpy.data...inputs[33], bpy.data...inputs[34]]
>>> bpy.data...inputs[1]
  File "<console>", line 1
    bpy.data...inputs[1]
              ^
SyntaxError: invalid syntax
>>>
```
</details>
]]></summary>
</entry>

</feed>
