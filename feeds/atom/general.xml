<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/general.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/general.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2021-09-12T00:00:00Z</updated>
    <entry>
    <title>2021-09-12-akihabara-wado-first-try</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-09-12-akihabara-wado-first-try.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-09-12-akihabara-wado-first-try.html</id>
    <published>2021-09-12T00:00:00Z</published>
    <updated>2021-09-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>秋葉原和堂に行ってきた</h1>
  <div class="ui list">
    <div class="item">Posted on September 12, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on September 12, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>今日は仕事が早めに終わったので、折角だからどこかで御飯食べて帰ろ~と 思った矢先に思い出したのが秋葉原和堂だった。 秋葉原和堂は存在こそ知っていたものの、その雰囲気と</p>
<p>—</p>
<p>意を決して階段を降りる。 そもそも地下なことも把握していなかった。 階段を降りつつ、最初で最後の踊り場で下を見てみると、そこには重い両開きの 扉が一つ。</p>
<p>「ドア」ではなく「扉」がもっともふさわしいと思うような、 「この世俗と奥の空間を区切る」ような雰囲気のある扉だった。</p>
<p>この扉の前で、既に少し雰囲気に圧倒されている。 扉の装飾も綺麗で、この身で触れることも躊躇うような美しさと重さのある 雰囲気を漂わせていた。</p>
<p>まだ引き返すこともできる。 まだ、ここなら取り止めることもできる。</p>
<p>そんな感情すらよぎる程に雰囲気に圧倒されていた。</p>
<p>先程もした気がするのだが、ここでもまた意を決して右側の扉に手をあてて、 力を入れ、ついにこの秋葉原和堂に踏み入れた。</p>
<p>扉を開けた先、すぐに目に飛び込んできたのは豪華な、それでいてもうるさくなくもの静かな 威厳のあるソファと絨毯だった。</p>
<p>誰が座るわけでもなくそこに置いてあったそれらは、恐らく装飾の一つにすぎないのだろうなと思うが ここの世界観・雰囲気を物語るには十分だった。</p>
<p>そこに目を引かれるのもつかの間、左手側に受付が見える。 店員さんが二名。</p>
<p>受付にはAirPayだとか様々なお土産・コラボグッズだとか近代的なものが置いてあるにも かかわらず「大正」の雰囲気に上手いこと溶け込んでいた。</p>
<p>店員さん方の服装も、大正時代にあったものと近しいのかは分からないけれどとても 綺麗で、溶け込んでいた。</p>
<p>~~</p>
<p>店員さんに関して一つ言えば、髪色を染めている方が何人もいらっしゃったにも係らず 服装やお店の雰囲気から少しも逸脱せずに溶け込んでいたのが本当に驚いた。</p>
<p>秋葉原和堂のツイッターに掲げられている「『大正浪漫』と『調合』がコンセプト」、 まさにこれを体現しているなと今特に思う。</p>
<p>~~</p>
<p>事前にTwitterやサイト等で色々と見ているものの「ご利用は始めて」なので 受付の店員さんに頼み方等を教わる。</p>
<p>ベル若しくは備え付けのQRコードから注文が可能らしい。 「大正」と「令和」のコンビネーション…調合…調合ってそういう意味なのか 分からないけど。</p>
<p>受付でカフェを選択し、メニューを受け取ってフロアへ進む。 進むといっても横を向いたらもうその場所なのである。 そちらを向いた瞬間に、一瞬固まってしまった。</p>
<p>今迄散々TwitterやInstagramで拝見させて頂いていた景色とはいえ、 実際に目の当たりにすると何だろうな、雰囲気が凄い違う。 本当に異世界に来たような、ここだけ時の流れが違うような、 非日常感がとても強い光景だった。 タイムトリップしたような気分になった。</p>
<p>なんとこの時はたまたまカフェ側には他のお客様がいらっしゃらなかったので、 自由に席は選び放題だった。とりあえず、壁を背にできるソファに座る。</p>
<p>とても、良い…</p>
<p>座って一息付き、テーブルの上を見渡してみると見付かるのが先程話にあったベルとQRコード。 QRコードは紙に印刷されていたが、ベルは本格的に「ベル」だった。 「ベルの音がなる機械」ではなく「ベル」だった。</p>
<p>そのベルは、正直初めて見たかもしれない…というくらいに想像通りの「ベル」で、中にある長い 部分が結構長かった。そしてここにも素敵な装飾…</p>
<p>メニューを開こうとして、メニューの表面の文様が見えたがこれもとても綺麗に出来ている。 なんだろう、実際には見たことがないが昔の本にありそうな装飾。 金色で縁取られ、花のような蔦のような模様が並んでいる。 綺麗…</p>
<p>綺麗なのはいいんだが、私は頼むものを決める必要がある。ずいぶんと(特に紅茶の種類で)悩んだ末、 料理はナポリタンで紅茶は「この料理にあう紅茶お勧めありますか？」にすることにした。</p>
<p>— 眠い。ので書きたい所先に書く —</p>
<p>清算を終え、和堂の扉に手をかける。 …ここから外の世界へ戻るのには少し時間が必要だった。 でも出なければならない。なぜならここはお店の入口なので…</p>
<p>少し躊躇ってから、覚悟をつけてえいっと開けて外に出た。 そして外に出たのと同時に「令和現代日本」に帰ってきたのを感じた。 よくも悪くも私の本来生きている世界線。</p>
<p>最初はここから「秋葉原和堂」の世界へ入るのに躊躇していたけれど、 最後にはこちらに戻ってくるのを躊躇するようになってしまっていた。 かかっていた曲といい、内装といい、メニューといい、店員さんといい、 普段とはとても異なった世界だったけれど謎に安心感と落ち着きを感じていた。</p>
<p>普段大体この仕事終わりは精神的に相当疲れていて、家に帰ってからもすぐ疲れて寝て しまうことが多かった。 が、今日は秋葉原和堂のおかげで大分精神が楽。居心地の良さ、緊張の解れよう、リラックスさが 半端じゃない。 「また一週間頑張るか~~!!」という気力すら湧いてきた。</p>
<p>普段から通うには少し御高いけれども、一ヶ月に1回とか自分のご褒美として秋葉原和堂に来るのが良いのかも しれない、と感じた。</p>
<p>あとがき</p>
<p>あと眠いながら書いてるので誤字脱字諸々すまん頭がまわらない。 でも当日中にどうしても記録しておきたかった…</p>
]]></summary>
</entry>
<entry>
    <title>2021-09-08-homebrew-dfx</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-09-08-homebrew-dfx.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-09-08-homebrew-dfx.html</id>
    <published>2021-09-08T00:00:00Z</published>
    <updated>2021-09-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>Dfinity SDKのHomebrew formulae(非公式)を書いた</h1>
  <div class="ui list">
    <div class="item">Posted on September  8, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on September  8, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Dfinity SDKは標準のインストーラーが付属するが、 これをHomebrew管理したかったのでラッパーとなるように<a href="https://github.com/Cj-bc/homebrew-dfx">Formula</a>を書いた。</p>
<p>尚これは非公式なものであること・あまりHomebrewのformulaeとしては お行儀良くないことは留意していただきたい。</p>
<h1 id="使い方">使い方</h1>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">brew</span> tap cj-bc/dfx</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ex">brew</span> install dfx</span></code></pre></div>
</div>
<h1 id="技術的メモ">技術的メモ</h1>
<h2 id="環境変数を設定する">環境変数を設定する</h2>
<p><a href="https://docs.brew.sh/Formula-Cookbook#using-environment-variables">https://docs.brew.sh/Formula-Cookbook#using-environment-variables</a></p>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="dt">ENV</span>[<span class="st">&quot;DFX_INSTALL_ROOT&quot;</span>] = prefix</span></code></pre></div>
</div>
<h2 id="ビルド中の一時ディレクトリにファイルを保存する">ビルド中の一時ディレクトリにファイルを保存する</h2>
<p><a href="https://docs.brew.sh/Formula-Cookbook#variables-for-directory-locations">https://docs.brew.sh/Formula-Cookbook#variables-for-directory-locations</a></p>
<p><code>#{hoge}</code> はRubyの記法で、文字列の中に変数を埋め込むことができる。</p>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>system <span class="st">&quot;curl -fsSL https://sdk.dfinity.org/install.sh &gt; </span><span class="ot">#{</span>buildpath<span class="ot">}</span><span class="st">/install.sh&quot;</span></span></code></pre></div>
</div>
<h2 id="system 等で実行したいプログラムの標準入出力を操作する"><code>system</code> 等で実行したいプログラムの標準入出力を操作する</h2>
<p><a href="https://rubydoc.brew.sh/Formula.html">brewのrubydocのFormula.test</a>の部分に書かれているのだが、どうやら <code>open3</code> という ライブラリを使えるらしい。(筆者のRuby歴はHomebrew formulaeを除けば0)</p>
<p>ということでその例を拝借して書き換えてみると:</p>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>     require <span class="st">&quot;open3&quot;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>     <span class="dt">Open3</span>.popen3(<span class="st">&quot;sh&quot;</span>, <span class="st">&quot;-i install.sh&quot;</span>) <span class="kw">do</span> |stdin, stdout, _, th|</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="co"># ここでIO処理をする</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>     <span class="kw">end</span></span></code></pre></div>
</div>
<ol>
<li><p>ユーザーの入力を受け付けてそれをプログラムに渡す</p>
<p>今回の公式のインストールスクリプトは、ライセンスへの同意をキー入力で答える必要があります。 これのためには、homebrew側で受け取ったキー入力をスクリプトに渡してあげる必要があります。</p>
<p><code>stdin</code> を先程の <code>Open3.popen3</code> で設定した変数だとすると、以下のようにすることで 入力のバイパスが出来ました。</p>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>stdin &lt;&lt; <span class="dt">$stdin</span>.gets</span></code></pre></div>
</div>
<p>Rubyにおいて、 <code>$変数名</code> は「グローバル変数」を指します。 なので、グローバルにhomebrewが扱っている標準入力を <code>$stdin</code> として参照しています。</p></li>
<li><p>スレッドを待機させる必要がありそう</p>
<p>単純に <code>Open3.popen3</code> を使った場合、その処理を行っているスレッドは別スレッドとして非同期的に処理がされるようです。 なので、このままだとそちらの処理が終わる前にプログラムが進んでしまいます。</p>
<p>他の言語での <code>await</code> のような機能として、 <code>&lt;thread&gt;.join</code> を使います。</p>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>     <span class="dt">Open3</span>.popen3(<span class="st">&quot;sh&quot;</span>, <span class="st">&quot;-i&quot;</span>, <span class="st">&quot;</span><span class="ot">#{</span>buildpath<span class="ot">}</span><span class="st">/install.sh&quot;</span>)  <span class="kw">do</span> |stdin, stdout, stderr, t|</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="co"># やりたい処理</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>t.join</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>     <span class="kw">end</span>  </span></code></pre></div>
</div>
<p>とすることで、 <code>sh -i install.sh</code> が終了するまで待つことができます。</p></li>
</ol>
<h2 id="文字列にある文字列が含まれるかを確認する">文字列にある文字列が含まれるかを確認する</h2>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="dt">String</span><span class="co">#match?(/&lt;Regex&gt;/)</span></span></code></pre></div>
</div>
<p>を使うことで、正規表現 <code>&lt;Regex&gt;</code> がマッチしたなら <code>true</code>, しなかったら <code>false</code> を返してくれる。</p>
]]></summary>
</entry>
<entry>
    <title>2021-09-08-dfinity-sdk-installer-unofficial-explained-memo</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-09-08-dfinity-sdk-installer-unofficial-explained-memo.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-09-08-dfinity-sdk-installer-unofficial-explained-memo.html</id>
    <published>2021-09-08T00:00:00Z</published>
    <updated>2021-09-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>Dfinity SDKのインストールスクリプトを読んでみたメモ</h1>
  <div class="ui list">
    <div class="item">Posted on September  8, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on September  8, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Internet Computerを使うためのSDKはDfinityから<a href="https://sdk.dfinity.org/install.sh">インストールスクリプト</a>が公開されていますが、 <strong>インターネットに転がっているスクリプトを何も考えずに実行してはいけない</strong> のでとりあえず読んでみたメモです。</p>
<p>一応書いておくと、別にDfinityが何か悪事をしているとかそういうことではなく、 単純にネットに置いてあるものは自己責任で使用するものなので確認しているだけです。</p>
<p>又、コード自体は転記するとTerm of Useに引っかかるかもわからなかったので載せていません。 (日本の法律上は引用なら大丈夫だと思うけどそもそも日本の会社ではないので…)</p>
<h1 id="全体の所感">全体の所感</h1>
<p>特に変な部分はなく安全そうだなと個人的には判断しました。 あとスクリプトの書き方的な意味で「こういう方法があるのか…」となっています。</p>
<p>流石きちんと書かれている…(尚rustupのスクリプトを借りてきていることが明記されています)</p>
<p><code>main</code> 関数にメインの処理を入れ、あとはユーティリティ関数が定義されている作りになっています。 コメントのつけ方的に元は別ファイルで管理してそう。</p>
<h1 id="プログラムの流れ">プログラムの流れ</h1>
<p>main関数内部での流れについて</p>
<ol>
<li>ANSIエスケープが可能かどうかの判定</li>
<li>フラグの読み込み</li>
<li>必要なコマンドの有無を確認</li>
<li>LICENSEの同意確認
<ol>
<li>同意しないならば終了</li>
</ol></li>
<li>アーキテクチャの確認
<ol>
<li>非対応アーキテクチャなら終了</li>
</ol></li>
<li>アンインストールスクリプトのインストール</li>
<li>SDKのダウンロード、展開、権限設定</li>
<li>インストール(mv)</li>
</ol>
<h1 id="インストール先ディレクトリの選定">インストール先ディレクトリの選定</h1>
<p>インストール先は以下の順番で選ばれます。</p>
<ol>
<li><code>DFX_INSTALL_ROOT</code> の値</li>
<li><code>/usr/local/bin</code></li>
<li>(macの場合) <code>/usr/local/bin</code></li>
<li><code>/usr/bin</code></li>
<li><code>$HOME/bin</code></li>
</ol>
<p>3番、普通2番と同じなのでちょっとよくわかんないですね…</p>
<h1 id="カスタマイズに使える環境変数">カスタマイズに使える環境変数</h1>
<p>SDK installerの中では、いくつかの環境変数が使われています。</p>
<table>
<thead>
<tr class="header">
<th>変数名</th>
<th>利用方法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>DFX_VERSION</code></td>
<td>DFX のバージョンを指定する</td>
</tr>
<tr class="even">
<td><code>DFX_INSTALL_ROOT</code></td>
<td>インストール先のディレクトリ</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>ちなみにアンインストーラーは <code>$HOME/.cache/dfinity/uninstall.sh</code> で固定らしいです。 (ハードコードされているのでスクリプトを弄らない限り変えることができない。)</p>
]]></summary>
</entry>
<entry>
    <title>2021-09-02-emacs-projectile-replace</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-09-02-emacs-projectile-replace.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-09-02-emacs-projectile-replace.html</id>
    <published>2021-09-02T00:00:00Z</published>
    <updated>2021-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>ProjectileのReplaceが便利だった</h1>
  <div class="ui list">
    <div class="item">Posted on September  2, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on September  2, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Emacsのパッケージの一つである <code>projectile</code> に、 help:projectile-replace というコマンドがある。</p>
<p>Projectileの管理下のファイル全てに対して置換できるし、 一つ一つ確認して置換するかどうかを選べるのでとても便利。</p>
]]></summary>
</entry>
<entry>
    <title>2021-08-26-haskell-dot-and-infix-fmap</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-08-26-haskell-dot-and-infix-fmap.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-08-26-haskell-dot-and-infix-fmap.html</id>
    <published>2021-08-26T00:00:00Z</published>
    <updated>2021-08-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>. と <$> の順序のメモ</h1>
  <div class="ui list">
    <div class="item">Posted on August 26, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 26, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Haskellにおいてしょっちゅうお世話になる演算子二人組を連れてきたよ!</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">infixr</span> <span class="dv">9</span> <span class="op">.</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="kw">infixl</span> <span class="dv">4</span> <span class="op">&lt;$&gt;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="ot">(&lt;$&gt;) ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div>
</div>
<p>…でもたまに分からなくなるよ。</p>
<h1 id="考えたいケース">考えたいケース</h1>
<p>以下はまだわかる</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>(<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]</span></code></pre></div>
</div>
<p>でも以下のように書くと、 <strong>"Why NOT?"</strong> とか言って書き換えを提案されるよ!</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">&lt;$&gt;</span> (<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="co">-- why not</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]</span></code></pre></div>
</div>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>Found: print &lt;$&gt; (++ " ") &lt;$&gt; getLine Why not: print . (++ " ") &lt;$&gt; getLine</p>
</blockquote>
</div>
<p>で、素直にこれで書き換えられるのも分かるのだけど きちんと論理的に考えてみるのです。</p>
<h1 id="論理的に考えるあるよ">論理的に考えるあるよ</h1>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]</span></code></pre></div>
</div>
<p>解釈を考えるあるよ。基本的に左から読まれるわけだけど(ほんとか？)、 今回は中置演算子で繋がれているので <code>infix</code> の値を確認するよ。</p>
<p><code>infix</code> は、 <em>値が大きければ大きい程優先される</em> 。 冒頭でも書いたけど、 <code class="sourceCode haskell">(<span class="op">.</span>)</code> は <code>infix 9</code> で <code class="sourceCode haskell">(<span class="op">&lt;$&gt;</span>)</code> は <code>infix 4</code> 。</p>
<p>なので、先に <code>.</code> での束縛が行われるよ。つまり:</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>((<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>)) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]</span></code></pre></div>
</div>
<p>こうだね。 今度はそれぞれの型を考えてみるよ。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>)<span class="ot"> ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>(<span class="op">+</span> <span class="dv">1</span>)<span class="ot"> ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span><span class="ot"> ::</span> <span class="dt">Num</span> a&#39; <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a&#39;) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a&#39;</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>)<span class="ot"> ::</span> <span class="dt">Num</span> a&#39; <span class="ot">=&gt;</span> a&#39; <span class="ot">-&gt;</span> a&#39;</span></code></pre></div>
</div>
<p>これを <code>&lt;$&gt;</code> と一緒にしてみると</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>)<span class="ot"> ::</span> <span class="dt">Num</span> a&#39; <span class="ot">=&gt;</span> a&#39; <span class="ot">-&gt;</span> a&#39;</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="ot">(&lt;$&gt;) ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span><span class="ot"> ::</span> (<span class="dt">Num</span> a&#39;, <span class="dt">Functor</span> f) <span class="ot">=&gt;</span> f a&#39; <span class="ot">-&gt;</span> f a&#39;</span></code></pre></div>
</div>
<p>なるほど。ここで晴れて <code>[1..5]</code> を適用できる。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]<span class="ot"> ::</span> <span class="dt">Num</span> a&#39; <span class="ot">=&gt;</span> [a&#39;]</span></code></pre></div>
</div>
<p>わーい!</p>
<h1 id="まとめ(?)">まとめ(?)</h1>
<p>型パズル、単純に楽しかった!</p>
]]></summary>
</entry>
<entry>
    <title>2021-08-24-xmonad-how-to-access-window-properties-from-layout</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-08-24-xmonad-how-to-access-window-properties-from-layout.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-08-24-xmonad-how-to-access-window-properties-from-layout.html</id>
    <published>2021-08-24T00:00:00Z</published>
    <updated>2021-08-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>XMonadのLayoutからWindowのプロパティにアクセスする</h1>
  <div class="ui list">
    <div class="item">Posted on August 24, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 24, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<h1 id="Tl;Dr">Tl;Dr</h1>
<ul>
<li><code>LayoutClass</code> のインスタンスの定義で、 <code>a</code> を <code>Window</code> に固定する
<ul>
<li>どこかに影響あるかもしれない、未確認</li>
</ul></li>
<li><code>doLayout</code> の中で <code>Query</code> を使ってあげる</li>
</ul>
<h1 id="モチベーション">モチベーション</h1>
<p>ダッシュボードとして機能するworkspaceを作成したい。 なので所定の位置に各アプリケーションが配置されてほしいが、 何もしない状態だと各アプリケーションのタイトル(<code>WM_NAME</code>)等には アクセスできず判断できない。</p>
<p>なんとかならないものか</p>
<h1 id="ManageHookを参考にする">ManageHookを参考にする</h1>
<p>managehookでは、ウィンドウのプロパティにアクセスして制御を行っている。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>title <span class="st">&quot;This is example emacs&quot;</span> <span class="op">--&gt;</span> doShift <span class="st">&quot;Editor&quot;</span></span></code></pre></div>
</div>
<p>など。 ここにヒントを得れば何らかの方法がありそうだなと検討が付く</p>
<h1 id="Query を探る"><code>Query</code> を探る</h1>
<p>managehookで使われているのは <code>Query</code> という型。これは <code>X</code> を基底 モナドに持つ <code>ReaderT</code> で、 <code>runQuery</code> で実行することで <code>X a</code> を 戻り値として取ることができる。</p>
<p><a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-Core.html#t:Query"><code>Query</code> と <code>runQuery</code> の実装</a>は以下</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="~Query~ と ~runQuery~ の実装"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="~Query~ と ~runQuery~ の実装-1"><a href="#~Query~ と ~runQuery~ の実装-1" aria-hidden="true"></a>   <span class="kw">newtype</span> <span class="dt">Query</span> a <span class="ot">=</span> <span class="dt">Query</span> (<span class="dt">ReaderT</span> <span class="dt">Window</span> <span class="dt">X</span> a)</span>
<span id="~Query~ と ~runQuery~ の実装-2"><a href="#~Query~ と ~runQuery~ の実装-2" aria-hidden="true"></a><span class="kw">deriving</span> (<span class="dt">Functor</span>, <span class="dt">Applicative</span>, <span class="dt">Monad</span>, <span class="dt">MonadReader</span> <span class="dt">Window</span>, <span class="dt">MonadIO</span>)</span>
<span id="~Query~ と ~runQuery~ の実装-3"><a href="#~Query~ と ~runQuery~ の実装-3" aria-hidden="true"></a></span>
<span id="~Query~ と ~runQuery~ の実装-4"><a href="#~Query~ と ~runQuery~ の実装-4" aria-hidden="true"></a><span class="ot">   runQuery ::</span> <span class="dt">Query</span> a <span class="ot">-&gt;</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> a</span>
<span id="~Query~ と ~runQuery~ の実装-5"><a href="#~Query~ と ~runQuery~ の実装-5" aria-hidden="true"></a>   runQuery (<span class="dt">Query</span> m) w <span class="ot">=</span> runReaderT m w</span></code></pre></div>
</div>
<p>さて…どうやらこれで答えなのでは？ <code>X</code> モナドのアクションなので、あとはこれを <code>doLayout</code> 内部から呼んであげれば良さそう。</p>
<p><strong>…が、人生そう甘はないのである</strong></p>
<h1 id="Query では上手くいかない!？"><code>Query</code> では上手くいかない!？</h1>
<p>改めて <code>runQuery</code> の型を見てみよう。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">runQuery ::</span> <span class="dt">Query</span> a <span class="ot">-&gt;</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> a</span></code></pre></div>
</div>
<p>第二引数に取るのは <code>Window</code> である。 <a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-Core.html#v:doLayout">~doLayout~の型</a>も見てみよう</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">doLayout ::</span> layout a <span class="op">-</span> <span class="dt">Rectangle</span> <span class="ot">-&gt;</span> <span class="dt">Stack</span> a <span class="ot">-&gt;</span> <span class="dt">X</span> ([(a, <span class="dt">Rectangle</span>)], <span class="dt">Maybe</span> (layout a))</span></code></pre></div>
</div>
<p>このうち、ウィンドウの情報が格納されているのは <code>Stack a</code> の内部である。(<a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-Core.html#v:doLayout">コメント</a>より) そして <a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-StackSet.html#t:Stack"><code>Stack a</code> の定義</a> を見てみると</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>   <span class="kw">data</span> <span class="dt">Stack</span> a <span class="ot">=</span> <span class="dt">Stack</span> {<span class="ot"> focus  ::</span> <span class="op">!</span>a        <span class="co">-- focused thing in this set</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>   ,<span class="ot"> up     ::</span> [a]       <span class="co">-- clowns to the left</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>   ,<span class="ot"> down   ::</span> [a] }     <span class="co">-- jokers to the right</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>, <span class="dt">Eq</span>)</span></code></pre></div>
</div>
<p>となっており、 <em>保存されている値の型は <code>a</code> で定義されている</em> のだ。 これが何故問題になるか、というと <strong><code>runQuery</code> に <code>Stack a</code> の中の <code>Window</code> を食わせたいが、 型が定まっていないため型エラーを起こす</strong> ということだ。</p>
<p>ドキュメント的に、 <code>doLayout</code> には実際には <code>Stack Window</code> が渡されるであろうことは明白なのだが、 プログラムからするとそんな実行時の話は知らない。 というか型としてはエラーを起こすのが正解だと思う。</p>
<p>でも確実に <code>Window</code> がくるはずだし、困った…</p>
<h1 id="LayoutClass &lt;Layout&gt; Window にしちゃえ!!"><code>LayoutClass &lt;Layout&gt; Window</code> にしちゃえ!!</h1>
<p>えいやっ!というやっつけ感が凄いが、 <code>LayoutClass</code> のインスタンスを作る際に <code>a</code> の型を指定してしまえば 型エラーは起こらなくなる。 <code>doLayout</code> は <code>LayoutClass</code> の型クラス関数であり、 <code>doLayout</code> の型定義の中の <code>a</code> は <code>LayoutClass &lt;Layout&gt; a</code> によって束縛されているからだ。</p>
<p>これによって、 <code>Stack a</code> の型が固定される。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">LayoutClass</span> <span class="dt">MyLayout</span> <span class="dt">Window</span> <span class="kw">where</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ot">  doLayout ::</span> <span class="dt">MyLayout</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">Rectangle</span> <span class="ot">-&gt;</span> <span class="dt">Stack</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ([(<span class="dt">Window</span>, <span class="dt">Rectangle</span>)], <span class="dt">Maybe</span> (<span class="dt">MyLayout</span> <span class="dt">Window</span>))</span></code></pre></div>
</div>
<p>そうすれば、後は <code>Stack</code> から取り出した <code>Window</code> を <code>runQuery</code> にかけてあげれば良いだけになる。</p>
<h1 id="おまけ: 具体的な書き方">おまけ: 具体的な書き方</h1>
<p>ついでなので、ケース毎に使い方(書き方)を書いてみる。</p>
<h2 id="タイトルによって選択">タイトルによって選択</h2>
<p><a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-ManageHook.html#v:title"><code>title</code></a>を使います。 <a href="https://github.com/Cj-bc/dotfiles/blob/master/dotfiles/xmonad/src/XMonad/Layout/Info.hs#L25-L31">私のxmonadに記載されているもの</a>と同じです。</p>
<p>最初に <code>[Window]</code> から 適切な <code>Window</code> だけ取り出すために <code>[X (Maybe Window)]</code> にしてあげて、 <code>X</code> を実行するために <code>sequence</code> (<code>X [Maybe Window]</code>)、 <code>find</code> で <code>Just</code> なもの(=求めていたWindow)をピックアップしてあげて (<code>X [Maybe (Maybe Window)]</code>)、二重になった <code>Maybe</code> を <code>join</code> で平たくしてあげています。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">     windowTitleIs ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Window</span>] <span class="ot">-&gt;</span> <span class="dt">X</span> (<span class="dt">Maybe</span> <span class="dt">Window</span>)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>     windowTitleIs name ws <span class="ot">=</span> <span class="fu">fmap</span> (join <span class="op">.</span> find isJust) <span class="op">.</span> <span class="fu">sequence</span> <span class="op">.</span> <span class="fu">flip</span> <span class="fu">fmap</span> ws <span class="op">$</span> \w <span class="ot">-&gt;</span> <span class="fu">flip</span> runQuery w <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>n <span class="ot">&lt;-</span> w<span class="ot">`hasTitle`</span>name</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="kw">if</span> n <span class="kw">then</span> <span class="fu">return</span> (<span class="dt">Just</span> w) <span class="kw">else</span> <span class="fu">return</span> <span class="dt">Nothing</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a><span class="ot">     hasTitle ::</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Query</span> <span class="dt">Bool</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>     hasTitle w name <span class="ot">=</span> (<span class="op">==</span> name) <span class="op">&lt;$&gt;</span> title</span></code></pre></div>
</div>
<p>ついで(？)なので思考メモを残しておきます。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="思考メモ"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="思考メモ-1"><a href="#思考メモ-1" aria-hidden="true"></a><span class="ot">allWindows ::</span> [<span class="dt">Window</span>]</span>
<span id="思考メモ-2"><a href="#思考メモ-2" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="思考メモ-3"><a href="#思考メモ-3" aria-hidden="true"></a><span class="fu">flip</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="思考メモ-4"><a href="#思考メモ-4" aria-hidden="true"></a><span class="fu">flip</span><span class="ot"> fmap ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> f a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f b</span>
<span id="思考メモ-5"><a href="#思考メモ-5" aria-hidden="true"></a><span class="fu">flip</span> <span class="fu">fmap</span><span class="ot"> allWindows ::</span> (<span class="dt">Window</span> <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [b]</span>
<span id="思考メモ-6"><a href="#思考メモ-6" aria-hidden="true"></a></span>
<span id="思考メモ-7"><a href="#思考メモ-7" aria-hidden="true"></a></span>
<span id="思考メモ-8"><a href="#思考メモ-8" aria-hidden="true"></a><span class="fu">flip</span> <span class="fu">fmap</span> allWindows <span class="op">&lt;$&gt;</span><span class="ot"> ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> f ([<span class="dt">Window</span>] <span class="ot">-&gt;</span> (<span class="dt">Window</span> <span class="ot">-&gt;</span> b)) <span class="ot">-&gt;</span> f [b]</span>
<span id="思考メモ-9"><a href="#思考メモ-9" aria-hidden="true"></a></span>
<span id="思考メモ-10"><a href="#思考メモ-10" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> (<span class="dt">Maybe</span> <span class="dt">Window</span>)</span>
<span id="思考メモ-11"><a href="#思考メモ-11" aria-hidden="true"></a></span>
<span id="思考メモ-12"><a href="#思考メモ-12" aria-hidden="true"></a><span class="fu">flip</span> <span class="fu">fmap</span> allWindows<span class="ot"> f ::</span> [<span class="dt">X</span> (<span class="dt">Maybe</span> <span class="dt">Window</span>)]</span>
<span id="思考メモ-13"><a href="#思考メモ-13" aria-hidden="true"></a></span>
<span id="思考メモ-14"><a href="#思考メモ-14" aria-hidden="true"></a><span class="fu">sequence</span><span class="ot"> ::</span> (<span class="dt">Traversable</span> t, <span class="dt">Monad</span> m) <span class="ot">=&gt;</span> t (m a) <span class="ot">-&gt;</span> m (t a)</span>
<span id="思考メモ-15"><a href="#思考メモ-15" aria-hidden="true"></a></span>
<span id="思考メモ-16"><a href="#思考メモ-16" aria-hidden="true"></a><span class="fu">sequence</span> <span class="op">$</span> <span class="fu">flip</span> <span class="fu">fmap</span> allwindows<span class="ot"> f ::</span> <span class="dt">X</span> [<span class="dt">Maybe</span> <span class="dt">Window</span>]</span>
<span id="思考メモ-17"><a href="#思考メモ-17" aria-hidden="true"></a></span>
<span id="思考メモ-18"><a href="#思考メモ-18" aria-hidden="true"></a><span class="ot">find ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="思考メモ-19"><a href="#思考メモ-19" aria-hidden="true"></a><span class="ot">(&lt;$&gt;) ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="思考メモ-20"><a href="#思考メモ-20" aria-hidden="true"></a></span>
<span id="思考メモ-21"><a href="#思考メモ-21" aria-hidden="true"></a>find<span class="ot"> isJust ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="思考メモ-22"><a href="#思考メモ-22" aria-hidden="true"></a>find isJust <span class="op">&lt;$&gt;</span><span class="ot"> ::</span> <span class="dt">Foldable</span> t, <span class="dt">Functor</span> f <span class="ot">=&gt;</span> f (t a) <span class="ot">-&gt;</span> f (<span class="dt">Maybe</span> a)</span>
<span id="思考メモ-23"><a href="#思考メモ-23" aria-hidden="true"></a>find jsJust <span class="op">&lt;$&gt;</span> <span class="fu">sequence</span> <span class="op">$</span> <span class="fu">flip</span> <span class="fu">fmap</span> allwindows<span class="ot"> f ::</span> <span class="dt">X</span> (<span class="dt">Maybe</span> (<span class="dt">Maybe</span> a))</span>
<span id="思考メモ-24"><a href="#思考メモ-24" aria-hidden="true"></a></span>
<span id="思考メモ-25"><a href="#思考メモ-25" aria-hidden="true"></a><span class="ot">join ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> m (m a) <span class="ot">-&gt;</span> m a</span>
<span id="思考メモ-26"><a href="#思考メモ-26" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> join ::</span> (<span class="dt">Monad</span> m, <span class="dt">Functor</span> f) <span class="ot">=&gt;</span> f (m (m a)) <span class="ot">-&gt;</span> f (m a)</span>
<span id="思考メモ-27"><a href="#思考メモ-27" aria-hidden="true"></a></span>
<span id="思考メモ-28"><a href="#思考メモ-28" aria-hidden="true"></a><span class="ot">($) ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b</span>
<span id="思考メモ-29"><a href="#思考メモ-29" aria-hidden="true"></a><span class="fu">fmap</span> join <span class="op">$</span><span class="ot"> ::</span> (<span class="dt">Monad</span> m, <span class="dt">Functor</span> f) <span class="ot">=&gt;</span> f (m (m a)) <span class="ot">-&gt;</span> f (m a)</span>
<span id="思考メモ-30"><a href="#思考メモ-30" aria-hidden="true"></a></span>
<span id="思考メモ-31"><a href="#思考メモ-31" aria-hidden="true"></a><span class="fu">fmap</span> join <span class="op">$</span> find jsJust <span class="op">&lt;$&gt;</span> <span class="fu">sequence</span> <span class="op">$</span> <span class="fu">flip</span> <span class="fu">fmap</span> allwindows<span class="ot"> f ::</span> <span class="dt">X</span> (<span class="dt">Maybe</span> a)</span></code></pre></div>
</div>
]]></summary>
</entry>
<entry>
    <title>2021-08-19-github-use-github-actions-to-auto-release-binaries</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-08-19-github-use-github-actions-to-auto-release-binaries.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-08-19-github-use-github-actions-to-auto-release-binaries.html</id>
    <published>2021-08-19T00:00:00Z</published>
    <updated>2021-08-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>Github actionsでStackを使用した実行ファイルのバイナリを自動生成</h1>
  <div class="ui list">
    <div class="item">Posted on August 19, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 20, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>ghq:Cj-bc/oschark を作っている際、installationを書く上で 「どうせならバイナリ用意しておくか」と思ったので作業したメモ。</p>
<h1 id="全体像">全体像</h1>
<p>最終的にやりたいこと: Github actionsを用いてバイナリを配付する</p>
<ol>
<li>手動で実行できる「ビルドする」 Actionを作る</li>
<li>ビルドしたものをリリースに載せられるようにする</li>
<li>リリース時をトリガーとしてGithub Actionを稼動させる</li>
<li>複数プラットフォームそれぞれ用のバイナリを用意する</li>
</ol>
<h1 id="1. 手動で実行できる「ビルドする」ACtionを作る">1. 手動で実行できる「ビルドする」ACtionを作る</h1>
<p>Haskell(stack)の環境をセットアップし、ビルドする。</p>
<p>stackの環境は、元々は公式にあったが現在は廃止され、 <a href="https://github.com/haskell/actions/tree/main/setup">haskell/actions</a> に移動されて管理されている。</p>
<p>デフォルトではcabalの環境あセットアップされる。</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> haskell/actions/setup@v1</span></span></code></pre></div>
</div>
<p>Stackを使いたい場合、 <code>enable-stack</code> を有効化する。</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="at">   </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="at">     </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> haskell/actions/setup@v1</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">enable-stack</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span></code></pre></div>
</div>
<h1 id="2. ビルドしたものをリリースに載せられるようにする">2. ビルドしたものをリリースに載せられるようにする</h1>
<p>ビルドしても、このままだと海のもずくに消えてしまいます。 なので、これをリリースに付属させる処理をします。</p>
<p>公式の <a href="https://github.com/actions/create-release">actions/create-release</a>が昔はあったようですが、 2021年8月19日現在ではアーカイブされてしまっているので、 そこで提案されている他のアクションを使うことにしました。</p>
<p>今回は、仕様や書き方等を軽く見た結果 <a href="https://github.com/softprops/action-gh-release">softprops/action-gh-release</a> を 使ってみることにしました。</p>
<p>主な理由は</p>
<ul>
<li>設定が一番シンプルそう</li>
<li>複数のファイルをアタッチできるから</li>
</ul>
<p>の2点です(特に1点目でかなり差がついた)</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="at">   </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="at">     </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> softprops/action-gh-release</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">prerelease</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="at">  </span><span class="fu">files</span><span class="kw">:</span><span class="at"> |	     oschark</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="at">    LICENSE</span></span></code></pre></div>
</div>
<p>これだけで、 <code>oschark</code> と <code>LICENSE</code> という名前のファイルが リリースに含まれるようになります。</p>
<p>ただ、 <code>stack build</code> しただけの状態だとファイルのパスが分からないため <code>find</code> で探して移動しておいた方が良いです。</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="at">   </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="at">     </span><span class="kw">-</span><span class="at"> ...</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="at">     </span><span class="kw">-</span><span class="at"> </span><span class="fu">run</span><span class="kw">:</span><span class="at"> find .stack-work/install -name oschark -exec mv {} . \;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="at">     </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> softprops/action-gh-release</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="co">...</span></span></code></pre></div>
</div>
<h1 id="3. リリース時をトリガーとしてGithub Actionを稼動させる">3. リリース時をトリガーとしてGithub Actionを稼動させる</h1>
<p>これは一般的な方法をそのままで使います。 但し、cabalのバージョニング(厳密には<a href="https://pvp.haskell.org/?rdfrom=https%3A%2F%2Fwiki.haskell.org%2Findex.php%3Ftitle%3DPackage_versioning_policy%26redirect%3Dno">Haskell Package Versioning Policy</a>) に従うタグの形式に変えてあります。</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="at">   </span><span class="fu">on</span><span class="kw">:</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="at">     </span><span class="fu">push</span><span class="kw">:</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a><span class="fu">tags</span><span class="kw">:</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;*.*.*.*&quot;</span></span></code></pre></div>
</div>
<h1 id="4. 複数プラットフォームそれぞれ用のバイナリを用意する">4. 複数プラットフォームそれぞれ用のバイナリを用意する</h1>
<p>せっかくなのでLinux/macOS/Windowsそれぞれのバイナリを提供してみることに します。</p>
<p>このためには <a href="https://docs.github.com/ja/actions/reference/workflow-syntax-for-github-actions#">matrix</a>を使います(リンクは直貼りできなかった)</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="at">   </span><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="at">     </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="at">    </span><span class="fu">foo</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="at">bar</span><span class="kw">,</span><span class="at"> baz</span><span class="kw">,</span><span class="at"> fizz</span><span class="kw">]</span></span></code></pre></div>
</div>
<p>matrixを含むstrategyは、各jobの直下に書かれます(<code>jobs.&lt;job_id&gt;.strategy.matrix</code>)</p>
<p>matrixは、値にリストを取る辞書型の値を取ります。 辞書のキーがmatrix内でのプロパティになり値のリストがそれぞれ挿入されることになります。 ここで定義したプロパティは <code>${{matrix.&lt;key&gt;}}</code> で参照することができます。 上記の例の場合は <code>${{matrix.foo}}</code> となります。</p>
<p>これを</p>
<h2 id="artifactを使って各バイナリを保存する">artifactを使って各バイナリを保存する</h2>
]]></summary>
</entry>
<entry>
    <title>2021-08-14-gtk-learning</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-08-14-gtk-learning.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-08-14-gtk-learning.html</id>
    <published>2021-08-14T00:00:00Z</published>
    <updated>2021-08-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>gtkを触りはじめてみたメモ</h1>
  <div class="ui list">
    <div class="item">Posted on August 14, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 14, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>一応 <a href="https://hackage.haskell.org/package/gi-gtk-4.0.4">haskellのgi-gtkバインディング</a>を使えるようになることが最終目標だが、 まずはCでのサンプルを実装してみている</p>
<h1 id="基本的な仕組み">基本的な仕組み</h1>
<ul>
<li>基本的には <code>GtkWidget</code> を <code>Container</code> に入れてゆく</li>
<li><code>signal</code> にたいしてコールバック関数を与えてやる。</li>
<li>トップレベルは <code>GtkApplication</code> で、その中に <code>GtkWindow</code> を入れる。</li>
<li><code>gpointer</code> は <code>*void</code> と同値。なので何でも入れられる</li>
</ul>
]]></summary>
</entry>
<entry>
    <title>2021-08-13-c-clangd-pass-appropriate-build-flags-clangd-langserver</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-08-13-c-clangd-pass-appropriate-build-flags-clangd-langserver.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-08-13-c-clangd-pass-appropriate-build-flags-clangd-langserver.html</id>
    <published>2021-08-13T00:00:00Z</published>
    <updated>2021-08-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>LSPサーバーとして使うclangdにビルドフラグを設定する</h1>
  <div class="ui list">
    <div class="item">Posted on August 13, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 13, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>公式ページ: <a href="https://clangd.llvm.org/installation">https://clangd.llvm.org/installation</a></p>
<div class="tldr">
<ul>
<li>同じディレクトリに <code>compile_flags.txt</code> ファイルを作れ</li>
<li>一行に一フラグずつ書け</li>
</ul>
</div>
<p>C言語(とC++言語)のLSPサーバーに、LLVMプロジェクトの<a href="https://clangd.llvm.org/">clangd</a>があります。 何も設定しないで使おうとすると</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>$ <span class="fu">clang</span> foo.cc</span></code></pre></div>
</div>
<p>とビルドされるものと解釈して動きます。 これだと大体のプログラムはフラグが足りないため、 フラグを設定する方法が2通り用意されています。</p>
<ul>
<li><code>compile_commands.json</code></li>
<li><code>compile_flags.txt</code></li>
</ul>
<h1 id="compile_commands.json: ビルドツールを使用する場合"><code>compile_commands.json</code>: ビルドツールを使用する場合</h1>
<p>プロジェクトの中にある各ファイルのコンパイルコマンドを定義できます。 これは基本的にはツールによって生成されます。</p>
<p><code>clangd</code> は、今編集しているファイルの親ディレクトリに このファイルを探しにいきます。</p>
<p>下に2つの例を上げていますが、これ以外のツールでも生成出来るものがあるそうです。</p>
<p>参考: <a href="https://clang.llvm.org/docs/JSONCompilationDatabase.html">compile<sub>commands</sub>.jsonの仕様</a></p>
<h2 id="CMakeを使っている場合">CMakeを使っている場合</h2>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="fu">cmake</span> -DCMAKE_EXPORT_COMPILE_COMMANDS=1</span></code></pre></div>
</div>
<p>とすることで、ビルドディレクトリに <code>compile_commands.json</code> を 出力します。 プロジェクトルートとは異なる場合であった場合は手動で (シムリンクorコピーすることで)移動する必要があります。</p>
<h2 id="他のビルドツールを使っている場合">他のビルドツールを使っている場合</h2>
<p><a href="https://github.com/rizsotto/Bear">bear</a>を使用することで様々なビルドツールでも使うことができるようです。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb3" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ex">bear</span> -- &lt;&lt;使用しているビルドコマンド&gt;&gt;</span></code></pre></div>
</div>
<p>とすることで、生成できます。 仕組み的には、ビルドコマンドで普通にビルドし、そのログから コンパイラの呼び出しを特定&amp; <code>compile_commands.json</code> を作るようです。</p>
<p>(READMEを雑に読んだ程度の知識)</p>
<h1 id="compile_flags.txt: 手動ビルド、若しくはフラグが少ない場合"><code>compile_flags.txt</code>: 手動ビルド、若しくはフラグが少ない場合</h1>
<p>手動でのビルドをしている場合や、フラグが少ない場合は <code>compile_flags.txt</code> を使う方が楽でしょう。</p>
<p>但し <strong>同じディレクトリにある全てのソースに対して同じフラグが設定される</strong> ので注意が必要です。</p>
<p>このファイルはシンプルな構文で、一行に一つフラグを記入するだけです。</p>
<p>例えばgtk4を用いて以下のようにコンパイルしていた場合:</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb4" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="fu">clang</span> <span class="va">$(</span><span class="ex">pkg-config</span> --cflags gtk4<span class="va">)</span> -o somefile somefile.c <span class="va">$(</span><span class="ex">pkg-config</span> --libs gtk4<span class="va">)</span></span></code></pre></div>
</div>
<p>以下のようにしてあげれば良いでしょう。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb5" data-org-language="sh" data-resuts="outputs raw"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ex">pkg-config</span> --cflags --libs gtk4 <span class="kw">|</span> <span class="fu">tr</span> <span class="st">&#39; &#39;</span> <span class="st">&#39;\n&#39;</span></span></code></pre></div>
</div>
<table>
<tbody>
<tr class="odd">
<td>-I/usr/include/gtk-4.0</td>
</tr>
<tr class="even">
<td>-I/usr/include/pango-1.0</td>
</tr>
<tr class="odd">
<td>-I/usr/include/glib-2.0</td>
</tr>
<tr class="even">
<td>-I/usr/lib/glib-2.0/include</td>
</tr>
<tr class="odd">
<td>-I/usr/include/harfbuzz</td>
</tr>
<tr class="even">
<td>-I/usr/include/freetype2</td>
</tr>
<tr class="odd">
<td>-I/usr/include/libpng16</td>
</tr>
<tr class="even">
<td>-I/usr/include/libmount</td>
</tr>
<tr class="odd">
<td>-I/usr/include/blkid</td>
</tr>
<tr class="even">
<td>-I/usr/include/fribidi</td>
</tr>
<tr class="odd">
<td>-I/usr/include/cairo</td>
</tr>
<tr class="even">
<td>-I/usr/include/lzo</td>
</tr>
<tr class="odd">
<td>-I/usr/include/pixman-1</td>
</tr>
<tr class="even">
<td>-I/usr/include/gdk-pixbuf-2.0</td>
</tr>
<tr class="odd">
<td>-I/usr/include/graphene-1.0</td>
</tr>
<tr class="even">
<td>-I/usr/lib/graphene-1.0/include</td>
</tr>
<tr class="odd">
<td>-mfpmath=sse</td>
</tr>
<tr class="even">
<td>-msse</td>
</tr>
<tr class="odd">
<td>-msse2</td>
</tr>
<tr class="even">
<td>-I/usr/include/gio-unix-2.0</td>
</tr>
<tr class="odd">
<td>-pthread</td>
</tr>
<tr class="even">
<td>-lgtk-4</td>
</tr>
<tr class="odd">
<td>-lpangocairo-1.0</td>
</tr>
<tr class="even">
<td>-lpango-1.0</td>
</tr>
<tr class="odd">
<td>-lharfbuzz</td>
</tr>
<tr class="even">
<td>-lgdk<sub>pixbuf</sub>-2.0</td>
</tr>
<tr class="odd">
<td>-lcairo-gobject</td>
</tr>
<tr class="even">
<td>-lcairo</td>
</tr>
<tr class="odd">
<td>-lvulkan</td>
</tr>
<tr class="even">
<td>-lgraphene-1.0</td>
</tr>
<tr class="odd">
<td>-lgio-2.0</td>
</tr>
<tr class="even">
<td>-lgobject-2.0</td>
</tr>
<tr class="odd">
<td>-lglib-2.0</td>
</tr>
<tr class="even">
<td></td>
</tr>
</tbody>
</table>
]]></summary>
</entry>
<entry>
    <title>2021-07-24-diary-allelosphere-vol1</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-07-24-diary-allelosphere-vol1.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-07-24-diary-allelosphere-vol1.html</id>
    <published>2021-07-24T00:00:00Z</published>
    <updated>2021-07-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>ALLELOSPHERE Reverse Real v1</h1>
  <div class="ui list">
    <div class="item">Posted on July 24, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on July 24, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>や~~~最初はみあちゃんのあちゃんだけ見て流し見しようかと思ってたけど みんな良だったので通しで見てしまった。</p>
<p>今見返してて気が付いたけど、ライブ中殆どはライブ側にコメしてるのでTwitterに 記録があまりない…</p>
<h1 id="各回の感想">各回の感想</h1>
<h2 id="来栖らいあ"><a href="https://twitter.com/Raiaxxxia">来栖らいあ</a></h2>
<p>2曲、ファンの方と作ったオリ曲？とその次にリバリアで作った曲のお披露目!</p>
<p>一曲目は電車の中で聞いていたので実はあまり聞けてない…かわいかったのだけ 覚えている。</p>
<p>二曲目、 Dear Darlin(?) はASMRが入ってたりして結構ぞくっとした… 車内で聞いてたんですがこう…非日常感やば… 曲としてここまでASMR入れ込んでたの聞いたことなかったのでそれだけですごく良でした。</p>
<h2 id="織田りこる"><a href="https://twitter.com/reco_v">織田りこる</a></h2>
<p>Live2Dでの参加! 大体が3Dになってると思ってたのでびっくりした。 でも、中々3Dだと(今回は)実現しにくい演出だとかが沢山で良きでした。</p>
<p>かわいい+ウサギさん+桜吹雪っていうのが みあのあ(特にのあ)に似たものを感じてちょっと嬉しみがあった。</p>
<h2 id="火渡飛鳥"><a href="https://twitter.com/asuka_shovel">火渡飛鳥</a></h2>
<p>声優の卵とのこと。 今迄の二人と打ってかわって渋い、力強い声での歌唱でした。 かっこよい。 盛り上ってるなぁぁぁ!!!</p>
<h2 id="琴子"><a href="https://twitter.com/honey_kotoko">琴子</a></h2>
<p>大分の御当地VTuber。 MVとして作り上げられており、映像として凄い。 大分の有名なものとかが沢山入ってたらしいけど私大分分からん+移動中で 画面があまり見れなかったのが残念orz</p>
<p>とても綺麗で「大和撫子」という雰囲気の映像でした。</p>
<h2 id="夜桜みあ"><a href="https://twitter.com/yozakura_mia">夜桜みあ</a></h2>
<p>我らが!!!!!!みあちゃん!!!!!!!!!!!</p>
<p>フルトラでは動けず(多分)facerigとかを使ってたと思うけど、 動いているみあちゃんが見られただけでも嬉しかったです。 「アリ~~ナ~~!!」ってやりたがってるのがかわいい。 「技術ってしゅげ~~~」じゃないんだよ貴女のかわいさもしゅげ~~~だよ。 技術ってほんとしゅげぇ…</p>
<p>blooming magicはコール&amp;レスポンスもある曲で、みあちゃんが コール&amp;レスポンス講座してくれた。そのお陰でみんなやってくれてありがてぇ… 黒猫さん以外の方もみんなコール&amp;レスポンスしてくれていて、めっちゃ 会場全体で盛り上りました。とても良い。</p>
<p>ただね!!!キーボードで打つには間隔が短いのよねあのコール!!!!!! 全然追いつきませんでした。 追いつかなかったけど楽しかった。 声でコールしたらそのまま届いてくれませんかね？？ダメ？？？はい…</p>
<p>夜桜みあのかわいさが世に知れちまったな~~~これはみんな 見るしかないな~~ほんと。</p>
<p>…最近の切り抜き作っておけばよかったなって思ってます!!うん!!!! 絶対そうするべきだったねぇぇぇぇ!!!!!</p>
<p>ちなみにさらっと「ありがと~!」とか言ってた気がしますが ありがとうはこっちなんだよなありがとぉぉぉぉぉぉあのさぁぁぁあぁぁ 存在してくれててありがとうなぁぁぁぁぁぁ</p>
<p>すき</p>
<h2 id="九条林檎"><a href="https://twitter.com/ringo_0_0_5">九条林檎</a></h2>
<p>林檎さまだねぇ。うん。 流石の林檎様、というステージでした。</p>
<p>衣装も麗しくかつかっこ良い。 セルフカメラらしいし、それでいて歌も踊りもしっかりとこなす。 流石なんだよな…</p>
<p>ステージで林檎様が出る度にコメ欄が「麗しい…」「征服して!」になるのが とても好きです。こんなに本人の雰囲気がにじみ出るコメ欄他にあるだろうか。 <del>あ、名取のとことかはある意味滲み出ていますg</del></p>
<p>かっこよい+麗しいが本当に素敵でした。</p>
<h2 id="魅紗"><a href="https://twitter.com/misyasamadayo">魅紗</a></h2>
<p>一目見てわかるこのたたずまい。 実は前回のオリ曲コンピの時に知ってそこからフォローしておりましたが、 相変わらず歌が綺麗。声の出し方とか関係なしに凄く綺麗。</p>
<p>曲も御姿も美しくて最高でした。</p>
<h2 id="夜桜のあ"><a href="https://twitter.com/yozakura_noa">夜桜のあ</a></h2>
<p>ア゛イ゛ド゛ル゛!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p>
<p>今日ののあちゃんはガチでアイドルでした。 導入のカメラワーク・歓声からのパーティクルの演出とても綺麗でした。</p>
<p>サビ以外の振り付けは自分で考えたって言ってたけどかわいかったでし… りんりんちゃん作の衣装も素敵でした。</p>
<h2 id="柚月ゆず"><a href="https://twitter.com/0w0_YUZU">柚月ゆず</a></h2>
<p>Live2Dでの参戦…と思いきや超綺麗な3D!! 多分MMD…? 沢山動いていてとても楽しい!</p>
<p>衣装も、姿もステージも演出も綺麗でした。</p>
<p>海の上のステージ、というのがアイマリンプロジェクトのMarine Dreamin'と 重なって懐しい気持ちになりました。 私の3DCGとの馴初めがMarine Dreamin'なので…</p>
<p>綺麗なステージを見て、「あぁ我もCGやりたいな…」となりました。 声も素敵でした。</p>
<hr />
<p>あの、ここらへんからライブ視聴後数時間経って書いているので段々と内容を忘れています</p>
<hr />
<h2 id="V01 YUME"><a href="https://twitter.com/V01Yume">V01 YUME</a></h2>
<p>声が綺麗… お目目も綺麗…YU"ME"だけに…</p>
<p>はい。</p>
<p>くっ…?って体かしげてるのがとてもかわいかった。</p>
<h2 id="幸糖ミュウミュウ"><a href="https://twitter.com/mewmewsugar">幸糖ミュウミュウ</a></h2>
<p>我らがA2Pのミュウミュウちゃん!! 休止中だったのを途中で思い出しましたが、そんな中の出演って中々エモでは…</p>
<p>私はそこまでガッツリ追ってなかったけれど、待ち侘びてたファンも 多かったろうなぁという気持ちで見ていました。</p>
<p>振り付けがかわいい!!とてもかわいい!!</p>
<h2 id="御兎木乃天"><a href="https://twitter.com/Noakun_RET">御兎木乃天</a></h2>
<p>動画での参戦。 MV調に仕上がっていて、童謡？民謡？的な曲と合う世界観で引き込まれました。 すっ…と聞き入っておったよ…</p>
<h2 id="サクラメイ"><a href="https://twitter.com/Sakura_Maychan">サクラメイ</a></h2>
<p>大トリ! 最初っからめちゃくちゃ元気な声・元気な動きをしていて、 一気にテンションが上がりました。 先程のしんみりさは何処へ…</p>
<p>歌っている間もずっと元気で見ていて元気が貰えるタイプの子でした。ありがたぅ</p>
]]></summary>
</entry>

</feed>
