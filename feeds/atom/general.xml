<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/general.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/general.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2021-08-24T00:00:00Z</updated>
    <entry>
    <title>2021-08-24-xmonad-how-to-access-window-properties-from-layout</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-08-24-xmonad-how-to-access-window-properties-from-layout.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-08-24-xmonad-how-to-access-window-properties-from-layout.html</id>
    <published>2021-08-24T00:00:00Z</published>
    <updated>2021-08-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>2021-08-24-xmonad-how-to-access-window-properties-from-layout</h1>
  <div class="ui list">
    <div class="item">Posted on August 24, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 24, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<h1 data-date="[2021-08-24 Tue 14:58]" data-tags=":xmonad:" data-blog_post_kind="HowTo" data-blog_post_progress="Empty" data-blog_post_status="Normal" id="XMonadのLayoutからWindowのプロパティにアクセスする">XMonadのLayoutからWindowのプロパティにアクセスする</h1>
<h2 id="Tl;Dr">Tl;Dr</h2>
<ul>
<li><code>LayoutClass</code> のインスタンスの定義で、 <code>a</code> を <code>Window</code> に固定する
<ul>
<li>どこかに影響あるかもしれない、未確認</li>
</ul></li>
<li><code>doLayout</code> の中で <code>Query</code> を使ってあげる</li>
</ul>
<h2 id="モチベーション">モチベーション</h2>
<p>ダッシュボードとして機能するworkspaceを作成したい。 なので所定の位置に各アプリケーションが配置されてほしいが、 何もしない状態だと各アプリケーションのタイトル(<code>WM_NAME</code>)等には アクセスできず判断できない。</p>
<p>なんとかならないものか</p>
<h2 id="ManageHookを参考にする">ManageHookを参考にする</h2>
<p>managehookでは、ウィンドウのプロパティにアクセスして制御を行っている。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>title <span class="st">&quot;This is example emacs&quot;</span> <span class="op">--&gt;</span> doShift <span class="st">&quot;Editor&quot;</span></span></code></pre></div>
</div>
<p>など。 ここにヒントを得れば何らかの方法がありそうだなと検討が付く</p>
<h2 id="Query を探る"><code>Query</code> を探る</h2>
<p>managehookで使われているのは <code>Query</code> という型。これは <code>X</code> を基底 モナドに持つ <code>ReaderT</code> で、 <code>runQuery</code> で実行することで <code>X a</code> を 戻り値として取ることができる。</p>
<p><a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-Core.html#t:Query"><code>Query</code> と <code>runQuery</code> の実装</a>は以下</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="~Query~ と ~runQuery~ の実装"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="~Query~ と ~runQuery~ の実装-1"><a href="#~Query~ と ~runQuery~ の実装-1" aria-hidden="true"></a>   <span class="kw">newtype</span> <span class="dt">Query</span> a <span class="ot">=</span> <span class="dt">Query</span> (<span class="dt">ReaderT</span> <span class="dt">Window</span> <span class="dt">X</span> a)</span>
<span id="~Query~ と ~runQuery~ の実装-2"><a href="#~Query~ と ~runQuery~ の実装-2" aria-hidden="true"></a><span class="kw">deriving</span> (<span class="dt">Functor</span>, <span class="dt">Applicative</span>, <span class="dt">Monad</span>, <span class="dt">MonadReader</span> <span class="dt">Window</span>, <span class="dt">MonadIO</span>)</span>
<span id="~Query~ と ~runQuery~ の実装-3"><a href="#~Query~ と ~runQuery~ の実装-3" aria-hidden="true"></a></span>
<span id="~Query~ と ~runQuery~ の実装-4"><a href="#~Query~ と ~runQuery~ の実装-4" aria-hidden="true"></a><span class="ot">   runQuery ::</span> <span class="dt">Query</span> a <span class="ot">-&gt;</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> a</span>
<span id="~Query~ と ~runQuery~ の実装-5"><a href="#~Query~ と ~runQuery~ の実装-5" aria-hidden="true"></a>   runQuery (<span class="dt">Query</span> m) w <span class="ot">=</span> runReaderT m w</span></code></pre></div>
</div>
<p>さて…どうやらこれで答えなのでは？ <code>X</code> モナドのアクションなので、あとはこれを <code>doLayout</code> 内部から呼んであげれば良さそう。</p>
<p><strong>…が、人生そう甘はないのである</strong></p>
<h2 id="Query では上手くいかない!？"><code>Query</code> では上手くいかない!？</h2>
<p>改めて <code>runQuery</code> の型を見てみよう。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">runQuery ::</span> <span class="dt">Query</span> a <span class="ot">-&gt;</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> a</span></code></pre></div>
</div>
<p>第二引数に取るのは <code>Window</code> である。 <a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-Core.html#v:doLayout">~doLayout~の型</a>も見てみよう</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">doLayout ::</span> layout a <span class="op">-</span> <span class="dt">Rectangle</span> <span class="ot">-&gt;</span> <span class="dt">Stack</span> a <span class="ot">-&gt;</span> <span class="dt">X</span> ([(a, <span class="dt">Rectangle</span>)], <span class="dt">Maybe</span> (layout a))</span></code></pre></div>
</div>
<p>このうち、ウィンドウの情報が格納されているのは <code>Stack a</code> の内部である。(<a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-Core.html#v:doLayout">コメント</a>より) そして <a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-StackSet.html#t:Stack"><code>Stack a</code> の定義</a> を見てみると</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>   <span class="kw">data</span> <span class="dt">Stack</span> a <span class="ot">=</span> <span class="dt">Stack</span> {<span class="ot"> focus  ::</span> <span class="op">!</span>a        <span class="co">-- focused thing in this set</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>   ,<span class="ot"> up     ::</span> [a]       <span class="co">-- clowns to the left</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>   ,<span class="ot"> down   ::</span> [a] }     <span class="co">-- jokers to the right</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>, <span class="dt">Eq</span>)</span></code></pre></div>
</div>
<p>となっており、 <em>保存されている値の型は <code>a</code> で定義されている</em> のだ。 これが何故問題になるか、というと <strong><code>runQuery</code> に <code>Stack a</code> の中の <code>Window</code> を食わせたいが、 型が定まっていないため型エラーを起こす</strong> ということだ。</p>
<p>ドキュメント的に、 <code>doLayout</code> には実際には <code>Stack Window</code> が渡されるであろうことは明白なのだが、 プログラムからするとそんな実行時の話は知らない。 というか型としてはエラーを起こすのが正解だと思う。</p>
<p>でも確実に <code>Window</code> がくるはずだし、困った…</p>
<h2 id="LayoutClass &lt;Layout&gt; Window にしちゃえ!!"><code>LayoutClass &lt;Layout&gt; Window</code> にしちゃえ!!</h2>
<p>えいやっ!というやっつけ感が凄いが、 <code>LayoutClass</code> のインスタンスを作る際に <code>a</code> の型を指定してしまえば 型エラーは起こらなくなる。 <code>doLayout</code> は <code>LayoutClass</code> の型クラス関数であり、 <code>doLayout</code> の型定義の中の <code>a</code> は <code>LayoutClass &lt;Layout&gt; a</code> によって束縛されているからだ。</p>
<p>これによって、 <code>Stack a</code> の型が固定される。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">LayoutClass</span> <span class="dt">MyLayout</span> <span class="dt">Window</span> <span class="kw">where</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ot">  doLayout ::</span> <span class="dt">MyLayout</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">Rectangle</span> <span class="ot">-&gt;</span> <span class="dt">Stack</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ([(<span class="dt">Window</span>, <span class="dt">Rectangle</span>)], <span class="dt">Maybe</span> (<span class="dt">MyLayout</span> <span class="dt">Window</span>))</span></code></pre></div>
</div>
<p>そうすれば、後は <code>Stack</code> から取り出した <code>Window</code> を <code>runQuery</code> にかけてあげれば良いだけになる。</p>
<h2 id="おまけ: 具体的な書き方">おまけ: 具体的な書き方</h2>
<p>ついでなので、ケース毎に使い方(書き方)を書いてみる。</p>
<h3 id="タイトルによって選択">タイトルによって選択</h3>
<p><a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-ManageHook.html#v:title"><code>title</code></a>を使います。 <a href="https://github.com/Cj-bc/dotfiles/blob/master/dotfiles/xmonad/src/XMonad/Layout/Info.hs#L25-L31">私のxmonadに記載されているもの</a>と同じです。</p>
<p>最初に <code>[Window]</code> から 適切な <code>Window</code> だけ取り出すために <code>[X (Maybe Window)]</code> にしてあげて、 <code>X</code> を実行するために <code>sequence</code> (<code>X [Maybe Window]</code>)、 <code>find</code> で <code>Just</code> なもの(=求めていたWindow)をピックアップしてあげて (<code>X [Maybe (Maybe Window)]</code>)、二重になった <code>Maybe</code> を <code>join</code> で平たくしてあげています。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">     windowTitleIs ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Window</span>] <span class="ot">-&gt;</span> <span class="dt">X</span> (<span class="dt">Maybe</span> <span class="dt">Window</span>)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>     windowTitleIs name ws <span class="ot">=</span> <span class="fu">fmap</span> (join <span class="op">.</span> find isJust) <span class="op">.</span> <span class="fu">sequence</span> <span class="op">.</span> <span class="fu">flip</span> <span class="fu">fmap</span> ws <span class="op">$</span> \w <span class="ot">-&gt;</span> <span class="fu">flip</span> runQuery w <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>n <span class="ot">&lt;-</span> w<span class="ot">`hasTitle`</span>name</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="kw">if</span> n <span class="kw">then</span> <span class="fu">return</span> (<span class="dt">Just</span> w) <span class="kw">else</span> <span class="fu">return</span> <span class="dt">Nothing</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a><span class="ot">     hasTitle ::</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Query</span> <span class="dt">Bool</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>     hasTitle w name <span class="ot">=</span> (<span class="op">==</span> name) <span class="op">&lt;$&gt;</span> title</span></code></pre></div>
</div>
<p>ついで(？)なので思考メモを残しておきます。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="思考メモ"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="思考メモ-1"><a href="#思考メモ-1" aria-hidden="true"></a><span class="ot">allWindows ::</span> [<span class="dt">Window</span>]</span>
<span id="思考メモ-2"><a href="#思考メモ-2" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="思考メモ-3"><a href="#思考メモ-3" aria-hidden="true"></a><span class="fu">flip</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="思考メモ-4"><a href="#思考メモ-4" aria-hidden="true"></a><span class="fu">flip</span><span class="ot"> fmap ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> f a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f b</span>
<span id="思考メモ-5"><a href="#思考メモ-5" aria-hidden="true"></a><span class="fu">flip</span> <span class="fu">fmap</span><span class="ot"> allWindows ::</span> (<span class="dt">Window</span> <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [b]</span>
<span id="思考メモ-6"><a href="#思考メモ-6" aria-hidden="true"></a></span>
<span id="思考メモ-7"><a href="#思考メモ-7" aria-hidden="true"></a></span>
<span id="思考メモ-8"><a href="#思考メモ-8" aria-hidden="true"></a><span class="fu">flip</span> <span class="fu">fmap</span> allWindows <span class="op">&lt;$&gt;</span><span class="ot"> ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> f ([<span class="dt">Window</span>] <span class="ot">-&gt;</span> (<span class="dt">Window</span> <span class="ot">-&gt;</span> b)) <span class="ot">-&gt;</span> f [b]</span>
<span id="思考メモ-9"><a href="#思考メモ-9" aria-hidden="true"></a></span>
<span id="思考メモ-10"><a href="#思考メモ-10" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> (<span class="dt">Maybe</span> <span class="dt">Window</span>)</span>
<span id="思考メモ-11"><a href="#思考メモ-11" aria-hidden="true"></a></span>
<span id="思考メモ-12"><a href="#思考メモ-12" aria-hidden="true"></a><span class="fu">flip</span> <span class="fu">fmap</span> allWindows<span class="ot"> f ::</span> [<span class="dt">X</span> (<span class="dt">Maybe</span> <span class="dt">Window</span>)]</span>
<span id="思考メモ-13"><a href="#思考メモ-13" aria-hidden="true"></a></span>
<span id="思考メモ-14"><a href="#思考メモ-14" aria-hidden="true"></a><span class="fu">sequence</span><span class="ot"> ::</span> (<span class="dt">Traversable</span> t, <span class="dt">Monad</span> m) <span class="ot">=&gt;</span> t (m a) <span class="ot">-&gt;</span> m (t a)</span>
<span id="思考メモ-15"><a href="#思考メモ-15" aria-hidden="true"></a></span>
<span id="思考メモ-16"><a href="#思考メモ-16" aria-hidden="true"></a><span class="fu">sequence</span> <span class="op">$</span> <span class="fu">flip</span> <span class="fu">fmap</span> allwindows<span class="ot"> f ::</span> <span class="dt">X</span> [<span class="dt">Maybe</span> <span class="dt">Window</span>]</span>
<span id="思考メモ-17"><a href="#思考メモ-17" aria-hidden="true"></a></span>
<span id="思考メモ-18"><a href="#思考メモ-18" aria-hidden="true"></a><span class="ot">find ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="思考メモ-19"><a href="#思考メモ-19" aria-hidden="true"></a><span class="ot">(&lt;$&gt;) ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="思考メモ-20"><a href="#思考メモ-20" aria-hidden="true"></a></span>
<span id="思考メモ-21"><a href="#思考メモ-21" aria-hidden="true"></a>find<span class="ot"> isJust ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="思考メモ-22"><a href="#思考メモ-22" aria-hidden="true"></a>find isJust <span class="op">&lt;$&gt;</span><span class="ot"> ::</span> <span class="dt">Foldable</span> t, <span class="dt">Functor</span> f <span class="ot">=&gt;</span> f (t a) <span class="ot">-&gt;</span> f (<span class="dt">Maybe</span> a)</span>
<span id="思考メモ-23"><a href="#思考メモ-23" aria-hidden="true"></a>find jsJust <span class="op">&lt;$&gt;</span> <span class="fu">sequence</span> <span class="op">$</span> <span class="fu">flip</span> <span class="fu">fmap</span> allwindows<span class="ot"> f ::</span> <span class="dt">X</span> (<span class="dt">Maybe</span> (<span class="dt">Maybe</span> a))</span>
<span id="思考メモ-24"><a href="#思考メモ-24" aria-hidden="true"></a></span>
<span id="思考メモ-25"><a href="#思考メモ-25" aria-hidden="true"></a><span class="ot">join ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> m (m a) <span class="ot">-&gt;</span> m a</span>
<span id="思考メモ-26"><a href="#思考メモ-26" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> join ::</span> (<span class="dt">Monad</span> m, <span class="dt">Functor</span> f) <span class="ot">=&gt;</span> f (m (m a)) <span class="ot">-&gt;</span> f (m a)</span>
<span id="思考メモ-27"><a href="#思考メモ-27" aria-hidden="true"></a></span>
<span id="思考メモ-28"><a href="#思考メモ-28" aria-hidden="true"></a><span class="ot">($) ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b</span>
<span id="思考メモ-29"><a href="#思考メモ-29" aria-hidden="true"></a><span class="fu">fmap</span> join <span class="op">$</span><span class="ot"> ::</span> (<span class="dt">Monad</span> m, <span class="dt">Functor</span> f) <span class="ot">=&gt;</span> f (m (m a)) <span class="ot">-&gt;</span> f (m a)</span>
<span id="思考メモ-30"><a href="#思考メモ-30" aria-hidden="true"></a></span>
<span id="思考メモ-31"><a href="#思考メモ-31" aria-hidden="true"></a><span class="fu">fmap</span> join <span class="op">$</span> find jsJust <span class="op">&lt;$&gt;</span> <span class="fu">sequence</span> <span class="op">$</span> <span class="fu">flip</span> <span class="fu">fmap</span> allwindows<span class="ot"> f ::</span> <span class="dt">X</span> (<span class="dt">Maybe</span> a)</span></code></pre></div>
</div>
]]></summary>
</entry>
<entry>
    <title>2021-08-19-github-use-github-actions-to-auto-release-binaries</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-08-19-github-use-github-actions-to-auto-release-binaries.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-08-19-github-use-github-actions-to-auto-release-binaries.html</id>
    <published>2021-08-19T00:00:00Z</published>
    <updated>2021-08-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>2021-08-19-github-use-github-actions-to-auto-release-binaries</h1>
  <div class="ui list">
    <div class="item">Posted on August 19, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 20, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<h1 data-date="[2021-08-19 Thu 21:21]" data-tags=":haskell:" data-blog_post_kind="HowTo" data-blog_post_progress="WIP" data-blog_post_status="Normal" id="Github actionsでStackを使用した実行ファイルのバイナリを自動生成">Github actionsでStackを使用した実行ファイルのバイナリを自動生成</h1>
<p>ghq:Cj-bc/oschark を作っている際、installationを書く上で 「どうせならバイナリ用意しておくか」と思ったので作業したメモ。</p>
<h2 id="全体像">全体像</h2>
<p>最終的にやりたいこと: Github actionsを用いてバイナリを配付する</p>
<ol>
<li>手動で実行できる「ビルドする」 Actionを作る</li>
<li>ビルドしたものをリリースに載せられるようにする</li>
<li>リリース時をトリガーとしてGithub Actionを稼動させる</li>
<li>複数プラットフォームそれぞれ用のバイナリを用意する</li>
</ol>
<h2 id="1. 手動で実行できる「ビルドする」ACtionを作る">1. 手動で実行できる「ビルドする」ACtionを作る</h2>
<p>Haskell(stack)の環境をセットアップし、ビルドする。</p>
<p>stackの環境は、元々は公式にあったが現在は廃止され、 <a href="https://github.com/haskell/actions/tree/main/setup">haskell/actions</a> に移動されて管理されている。</p>
<p>デフォルトではcabalの環境あセットアップされる。</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> haskell/actions/setup@v1</span></span></code></pre></div>
</div>
<p>Stackを使いたい場合、 <code>enable-stack</code> を有効化する。</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="at">   </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="at">     </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> haskell/actions/setup@v1</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">enable-stack</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span></code></pre></div>
</div>
<h2 id="2. ビルドしたものをリリースに載せられるようにする">2. ビルドしたものをリリースに載せられるようにする</h2>
<p>ビルドしても、このままだと海のもずくに消えてしまいます。 なので、これをリリースに付属させる処理をします。</p>
<p>公式の <a href="https://github.com/actions/create-release">actions/create-release</a>が昔はあったようですが、 2021年8月19日現在ではアーカイブされてしまっているので、 そこで提案されている他のアクションを使うことにしました。</p>
<p>今回は、仕様や書き方等を軽く見た結果 <a href="https://github.com/softprops/action-gh-release">softprops/action-gh-release</a> を 使ってみることにしました。</p>
<p>主な理由は</p>
<ul>
<li>設定が一番シンプルそう</li>
<li>複数のファイルをアタッチできるから</li>
</ul>
<p>の2点です(特に1点目でかなり差がついた)</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="at">   </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="at">     </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> softprops/action-gh-release</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">prerelease</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="at">  </span><span class="fu">files</span><span class="kw">:</span><span class="at"> |	     oschark</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="at">    LICENSE</span></span></code></pre></div>
</div>
<p>これだけで、 <code>oschark</code> と <code>LICENSE</code> という名前のファイルが リリースに含まれるようになります。</p>
<p>ただ、 <code>stack build</code> しただけの状態だとファイルのパスが分からないため <code>find</code> で探して移動しておいた方が良いです。</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="at">   </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="at">     </span><span class="kw">-</span><span class="at"> ...</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="at">     </span><span class="kw">-</span><span class="at"> </span><span class="fu">run</span><span class="kw">:</span><span class="at"> find .stack-work/install -name oschark -exec mv {} . \;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="at">     </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> softprops/action-gh-release</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="co">...</span></span></code></pre></div>
</div>
<h2 id="3. リリース時をトリガーとしてGithub Actionを稼動させる">3. リリース時をトリガーとしてGithub Actionを稼動させる</h2>
<p>これは一般的な方法をそのままで使います。 但し、cabalのバージョニング(厳密には<a href="https://pvp.haskell.org/?rdfrom=https%3A%2F%2Fwiki.haskell.org%2Findex.php%3Ftitle%3DPackage_versioning_policy%26redirect%3Dno">Haskell Package Versioning Policy</a>) に従うタグの形式に変えてあります。</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="at">   </span><span class="fu">on</span><span class="kw">:</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="at">     </span><span class="fu">push</span><span class="kw">:</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a><span class="fu">tags</span><span class="kw">:</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;*.*.*.*&quot;</span></span></code></pre></div>
</div>
<h2 id="4. 複数プラットフォームそれぞれ用のバイナリを用意する">4. 複数プラットフォームそれぞれ用のバイナリを用意する</h2>
<p>せっかくなのでLinux/macOS/Windowsそれぞれのバイナリを提供してみることに します。</p>
<p>このためには <a href="https://docs.github.com/ja/actions/reference/workflow-syntax-for-github-actions#">matrix</a>を使います(リンクは直貼りできなかった)</p>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="at">   </span><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="at">     </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="at">    </span><span class="fu">foo</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="at">bar</span><span class="kw">,</span><span class="at"> baz</span><span class="kw">,</span><span class="at"> fizz</span><span class="kw">]</span></span></code></pre></div>
</div>
<p>matrixを含むstrategyは、各jobの直下に書かれます(<code>jobs.&lt;job_id&gt;.strategy.matrix</code>)</p>
<p>matrixは、値にリストを取る辞書型の値を取ります。 辞書のキーがmatrix内でのプロパティになり値のリストがそれぞれ挿入されることになります。 ここで定義したプロパティは <code>${{matrix.&lt;key&gt;}}</code> で参照することができます。 上記の例の場合は <code>${{matrix.foo}}</code> となります。</p>
<p>これを</p>
<h3 id="artifactを使って各バイナリを保存する">artifactを使って各バイナリを保存する</h3>
]]></summary>
</entry>
<entry>
    <title>2021-08-14-gtk-learning</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-08-14-gtk-learning.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-08-14-gtk-learning.html</id>
    <published>2021-08-14T00:00:00Z</published>
    <updated>2021-08-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>2021-08-14-gtk-learning</h1>
  <div class="ui list">
    <div class="item">Posted on August 14, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 14, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<h1 data-date="[2021-08-14 Sat 01:22]" data-tags=":Gtk:" data-blog_post_kind="Memo" data-blog_post_progress="WIP" data-blog_post_status="Normal" id="gtkを触りはじめてみたメモ">gtkを触りはじめてみたメモ</h1>
<p>一応 <a href="https://hackage.haskell.org/package/gi-gtk-4.0.4">haskellのgi-gtkバインディング</a>を使えるようになることが最終目標だが、 まずはCでのサンプルを実装してみている</p>
<h2 id="基本的な仕組み">基本的な仕組み</h2>
<ul>
<li>基本的には <code>GtkWidget</code> を <code>Container</code> に入れてゆく</li>
<li><code>signal</code> にたいしてコールバック関数を与えてやる。</li>
<li>トップレベルは <code>GtkApplication</code> で、その中に <code>GtkWindow</code> を入れる。</li>
<li><code>gpointer</code> は <code>*void</code> と同値。なので何でも入れられる</li>
</ul>
]]></summary>
</entry>
<entry>
    <title>2021-08-13-c-clangd-pass-appropriate-build-flags-clangd-langserver</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-08-13-c-clangd-pass-appropriate-build-flags-clangd-langserver.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-08-13-c-clangd-pass-appropriate-build-flags-clangd-langserver.html</id>
    <published>2021-08-13T00:00:00Z</published>
    <updated>2021-08-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>2021-08-13-c-clangd-pass-appropriate-build-flags-clangd-langserver</h1>
  <div class="ui list">
    <div class="item">Posted on August 13, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 13, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<h1 data-date="[2021-08-13 Fri 17:43]" data-tags="C clangd lsp" data-blog_post_kind="Knowledge" data-blog_post_progress="Empty" data-blog_post_status="Normal" id="LSPサーバーとして使うclangdにビルドフラグを設定する">LSPサーバーとして使うclangdにビルドフラグを設定する</h1>
<p>公式ページ: <a href="https://clangd.llvm.org/installation">https://clangd.llvm.org/installation</a></p>
<div class="tldr">
<ul>
<li>同じディレクトリに <code>compile_flags.txt</code> ファイルを作れ</li>
<li>一行に一フラグずつ書け</li>
</ul>
</div>
<p>C言語(とC++言語)のLSPサーバーに、LLVMプロジェクトの<a href="https://clangd.llvm.org/">clangd</a>があります。 何も設定しないで使おうとすると</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>$ <span class="fu">clang</span> foo.cc</span></code></pre></div>
</div>
<p>とビルドされるものと解釈して動きます。 これだと大体のプログラムはフラグが足りないため、 フラグを設定する方法が2通り用意されています。</p>
<ul>
<li><code>compile_commands.json</code></li>
<li><code>compile_flags.txt</code></li>
</ul>
<h2 id="compile_commands.json: ビルドツールを使用する場合"><code>compile_commands.json</code>: ビルドツールを使用する場合</h2>
<p>プロジェクトの中にある各ファイルのコンパイルコマンドを定義できます。 これは基本的にはツールによって生成されます。</p>
<p><code>clangd</code> は、今編集しているファイルの親ディレクトリに このファイルを探しにいきます。</p>
<p>下に2つの例を上げていますが、これ以外のツールでも生成出来るものがあるそうです。</p>
<p>参考: <a href="https://clang.llvm.org/docs/JSONCompilationDatabase.html">compile<sub>commands</sub>.jsonの仕様</a></p>
<h3 id="CMakeを使っている場合">CMakeを使っている場合</h3>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="fu">cmake</span> -DCMAKE_EXPORT_COMPILE_COMMANDS=1</span></code></pre></div>
</div>
<p>とすることで、ビルドディレクトリに <code>compile_commands.json</code> を 出力します。 プロジェクトルートとは異なる場合であった場合は手動で (シムリンクorコピーすることで)移動する必要があります。</p>
<h3 id="他のビルドツールを使っている場合">他のビルドツールを使っている場合</h3>
<p><a href="https://github.com/rizsotto/Bear">bear</a>を使用することで様々なビルドツールでも使うことができるようです。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb3" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ex">bear</span> -- &lt;&lt;使用しているビルドコマンド&gt;&gt;</span></code></pre></div>
</div>
<p>とすることで、生成できます。 仕組み的には、ビルドコマンドで普通にビルドし、そのログから コンパイラの呼び出しを特定&amp; <code>compile_commands.json</code> を作るようです。</p>
<p>(READMEを雑に読んだ程度の知識)</p>
<h2 id="compile_flags.txt: 手動ビルド、若しくはフラグが少ない場合"><code>compile_flags.txt</code>: 手動ビルド、若しくはフラグが少ない場合</h2>
<p>手動でのビルドをしている場合や、フラグが少ない場合は <code>compile_flags.txt</code> を使う方が楽でしょう。</p>
<p>但し <strong>同じディレクトリにある全てのソースに対して同じフラグが設定される</strong> ので注意が必要です。</p>
<p>このファイルはシンプルな構文で、一行に一つフラグを記入するだけです。</p>
<p>例えばgtk4を用いて以下のようにコンパイルしていた場合:</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb4" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="fu">clang</span> <span class="va">$(</span><span class="ex">pkg-config</span> --cflags gtk4<span class="va">)</span> -o somefile somefile.c <span class="va">$(</span><span class="ex">pkg-config</span> --libs gtk4<span class="va">)</span></span></code></pre></div>
</div>
<p>以下のようにしてあげれば良いでしょう。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb5" data-org-language="sh" data-resuts="outputs raw"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ex">pkg-config</span> --cflags --libs gtk4 <span class="kw">|</span> <span class="fu">tr</span> <span class="st">&#39; &#39;</span> <span class="st">&#39;\n&#39;</span></span></code></pre></div>
</div>
<table>
<tbody>
<tr class="odd">
<td>-I/usr/include/gtk-4.0</td>
</tr>
<tr class="even">
<td>-I/usr/include/pango-1.0</td>
</tr>
<tr class="odd">
<td>-I/usr/include/glib-2.0</td>
</tr>
<tr class="even">
<td>-I/usr/lib/glib-2.0/include</td>
</tr>
<tr class="odd">
<td>-I/usr/include/harfbuzz</td>
</tr>
<tr class="even">
<td>-I/usr/include/freetype2</td>
</tr>
<tr class="odd">
<td>-I/usr/include/libpng16</td>
</tr>
<tr class="even">
<td>-I/usr/include/libmount</td>
</tr>
<tr class="odd">
<td>-I/usr/include/blkid</td>
</tr>
<tr class="even">
<td>-I/usr/include/fribidi</td>
</tr>
<tr class="odd">
<td>-I/usr/include/cairo</td>
</tr>
<tr class="even">
<td>-I/usr/include/lzo</td>
</tr>
<tr class="odd">
<td>-I/usr/include/pixman-1</td>
</tr>
<tr class="even">
<td>-I/usr/include/gdk-pixbuf-2.0</td>
</tr>
<tr class="odd">
<td>-I/usr/include/graphene-1.0</td>
</tr>
<tr class="even">
<td>-I/usr/lib/graphene-1.0/include</td>
</tr>
<tr class="odd">
<td>-mfpmath=sse</td>
</tr>
<tr class="even">
<td>-msse</td>
</tr>
<tr class="odd">
<td>-msse2</td>
</tr>
<tr class="even">
<td>-I/usr/include/gio-unix-2.0</td>
</tr>
<tr class="odd">
<td>-pthread</td>
</tr>
<tr class="even">
<td>-lgtk-4</td>
</tr>
<tr class="odd">
<td>-lpangocairo-1.0</td>
</tr>
<tr class="even">
<td>-lpango-1.0</td>
</tr>
<tr class="odd">
<td>-lharfbuzz</td>
</tr>
<tr class="even">
<td>-lgdk<sub>pixbuf</sub>-2.0</td>
</tr>
<tr class="odd">
<td>-lcairo-gobject</td>
</tr>
<tr class="even">
<td>-lcairo</td>
</tr>
<tr class="odd">
<td>-lvulkan</td>
</tr>
<tr class="even">
<td>-lgraphene-1.0</td>
</tr>
<tr class="odd">
<td>-lgio-2.0</td>
</tr>
<tr class="even">
<td>-lgobject-2.0</td>
</tr>
<tr class="odd">
<td>-lglib-2.0</td>
</tr>
<tr class="even">
<td></td>
</tr>
</tbody>
</table>
]]></summary>
</entry>
<entry>
    <title>2021-07-24-diary-allelosphere-vol1</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-07-24-diary-allelosphere-vol1.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-07-24-diary-allelosphere-vol1.html</id>
    <published>2021-07-24T00:00:00Z</published>
    <updated>2021-07-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>2021-07-24-diary-allelosphere-vol1</h1>
  <div class="ui list">
    <div class="item">Posted on July 24, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on July 24, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<h1 id="ALLELOSPHERE Reverse Real v1">ALLELOSPHERE Reverse Real v1</h1>
<p>や~~~最初はみあちゃんのあちゃんだけ見て流し見しようかと思ってたけど みんな良だったので通しで見てしまった。</p>
<p>今見返してて気が付いたけど、ライブ中殆どはライブ側にコメしてるのでTwitterに 記録があまりない…</p>
<h2 id="各回の感想">各回の感想</h2>
<h3 id="来栖らいあ"><a href="https://twitter.com/Raiaxxxia">来栖らいあ</a></h3>
<p>2曲、ファンの方と作ったオリ曲？とその次にリバリアで作った曲のお披露目!</p>
<p>一曲目は電車の中で聞いていたので実はあまり聞けてない…かわいかったのだけ 覚えている。</p>
<p>二曲目、 Dear Darlin(?) はASMRが入ってたりして結構ぞくっとした… 車内で聞いてたんですがこう…非日常感やば… 曲としてここまでASMR入れ込んでたの聞いたことなかったのでそれだけですごく良でした。</p>
<h3 id="織田りこる"><a href="https://twitter.com/reco_v">織田りこる</a></h3>
<p>Live2Dでの参加! 大体が3Dになってると思ってたのでびっくりした。 でも、中々3Dだと(今回は)実現しにくい演出だとかが沢山で良きでした。</p>
<p>かわいい+ウサギさん+桜吹雪っていうのが みあのあ(特にのあ)に似たものを感じてちょっと嬉しみがあった。</p>
<h3 id="火渡飛鳥"><a href="https://twitter.com/asuka_shovel">火渡飛鳥</a></h3>
<p>声優の卵とのこと。 今迄の二人と打ってかわって渋い、力強い声での歌唱でした。 かっこよい。 盛り上ってるなぁぁぁ!!!</p>
<h3 id="琴子"><a href="https://twitter.com/honey_kotoko">琴子</a></h3>
<p>大分の御当地VTuber。 MVとして作り上げられており、映像として凄い。 大分の有名なものとかが沢山入ってたらしいけど私大分分からん+移動中で 画面があまり見れなかったのが残念orz</p>
<p>とても綺麗で「大和撫子」という雰囲気の映像でした。</p>
<h3 id="夜桜みあ"><a href="https://twitter.com/yozakura_mia">夜桜みあ</a></h3>
<p>我らが!!!!!!みあちゃん!!!!!!!!!!!</p>
<p>フルトラでは動けず(多分)facerigとかを使ってたと思うけど、 動いているみあちゃんが見られただけでも嬉しかったです。 「アリ~~ナ~~!!」ってやりたがってるのがかわいい。 「技術ってしゅげ~~~」じゃないんだよ貴女のかわいさもしゅげ~~~だよ。 技術ってほんとしゅげぇ…</p>
<p>blooming magicはコール&amp;レスポンスもある曲で、みあちゃんが コール&amp;レスポンス講座してくれた。そのお陰でみんなやってくれてありがてぇ… 黒猫さん以外の方もみんなコール&amp;レスポンスしてくれていて、めっちゃ 会場全体で盛り上りました。とても良い。</p>
<p>ただね!!!キーボードで打つには間隔が短いのよねあのコール!!!!!! 全然追いつきませんでした。 追いつかなかったけど楽しかった。 声でコールしたらそのまま届いてくれませんかね？？ダメ？？？はい…</p>
<p>夜桜みあのかわいさが世に知れちまったな~~~これはみんな 見るしかないな~~ほんと。</p>
<p>…最近の切り抜き作っておけばよかったなって思ってます!!うん!!!! 絶対そうするべきだったねぇぇぇぇ!!!!!</p>
<p>ちなみにさらっと「ありがと~!」とか言ってた気がしますが ありがとうはこっちなんだよなありがとぉぉぉぉぉぉあのさぁぁぁあぁぁ 存在してくれててありがとうなぁぁぁぁぁぁ</p>
<p>すき</p>
<h3 id="九条林檎"><a href="https://twitter.com/ringo_0_0_5">九条林檎</a></h3>
<p>林檎さまだねぇ。うん。 流石の林檎様、というステージでした。</p>
<p>衣装も麗しくかつかっこ良い。 セルフカメラらしいし、それでいて歌も踊りもしっかりとこなす。 流石なんだよな…</p>
<p>ステージで林檎様が出る度にコメ欄が「麗しい…」「征服して!」になるのが とても好きです。こんなに本人の雰囲気がにじみ出るコメ欄他にあるだろうか。 <del>あ、名取のとことかはある意味滲み出ていますg</del></p>
<p>かっこよい+麗しいが本当に素敵でした。</p>
<h3 id="魅紗"><a href="https://twitter.com/misyasamadayo">魅紗</a></h3>
<p>一目見てわかるこのたたずまい。 実は前回のオリ曲コンピの時に知ってそこからフォローしておりましたが、 相変わらず歌が綺麗。声の出し方とか関係なしに凄く綺麗。</p>
<p>曲も御姿も美しくて最高でした。</p>
<h3 id="夜桜のあ"><a href="https://twitter.com/yozakura_noa">夜桜のあ</a></h3>
<p>ア゛イ゛ド゛ル゛!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p>
<p>今日ののあちゃんはガチでアイドルでした。 導入のカメラワーク・歓声からのパーティクルの演出とても綺麗でした。</p>
<p>サビ以外の振り付けは自分で考えたって言ってたけどかわいかったでし… りんりんちゃん作の衣装も素敵でした。</p>
<h3 id="柚月ゆず"><a href="https://twitter.com/0w0_YUZU">柚月ゆず</a></h3>
<p>Live2Dでの参戦…と思いきや超綺麗な3D!! 多分MMD…? 沢山動いていてとても楽しい!</p>
<p>衣装も、姿もステージも演出も綺麗でした。</p>
<p>海の上のステージ、というのがアイマリンプロジェクトのMarine Dreamin'と 重なって懐しい気持ちになりました。 私の3DCGとの馴初めがMarine Dreamin'なので…</p>
<p>綺麗なステージを見て、「あぁ我もCGやりたいな…」となりました。 声も素敵でした。</p>
<hr />
<p>あの、ここらへんからライブ視聴後数時間経って書いているので段々と内容を忘れています</p>
<hr />
<h3 id="V01 YUME"><a href="https://twitter.com/V01Yume">V01 YUME</a></h3>
<p>声が綺麗… お目目も綺麗…YU"ME"だけに…</p>
<p>はい。</p>
<p>くっ…?って体かしげてるのがとてもかわいかった。</p>
<h3 id="幸糖ミュウミュウ"><a href="https://twitter.com/mewmewsugar">幸糖ミュウミュウ</a></h3>
<p>我らがA2Pのミュウミュウちゃん!! 休止中だったのを途中で思い出しましたが、そんな中の出演って中々エモでは…</p>
<p>私はそこまでガッツリ追ってなかったけれど、待ち侘びてたファンも 多かったろうなぁという気持ちで見ていました。</p>
<p>振り付けがかわいい!!とてもかわいい!!</p>
<h3 id="御兎木乃天"><a href="https://twitter.com/Noakun_RET">御兎木乃天</a></h3>
<p>動画での参戦。 MV調に仕上がっていて、童謡？民謡？的な曲と合う世界観で引き込まれました。 すっ…と聞き入っておったよ…</p>
<h3 id="サクラメイ"><a href="https://twitter.com/Sakura_Maychan">サクラメイ</a></h3>
<p>大トリ! 最初っからめちゃくちゃ元気な声・元気な動きをしていて、 一気にテンションが上がりました。 先程のしんみりさは何処へ…</p>
<p>歌っている間もずっと元気で見ていて元気が貰えるタイプの子でした。ありがたぅ</p>
]]></summary>
</entry>
<entry>
    <title>Org roam使い始めた</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-05-19-emacs-org-roam-setup.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-05-19-emacs-org-roam-setup.html</id>
    <published>2021-05-19T00:00:00Z</published>
    <updated>2021-05-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>Org roam使い始めた</h1>
  <div class="ui list">
    <div class="item">Posted on May 19, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 19, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;Emacs&#39;." href="/tags/Emacs.html" class="ui tag label">Emacs</a><a title="All pages tagged &#39;org-roam&#39;." href="/tags/org-roam.html" class="ui tag label">org-roam</a><a title="All pages tagged &#39;org mode&#39;." href="/tags/org%20mode.html" class="ui tag label">org mode</a><a title="All pages tagged &#39;note&#39;." href="/tags/note.html" class="ui tag label">note</a>
  
</div>

<p>この記事は、Org-roamのinfoページを読んで内容を纏めています。 詳しくは原文をあたってください。</p>
<h1 id="Org-roamとは">Org-roamとは</h1>
<p>Org-roamは、 <a href="https://roamresearch.com/">Roam Resarch</a> からいくつかのアイデアを実装したものです。</p>
<p>Org modeで、階層構造でないノートを取るのをサポートします。 wikiのように書く事ができます。</p>
<h2 id="Slip-box (Zettelkasten) メゾッドとは">Slip-box (Zettelkasten) メゾッドとは</h2>
<p>(infoにあったものを軽く纏め、翻訳は雑なので原文を読むのを推奨)</p>
<p>ドイツの社会学者 Niklas Luhmann によって作成されました。 Luhmannの Slip-boxは、小さいカードの入った箱でした。 一つのコンセプトを書くので一杯になるくらいの小さいカードです。</p>
<p>サイズの制限が、大きなアイデアを小さいコンセプトへ分割するのに役立ちます。 小さいコンセプトが、元のアイデアに少しだけ関連する別のアイデアを探すのに 役立ち、思考の幅を広げてくれます。</p>
<p>Luhmann はカードの関連付けのために順序付きのIDを用いましたが、 Org-roamではハイパーリンクを使っています。</p>
<h2 id="Fleeting notes/permanent notes">Fleeting notes/permanent notes</h2>
<p>slip-boxでは、素早くアイデアをメモするための仕組みが必要です。 それが <code>Fleeting notes</code> と呼ばれているものです。</p>
<p>Org-roamでは、org-Capture若しくは Org-roamの日記機能を使うことで実現します。</p>
<p>それと対照的なのが <code>Permanent notes</code> です。 これは名前の通り長く取っておくためのノートで、 literature notesと concept notesに分類されます。</p>
<h3 id="literature notes">literature notes</h3>
<p>本やウェブサイト、論文等への簡素な注釈付きのメモで、 後に参照するために取っておくものです。</p>
<h3 id="concept notes">concept notes</h3>
<p>コンセプトを書くためのもので、自己説明的であり詳細にかかれている必要 があります。</p>
<h1 id="何故org-roamを(私は)取り入れたか">何故org-roamを(私は)取り入れたか</h1>
<p>私は(今は併用していますが)元々完全なるvimmerで、 メモ等には <code>vimwiki</code> や <code>qfix-howm</code> を使っていました。</p>
<p>Org-modeに惹かれてEmacsに来たのですが、 デフォルトのOrg modeでは wiki形式のファイル管理ができません。</p>
<p><code>vimwiki</code> や <code>qfix-howm</code> と同じようにwiki形式でメモが取りたかったので 探した所、</p>
<ul>
<li>Howm (本家)</li>
<li>Org-roam</li>
</ul>
<p>の二つが目につきました。 正直どちらにするかとても悩んでいたのですが、とりあえず Howm系は触った ことがあったので新しい Org-roamを試してみることにしました。</p>
<h1 id="インストール">インストール</h1>
<p>私は <a href="https://emacs-jp.github.io/tips/emacs-in-2020">Emacs-jpの Emacs-in-2020</a> を参考にしてEmacsの環境を作ったので、 インストールには <a href="https://github.com/conao3/leaf.el">conao3/leaf.el</a> を使います。</p>
<h2 id="1. leaf-convert-insert-templateでテンプレ挿入">1. leaf-convert-insert-templateでテンプレ挿入</h2>
<p>leaf-convert も入れているので、 <code>M-x leaf-convert-insert-templace</code> を 用いてテンプレートを作成します。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(leaf org-roam
  :doc &quot;Roam Research replica with Org-mode&quot;
  :req &quot;emacs-26.1&quot; &quot;dash-2.13&quot; &quot;f-0.17.2&quot; &quot;s-1.12.0&quot; &quot;org-9.3&quot; &quot;emacsql-3.0.0&quot; &quot;emacsql-sqlite3-1.0.2&quot;
  :tag &quot;convenience&quot; &quot;roam&quot; &quot;org-mode&quot; &quot;emacs&gt;=26.1&quot;
  :added &quot;2021-05-18&quot;
  :url &quot;https://github.com/org-roam/org-roam&quot;
  :emacs&gt;= 26.1
  :ensure t
  :custom
  (org-roam-directory . (file-truename &quot;~/Dropbox/roam&quot;)))
</code></pre>
</div>
<h2 id="2. org-roam-directoryを設定する">2. org-roam-directoryを設定する</h2>
<p>まず <code>org-roam-directory</code> でファイルを保存する場所を決めます。</p>
<p>Org-roamでは、全てのファイルを一つのディレクトリに保存することを推奨して はいますが、いくつかのディレクトリに分けて保存しても問題はないです。 <code>org-roam-directory</code> 内のディレクトリは再帰的に検索されます。</p>
<p>(<strong>ファイルの階層構造で関係性を作るのではなく、リンクによって関係性を作る ことが推奨されています。</strong>)</p>
<h2 id="3. org-roam-modeをセットする">3. org-roam-modeをセットする</h2>
<p><code>org-roam-mode</code> マイナーモードを起動します。 これにより、キャッシュの作成などのいくつかのhookを設定します。</p>
<p><strong>スタートアップ時( <code>after-init-hook</code> )に起動することが推奨されています</strong></p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(add-hook &#39;after-init-hook &#39;org-roam-mode)
</code></pre>
</div>
<p>が、leaf.el使っているので</p>
<div class="ui segment">
<div class="ui top right attached label">
diff
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff SourceCode"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>     (leaf org-roam</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>:doc &quot;Roam Research replica with Org-mode&quot;</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>:req &quot;emacs-26.1&quot; &quot;dash-2.13&quot; &quot;f-0.17.2&quot; &quot;s-1.12.0&quot; &quot;org-9.3&quot; &quot;emacsql-3.0.0&quot; &quot;emacsql-sqlite3-1.0.2&quot;</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>:tag &quot;convenience&quot; &quot;roam&quot; &quot;org-mode&quot; &quot;emacs&gt;=26.1&quot;</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>:added &quot;2021-05-18&quot;</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>:url &quot;https://github.com/org-roam/org-roam&quot;</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>:emacs&gt;= 26.1</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>:ensure t</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>:custom</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>(org-roam-directory . (file-truename &quot;~/Dropbox/roam&quot;))</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>    +  :hook (after-init-hook . org-roam-mode)</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>)</span></code></pre></div>
</div>
<p>こうします。(参考: <a href="https://github.com/conao3/leaf.el#hook-keyword">leaf.el#hook-keyword</a>) —</p>
<p>何故かよくわからないんですが、Emacsプロセスを切ってもうまく Melpaへの問合せをしてくれないんですよね…なんでなん…</p>
<h1 id="使い方">使い方</h1>
<h2 id="ノートの検索・作成: org-roam-find-file">ノートの検索・作成: org-roam-find-file</h2>
<p><code>org-roam-find-file</code> はroamのファイルを検索するコマンドですが、 存在しないタイトルを入力するとそのファイルを作成します。</p>
<p>ノートを作成する際には <em>org-captureのテンプレートが使用されます</em> 。</p>
<p>ここでファイルを作成した後、2秒間何もしないとキャッシュをアップデート します。これはカスタマイズ可能です。</p>
<h2 id="リンクを作成する: org-roam-insert">リンクを作成する: org-roam-insert</h2>
<p><code>org-roam-insert</code> を実行すると、既存のノートのタイトルの一覧が表示 されます。そこからタイトルを選ぶと、そのファイルへのリンクが現在編集中の ファイルへと挿入されます。</p>
<p>現在存在しないタイトルを指定した場合、そのタイトルで新しいファイルが作成 されます。</p>
<h2 id="バックリンクを表示する: org-roam">バックリンクを表示する: org-roam</h2>
<p><code>org-roam</code> を実行すると、バックリンクを表示するバッファの表示・非表示を 切り換えることができます。</p>
<h1 id="Org-roam特有の記法等">Org-roam特有の記法等</h1>
<p>まだまだ色々あるけど最初の方だけ</p>
<h2 id="タイトルの作成">タイトルの作成</h2>
<p>ノートのタイトルは、 org-roamで検索する対象になります。 一つのファイルに対して複数のタイトルを付けることができ、 これは例えば略称等があるときに便利ですね。</p>
<p>タイトルの指定には幾つかの方法があり <code>org-roam-title-sources</code> で 変更することができます。</p>
<table>
<thead>
<tr class="header">
<th>値</th>
<th>タイトル対象</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>'title</code></td>
<td><code>#+title</code> プロパティの値</td>
</tr>
<tr class="even">
<td><code>'headline</code></td>
<td>一番最初のヘッドライン</td>
</tr>
<tr class="odd">
<td><code>'alias</code></td>
<td><code>#+roam_alias</code> プロパティの値。スペース区切りで、ダブルクォートで括れば複数単語使えます。</td>
</tr>
</tbody>
</table>
<p>タイトルがなかった場合にはファイル名を使用します。</p>
<h2 id="タグの作成(#+roam_tags)">タグの作成(<code>#+roam_tags</code>)</h2>
<p>デフォルトでは <code>#+roam_tags</code> プロパティの値を使用します。</p>
<h2 id="リファレンス(File Refs)">リファレンス(File Refs)</h2>
<p><code>#+roam_key</code> を使用することで、特定のリンク等にノートを関連付けることができます。 例えば私のブログへのノートを書くとすると、</p>
<div class="ui segment">
<div class="ui top right attached label">
org
</div>
<pre class="org SourceCode"><code>#+title: My blog articles
#+roam_key: https://cj-bc.github.io/blog
</code></pre>
</div>
<p>のようになります。</p>
<p>この状態で <a href="https://cj-bc.github.io/blog">https://cj-bc.github.io/blog</a> が別の場所に書かれると、 それもこのノートへのバックリンクとして表示されるようになります。</p>
<h1 id="カスタマイズ">カスタマイズ</h1>
<h2 id="キャッシュのアップデート間隔の調整">キャッシュのアップデート間隔の調整</h2>
<p><code>org-roam-db-update-idle-seconds</code> を調節すると、何秒後にアップデート されるかを調節することができます。 又、 <code>org-roam-db-update-method</code> を <code>'immediate</code> にするとバッファが 保存された直後にアップデートするようになります。</p>
<h2 id="ファイルを作成した後、 C-c C-c で元のバッファに戻る">ファイルを作成した後、 <code>C-c C-c</code> で元のバッファに戻る</h2>
<p>org-captureのシステムを使っているものの、org-roamでは <code>C-c C-c</code> した後はその作成したファイルのバッファを開くようになっています。</p>
<p>これが気に入らない場合、 <code>org-roam-find-file</code> の代わりに <code>org-roam-capture</code> を使うことができます。</p>
]]></summary>
</entry>
<entry>
    <title>HaskellのIxedインスタンスを自作型につける</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-05-14-haskell-make-Ixed-instance.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-05-14-haskell-make-Ixed-instance.html</id>
    <published>2021-05-19T00:00:00Z</published>
    <updated>2021-05-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>HaskellのIxedインスタンスを自作型につける</h1>
  <div class="ui list">
    <div class="item">Posted on May 19, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 19, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;Haskell&#39;." href="/tags/Haskell.html" class="ui tag label">Haskell</a><a title="All pages tagged &#39;Ixed&#39;." href="/tags/Ixed.html" class="ui tag label">Ixed</a>
  
</div>

<h1 id="Ixed とは"><code>Ixed</code> とは</h1>
<p>数学的解説はわかりませんごめんなさい。誰か補足があれば <a href="https://github.com/Cj-bc/blog">blogのレポジトリ</a> にissueでも残してください() Haskellなのでとりあえず hoogleを参照します。 <code>Ixed</code> の定義は以下の通りです</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Ixed</span> m <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  <span class="co">-- |</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  <span class="co">-- /NB:/ Setting the value of this &#39;Traversal&#39; will only set the value in</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>  <span class="co">-- &#39;at&#39; if it is already present.</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>  <span class="co">-- If you want to be able to insert /missing/ values, you want &#39;at&#39;.</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [a,b,c,d] &amp; ix 2 %~ f</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>  <span class="co">-- fromList [a,b,f c,d]</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [a,b,c,d] &amp; ix 2 .~ e</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>  <span class="co">-- fromList [a,b,e,d]</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [a,b,c,d] ^? ix 2</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>  <span class="co">-- Just c</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [] ^? ix 2</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>  <span class="co">-- Nothing</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a><span class="ot">  ix ::</span> <span class="dt">Index</span> m <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> m (<span class="dt">IxValue</span> m)</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a>  default<span class="ot"> ix ::</span> <span class="dt">At</span> m <span class="ot">=&gt;</span> <span class="dt">Index</span> m <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> m (<span class="dt">IxValue</span> m)</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>  ix <span class="ot">=</span> ixAt</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>  <span class="ot">{-# INLINE ix #-}</span></span></code></pre></div>
</div>
<p><code>Ixed</code> は <code>Lens</code> の提供する型の一つで、 <code>Map</code> のような型の値に対して 値を <code>traverse</code> するシンプルな <code>Traversal</code> を提供するものです。</p>
<p>簡潔に言うと、 <strong>リスト等の要素にLensでアクセスできるようにするやつ</strong> みたいなざっくりとした理解をしています。</p>
<p>また、これに関連するオープンな型ファミリーとして <code>Index</code> と <code>IxValue</code> があります</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Index</span> (<span class="ot">s ::</span> <span class="op">*</span>)<span class="ot"> ::</span> <span class="op">*</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="co">-- | This provides a common notion of a value at an index that is shared by both &#39;Ixed&#39; and &#39;At&#39;.</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">IxValue</span> (<span class="ot">m ::</span> <span class="op">*</span>)<span class="ot"> ::</span> <span class="op">*</span></span></code></pre></div>
</div>
<p><code>Ixed</code> において、 <code>Index</code> はインデックスの型、 <code>IxValue</code> はそこに格納されている 値の型です。</p>
<h1 id="作る">作る</h1>
<p>とりあえず作り始めます。</p>
<p>前提として、今回~Ixed~のインスタンスを作るのは以下の型です。 元のファイルは <a href="https://github.com/Cj-bc/playground/blob/0fb982f28f7ab0444ffd2ad59eacc3cd904b99ba/haskell/hit-n-blow/src/HitNBlow/Type.hs#L15-20">Cj-bc/playground – hit-n-blow</a> で使われているものです。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">-- | Represents each Pin</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Pin</span> <span class="ot">=</span> <span class="dt">Red</span> <span class="op">|</span> <span class="dt">Blue</span> <span class="op">|</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">White</span> <span class="op">|</span> <span class="dt">Purple</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co">-- | One Set of Pins that user will guess </span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Lane</span> <span class="ot">=</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div>
</div>
<p><code>Ixed</code> の定義に特に制限がかかれていないので、 <code>ix</code> を定義することにします。 そのために、 <code>ix</code> で使用される <code>Index</code> と <code>IxValue</code> を定義することにします。</p>
<h2 id="Index">Index</h2>
<p><code>Index</code> はあまり説明がありませんが、型の情報からすると恐らく「添字に使う型」 の定義であろうと推測が出来ます。 (名前が <code>Index</code> であること、 <code>ix</code> において最初に取ること等。又、 既にあるインスタンスを確認するのも良い方法だと思います。)</p>
<p><code>Lane</code> において添字は <code>Int</code> です。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Index</span> <span class="dt">Lane</span> <span class="ot">=</span> <span class="dt">Int</span></span></code></pre></div>
</div>
<h2 id="IxValue">IxValue</h2>
<p>同様ですが、今度はそれぞれの中身の型を定義します。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">IxValue</span> <span class="dt">Lane</span> <span class="ot">=</span> <span class="dt">Maybe</span> <span class="dt">Pin</span></span></code></pre></div>
</div>
<h2 id="Ixed">Ixed</h2>
<p><code>Ixed</code> 本体に行きます!!</p>
<p><code>ix</code> の型は</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Index</span> m <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> m (<span class="dt">IxValue</span> m)</span></code></pre></div>
</div>
<p>で、今回は <code>m</code> が <code>Lane</code> なので具体的な型にすると</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span></code></pre></div>
</div>
<p>ということになります。</p>
<p>で、 <code>Lens</code> 少ししか分からんので一つ疑問が浮かびます</p>
<p><strong>&gt;&gt;&gt;&gt;&gt; <code>Traversal'</code> ってナニよ!!!!! &lt;&lt;&lt;&lt;&lt;</strong></p>
<h2 id="Traversal&#39; ってナニよ!">Traversal' ってナニよ!</h2>
<p>はい。名前は知ってるけど使い方良く分からずに放置してた子ですね。 定義によると</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Traversal&#39;</span> s a <span class="ot">=</span> <span class="dt">Traversal</span> s s a a</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Traversal</span> s t a b <span class="ot">=</span> <span class="kw">forall</span> f<span class="op">.</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f t</span></code></pre></div>
</div>
<p>ついでなので <a href="https://hackage.haskell.org/package/lens-5.0.1/docs/Control-Lens-Type.html#t:Traversal"><code>Traversal</code></a> の定義も載せておきました。 <code>Lens</code> と同じように、実体はただの関数ですね。</p>
<p><code>Lens</code> よりも制限の緩い型で <code>Traversable</code> の型関数である <code>traverse</code> の一般化らしいです。 しっかりと理解はしていないが、まぁ型を考えれば作れてしまうのでとりあえずは ふんわりと掴んだ状態で作ってみます。</p>
<p>あ、ちなみに <code>Traversal'</code> は単純に、値の更新等した時に型が変化しないものですね。</p>
<p>参考:</p>
<ul>
<li><a href="https://fumieval.hatenablog.com/entry/2015/07/14/223329">lensパッケージのオプティクス(弱い順) – モナドとわたしとコモナド</a></li>
</ul>
<h2 id="ix を作る"><code>ix</code> を作る</h2>
<p>さて、 <code>Traversal'</code> がわかったので <code>ix</code> を作れ(る気がし)ます。 <code>Traversal'</code> を置き換えてみると:</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Traversa&#39;</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Traversal</span> <span class="dt">Lane</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="kw">forall</span> f<span class="op">.</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span> <span class="ot">-&gt;</span> f (<span class="dt">Maybe</span> <span class="dt">Pin</span>) <span class="ot">-&gt;</span> <span class="dt">Lane</span> <span class="ot">-&gt;</span> f <span class="dt">Lane</span></span></code></pre></div>
</div>
<p>となります(forallの位置は少し自信がないけど多分あってる)</p>
<p><code>Int</code> は元々 <code>Index m</code> だった部分なので、今興味のあるインデックス(に該当する数字)が来るのがわかります。</p>
<p>又、元の <code>Traversal'</code> の部分も要は「中身( <code>Maybe Pin</code> )に作用する関数を受け取り、作用させた 結果を返す」わけなので、その通りに実装します。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Ixed</span> <span class="dt">Lane</span> <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>  ix <span class="dv">1</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> <span class="op">&lt;$&gt;</span> g a <span class="op">&lt;*&gt;</span> b <span class="op">&lt;*&gt;</span> c <span class="op">&lt;*&gt;</span> d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>  ix <span class="dv">2</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a <span class="op">&lt;$&gt;</span> g b <span class="op">&lt;*&gt;</span> c <span class="op">&lt;*&gt;</span> d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>  ix <span class="dv">3</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a b <span class="op">&lt;$&gt;</span> g c <span class="op">&lt;*&gt;</span> d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>  ix <span class="dv">4</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a b c <span class="op">&lt;$&gt;</span> g d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>  ix <span class="dv">5</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a b c d <span class="op">&lt;$&gt;</span> g e</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>  ix _ <span class="ot">=</span> \_ l <span class="ot">-&gt;</span> <span class="fu">pure</span> l</span></code></pre></div>
</div>
<p>多分動いた!!</p>
]]></summary>
</entry>
<entry>
    <title>XMonad.Layoutのリスト</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-05-10-xmonad-list-of-layouts.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-05-10-xmonad-list-of-layouts.html</id>
    <published>2021-05-10T00:00:00Z</published>
    <updated>2021-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>XMonad.Layoutのリスト</h1>
  <div class="ui list">
    <div class="item">Posted on May 10, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 11, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;xmonad&#39;." href="/tags/xmonad.html" class="ui tag label">xmonad</a><a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" class="ui tag label">haskell</a>
  
</div>

<p>xmonadのレイアウトは、 <code>LayoutClass</code> のインスタンスであることが条件になっており、逆にいうと様々な型によって個別に実装されている。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">LayoutClass</span><span class="ot"> ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Show</span> (layout a) <span class="ot">=&gt;</span> <span class="dt">LayoutClass</span> layout a <span class="kw">where</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>      <span class="op">...</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">LayoutClass</span> <span class="dt">Tall</span> a <span class="kw">where</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>      <span class="op">...</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">LayoutClass</span> <span class="dt">Full</span> a</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="op">...</span></span></code></pre></div>
</div>
<p>これはつまり、以下のようなことが出来ないことになる</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">alist ::</span> <span class="dt">LayoutClass</span> layout a <span class="ot">=&gt;</span> [layout a]</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>alist <span class="ot">=</span> [<span class="dt">Full</span>, <span class="dt">Tall</span> def def def]</span></code></pre></div>
</div>
<p>これは以下のようなエラーになる</p>
<div class="ui segment">
<div class="ui top right attached label">
example
</div>
<pre class="example SourceCode"><code>• Couldn&#39;t match type ‘layout’ with ‘Full’
      ‘layout’ is a rigid type variable bound by
        the type signature for:
          alist :: forall (layout :: * -&gt; *) a.
                   LayoutClass layout a =&gt;
                   [layout a]
        at /tmp/vpWQTsV/198/xmonad.hs:125:1-43
      Expected type: layout a
        Actual type: Full a
    • In the expression: Full
      In the expression: [Full, Tall def def def]
      In an equation for ‘alist’: alist = [Full, Tall def def def]
    • Relevant bindings include
        alist :: [layout a] (bound at /tmp/vpWQTsV/198/xmonad.hs:126:1)
    |
126 | alist = [Full, Tall def def def]
    |          ^^^^
</code></pre>
</div>
<p>私の理解が正しければ、「 <code>Full</code> の型と <code>Tall</code> の型ちゃうやんけ!？？」ってことかなと。 正直よくわからん</p>
<p><code>Rank2Types</code> 使ってみたけど上手く動かず</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ot">alist ::</span> [<span class="kw">forall</span> l a<span class="op">.</span> (<span class="dt">LayoutClass</span> l a) <span class="ot">=&gt;</span> l a]</span></code></pre></div>
</div>
<h2 id="解法">解法</h2>
<p><a href="https://hackage.haskell.org/package/xmonad-0.15/docs/src/XMonad.Core.html#Layout">XMonad.Core.Layout</a> を使う。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">alist ::</span> [<span class="dt">Layout</span> <span class="dt">Window</span>]</span></code></pre></div>
</div>
<p>なら大丈夫</p>
<p>参考までに</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Layout</span> a <span class="ot">=</span> <span class="kw">forall</span> l<span class="op">.</span> (<span class="dt">LayoutClass</span> l a, <span class="dt">Read</span> (l a)) <span class="ot">=&gt;</span> <span class="dt">Layout</span> (l a)</span></code></pre></div>
</div>
]]></summary>
</entry>
<entry>
    <title>xmonadにstackを使う</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-05-04-xmonad-use-stack-for-compile.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-05-04-xmonad-use-stack-for-compile.html</id>
    <published>2021-05-04T00:00:00Z</published>
    <updated>2021-05-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>xmonadにstackを使う</h1>
  <div class="ui list">
    <div class="item">Posted on May  4, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 11, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;xmonad&#39;." href="/tags/xmonad.html" class="ui tag label">xmonad</a><a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" class="ui tag label">haskell</a><a title="All pages tagged &#39;stack&#39;." href="/tags/stack.html" class="ui tag label">stack</a><a title="All pages tagged &#39;linux&#39;." href="/tags/linux.html" class="ui tag label">linux</a>
  
</div>

<p>xmonad、デフォルトだと新しい機能を自作したりしようとするとシステムグローバルに突っ込む必要が出てきます。 それは面倒だし、管理が煩雑になるのでそもそもstackを使用できるようにします。</p>
<h1 id="Xmonadをstackでコンパイルできるようにする">Xmonadをstackでコンパイルできるようにする</h1>
<h2 id="Xmonadのコンパイル方法を指定する方法">Xmonadのコンパイル方法を指定する方法</h2>
<p>xmonadの recompileは、 <a href="https://hackage.haskell.org/package/xmonad-0.15/docs/src/XMonad.Core.html#recompile">XMonad.Core.recompile</a> によって行われています。 そして内部を読んでみると、 <code class="sourceCode haskell">cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;build&quot;</span></code> が存在すればそれを読むということが分かります。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ot">recompile ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> m <span class="dt">Bool</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>recompile force <span class="ot">=</span> io <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    cfgdir  <span class="ot">&lt;-</span> getXMonadDir</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    datadir <span class="ot">&lt;-</span> getXMonadDataDir</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="kw">let</span> binn <span class="ot">=</span> <span class="st">&quot;xmonad-&quot;</span><span class="op">++</span>arch<span class="op">++</span><span class="st">&quot;-&quot;</span><span class="op">++</span>os</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>        bin  <span class="ot">=</span> datadir <span class="op">&lt;/&gt;</span> binn</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>        err  <span class="ot">=</span> datadir <span class="op">&lt;/&gt;</span> <span class="st">&quot;xmonad.errors&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>        src  <span class="ot">=</span> cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;xmonad.hs&quot;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>        lib  <span class="ot">=</span> cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;lib&quot;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>        buildscript <span class="ot">=</span> cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;build&quot;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>    <span class="co">-- ...</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>    useBuildscript <span class="ot">&lt;-</span> <span class="kw">do</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>      exists <span class="ot">&lt;-</span> doesFileExist buildscript</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>      <span class="kw">if</span> exists</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>        <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>          isExe <span class="ot">&lt;-</span> isExecutable buildscript</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a>          <span class="kw">if</span> isExe</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a>            <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>              trace <span class="op">$</span> <span class="st">&quot;XMonad will use build script at &quot;</span> <span class="op">++</span> <span class="fu">show</span> buildscript <span class="op">++</span> <span class="st">&quot; to recompile.&quot;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>              <span class="fu">return</span> <span class="dt">True</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true"></a>            <span class="kw">else</span> <span class="kw">do</span></span></code></pre></div>
</div>
<p><code>cfgdir</code> は</p>
<ol>
<li><code>$XMONAD_CONFIG_DIR</code></li>
<li><code>~/.xmonad</code></li>
<li><code>$XDG_CONFIG_HOME/xmonad</code></li>
</ol>
<p>のいずれかになります。</p>
<p>今回は、変更点をあまり作らないためにとりあえず <code>~/.xmonad</code> にしようと思います(そのうち <code>XDG_CONFIG_HOME</code> 以下に移したい)</p>
<h2 id="build スクリプトを書く"><code>build</code> スクリプトを書く</h2>
<p>コマンドを使用することになるので、shellscriptで書くのが妥当かなと思います。 <code>build</code> スクリプトは以下のように呼ばれます。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a> <span class="co">-- ...</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a> <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>   <span class="co">-- temporarily disable SIGCHLD ignoring:</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>   uninstallSignalHandlers</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>   status <span class="ot">&lt;-</span> bracket (openFile err <span class="dt">WriteMode</span>) hClose <span class="op">$</span> \errHandle <span class="ot">-&gt;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>waitForProcess <span class="op">=&lt;&lt;</span> <span class="kw">if</span> useBuildscript</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>     <span class="kw">then</span> compileScript bin cfgdir buildscript errHandle</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>     <span class="kw">else</span> compileGHC bin cfgdir errHandle</span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>compileScript bin dir script errHandle <span class="ot">=</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>        runProcess script [bin] (<span class="dt">Just</span> dir) <span class="dt">Nothing</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span> (<span class="dt">Just</span> errHandle)</span></code></pre></div>
</div>
<p><code class="sourceCode haskell">runProcess</code> は、 <a href="https://hackage.haskell.org/package/process-1.6.11.0/docs/System-Process.html#v:runProcess">System.Process.runProcess</a> であり、上記の使い方だと <code>script</code> というプログラムに <code>bin</code> を引数として与え、 <code>dir</code> をワーキングディレクトリとしてから実行することになります。</p>
]]></summary>
</entry>
<entry>
    <title>ewwでスタイリッシュなスライダーを使う</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-04-26-eww-linux-minimal-design-slider.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-04-26-eww-linux-minimal-design-slider.html</id>
    <published>2021-04-26T00:00:00Z</published>
    <updated>2021-04-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>ewwでスタイリッシュなスライダーを使う</h1>
  <div class="ui list">
    <div class="item">Posted on April 26, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 11, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;eww&#39;." href="/tags/eww.html" class="ui tag label">eww</a><a title="All pages tagged &#39;scss&#39;." href="/tags/scss.html" class="ui tag label">scss</a><a title="All pages tagged &#39;linux&#39;." href="/tags/linux.html" class="ui tag label">linux</a>
  
</div>

<p><a href="https://github.com/Axarva/dotfiles-2.0">Axarva/dotfiles-2.0</a> に触発されて、 <a href="https://github.com/elkowar/eww">elkowar/eww</a> を使い始めました。(Emacsのewwではない)</p>
<p>キーボードドリブンな設計にしたかったので、axarvaの設定を参考にしながら自分で書いていました。 でも、デフォルトでは以下のような形に。</p>
<p><img src="file:///images/cropped-slider-without-scss.png" class="ui rounded image" /></p>
<p>本当は以下のようになってほしい。特に <strong>スライダーノブを消したい</strong> 。</p>
<p><img src="file:///images/cropped-slider-with-scss.png" class="ui rounded image" /></p>
<p>色々と設定を写したのですが上手くいかなかったけど、</p>
<div class="ui segment">
<div class="ui top right attached label">
css
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode css SourceCode"><code class="sourceCode css"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="op">*</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  <span class="kw">all</span>: <span class="bu">unset</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>}</span></code></pre></div>
</div>
<p>を設定したら出来た!!</p>
<p>ビフォー:</p>
<p><img src="file:///images/slider-without-scss.png" class="ui rounded image" /></p>
<p>アフター:</p>
<p><img src="file:///images/slider-with-scss.png" class="ui rounded image" /></p>
]]></summary>
</entry>

</feed>
