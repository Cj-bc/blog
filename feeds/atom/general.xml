<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/general.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/general.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2021-07-24T00:00:00Z</updated>
    <entry>
    <title>2021-07-24-diary-allelosphere-vol1</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-07-24-diary-allelosphere-vol1.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-07-24-diary-allelosphere-vol1.html</id>
    <published>2021-07-24T00:00:00Z</published>
    <updated>2021-07-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>2021-07-24-diary-allelosphere-vol1</h1>
  <div class="ui list">
    <div class="item">Posted on July 24, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on July 24, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<h1>ALLELOSPHERE Reverse Real v1</h1>
<p>や~~~最初はみあちゃんのあちゃんだけ見て流し見しようかと思ってたけど みんな良だったので通しで見てしまった。</p>
<p>今見返してて気が付いたけど、ライブ中殆どはライブ側にコメしてるのでTwitterに 記録があまりない…</p>
<h2>各回の感想</h2>
<h3><a href="https://twitter.com/Raiaxxxia">来栖らいあ</a></h3>
<p>2曲、ファンの方と作ったオリ曲？とその次にリバリアで作った曲のお披露目!</p>
<p>一曲目は電車の中で聞いていたので実はあまり聞けてない…かわいかったのだけ 覚えている。</p>
<p>二曲目、 Dear Darlin(?) はASMRが入ってたりして結構ぞくっとした… 車内で聞いてたんですがこう…非日常感やば… 曲としてここまでASMR入れ込んでたの聞いたことなかったのでそれだけですごく良でした。</p>
<h3><a href="https://twitter.com/reco_v">織田りこる</a></h3>
<p>Live2Dでの参加! 大体が3Dになってると思ってたのでびっくりした。 でも、中々3Dだと(今回は)実現しにくい演出だとかが沢山で良きでした。</p>
<p>かわいい+ウサギさん+桜吹雪っていうのが みあのあ(特にのあ)に似たものを感じてちょっと嬉しみがあった。</p>
<h3><a href="https://twitter.com/asuka_shovel">火渡飛鳥</a></h3>
<p>声優の卵とのこと。 今迄の二人と打ってかわって渋い、力強い声での歌唱でした。 かっこよい。 盛り上ってるなぁぁぁ!!!</p>
<h3><a href="https://twitter.com/honey_kotoko">琴子</a></h3>
<p>大分の御当地VTuber。 MVとして作り上げられており、映像として凄い。 大分の有名なものとかが沢山入ってたらしいけど私大分分からん+移動中で 画面があまり見れなかったのが残念orz</p>
<p>とても綺麗で「大和撫子」という雰囲気の映像でした。</p>
<h3><a href="https://twitter.com/yozakura_mia">夜桜みあ</a></h3>
<p>我らが!!!!!!みあちゃん!!!!!!!!!!!</p>
<p>フルトラでは動けず(多分)facerigとかを使ってたと思うけど、 動いているみあちゃんが見られただけでも嬉しかったです。 「アリ~~ナ~~!!」ってやりたがってるのがかわいい。 「技術ってしゅげ~~~」じゃないんだよ貴女のかわいさもしゅげ~~~だよ。 技術ってほんとしゅげぇ…</p>
<p>blooming magicはコール&amp;レスポンスもある曲で、みあちゃんが コール&amp;レスポンス講座してくれた。そのお陰でみんなやってくれてありがてぇ… 黒猫さん以外の方もみんなコール&amp;レスポンスしてくれていて、めっちゃ 会場全体で盛り上りました。とても良い。</p>
<p>ただね!!!キーボードで打つには間隔が短いのよねあのコール!!!!!! 全然追いつきませんでした。 追いつかなかったけど楽しかった。 声でコールしたらそのまま届いてくれませんかね？？ダメ？？？はい…</p>
<p>夜桜みあのかわいさが世に知れちまったな~~~これはみんな 見るしかないな~~ほんと。</p>
<p>…最近の切り抜き作っておけばよかったなって思ってます!!うん!!!! 絶対そうするべきだったねぇぇぇぇ!!!!!</p>
<p>ちなみにさらっと「ありがと~!」とか言ってた気がしますが ありがとうはこっちなんだよなありがとぉぉぉぉぉぉあのさぁぁぁあぁぁ 存在してくれててありがとうなぁぁぁぁぁぁ</p>
<p>すき</p>
<h3><a href="https://twitter.com/ringo_0_0_5">九条林檎</a></h3>
<p>林檎さまだねぇ。うん。 流石の林檎様、というステージでした。</p>
<p>衣装も麗しくかつかっこ良い。 セルフカメラらしいし、それでいて歌も踊りもしっかりとこなす。 流石なんだよな…</p>
<p>ステージで林檎様が出る度にコメ欄が「麗しい…」「征服して!」になるのが とても好きです。こんなに本人の雰囲気がにじみ出るコメ欄他にあるだろうか。 <del>あ、名取のとことかはある意味滲み出ていますg</del></p>
<p>かっこよい+麗しいが本当に素敵でした。</p>
<h3><a href="https://twitter.com/misyasamadayo">魅紗</a></h3>
<p>一目見てわかるこのたたずまい。 実は前回のオリ曲コンピの時に知ってそこからフォローしておりましたが、 相変わらず歌が綺麗。声の出し方とか関係なしに凄く綺麗。</p>
<p>曲も御姿も美しくて最高でした。</p>
<h3><a href="https://twitter.com/yozakura_noa">夜桜のあ</a></h3>
<p>ア゛イ゛ド゛ル゛!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p>
<p>今日ののあちゃんはガチでアイドルでした。 導入のカメラワーク・歓声からのパーティクルの演出とても綺麗でした。</p>
<p>サビ以外の振り付けは自分で考えたって言ってたけどかわいかったでし… りんりんちゃん作の衣装も素敵でした。</p>
<h3><a href="https://twitter.com/0w0_YUZU">柚月ゆず</a></h3>
<p>Live2Dでの参戦…と思いきや超綺麗な3D!! 多分MMD…? 沢山動いていてとても楽しい!</p>
<p>衣装も、姿もステージも演出も綺麗でした。</p>
<p>海の上のステージ、というのがアイマリンプロジェクトのMarine Dreamin'と 重なって懐しい気持ちになりました。 私の3DCGとの馴初めがMarine Dreamin'なので…</p>
<p>綺麗なステージを見て、「あぁ我もCGやりたいな…」となりました。 声も素敵でした。</p>
<hr />
<p>あの、ここらへんからライブ視聴後数時間経って書いているので段々と内容を忘れています</p>
<hr />
<h3><a href="https://twitter.com/V01Yume">V01 YUME</a></h3>
<p>声が綺麗… お目目も綺麗…YU"ME"だけに…</p>
<p>はい。</p>
<p>くっ…?って体かしげてるのがとてもかわいかった。</p>
<h3><a href="https://twitter.com/mewmewsugar">幸糖ミュウミュウ</a></h3>
<p>我らがA2Pのミュウミュウちゃん!! 休止中だったのを途中で思い出しましたが、そんな中の出演って中々エモでは…</p>
<p>私はそこまでガッツリ追ってなかったけれど、待ち侘びてたファンも 多かったろうなぁという気持ちで見ていました。</p>
<p>振り付けがかわいい!!とてもかわいい!!</p>
<h3><a href="https://twitter.com/Noakun_RET">御兎木乃天</a></h3>
<p>動画での参戦。 MV調に仕上がっていて、童謡？民謡？的な曲と合う世界観で引き込まれました。 すっ…と聞き入っておったよ…</p>
<h3><a href="https://twitter.com/Sakura_Maychan">サクラメイ</a></h3>
<p>大トリ! 最初っからめちゃくちゃ元気な声・元気な動きをしていて、 一気にテンションが上がりました。 先程のしんみりさは何処へ…</p>
<p>歌っている間もずっと元気で見ていて元気が貰えるタイプの子でした。ありがたぅ</p>
]]></summary>
</entry>
<entry>
    <title>Org roam使い始めた</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-05-19-emacs-org-roam-setup.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-05-19-emacs-org-roam-setup.html</id>
    <published>2021-05-19T00:00:00Z</published>
    <updated>2021-05-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>Org roam使い始めた</h1>
  <div class="ui list">
    <div class="item">Posted on May 19, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 19, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;Emacs&#39;." href="/tags/Emacs.html" class="ui tag label">Emacs</a><a title="All pages tagged &#39;org-roam&#39;." href="/tags/org-roam.html" class="ui tag label">org-roam</a><a title="All pages tagged &#39;org mode&#39;." href="/tags/org%20mode.html" class="ui tag label">org mode</a><a title="All pages tagged &#39;note&#39;." href="/tags/note.html" class="ui tag label">note</a>
  
</div>

<p>この記事は、Org-roamのinfoページを読んで内容を纏めています。 詳しくは原文をあたってください。</p>
<h1>Org-roamとは</h1>
<p>Org-roamは、 <a href="https://roamresearch.com/">Roam Resarch</a> からいくつかのアイデアを実装したものです。</p>
<p>Org modeで、階層構造でないノートを取るのをサポートします。 wikiのように書く事ができます。</p>
<h2>Slip-box (Zettelkasten) メゾッドとは</h2>
<p>(infoにあったものを軽く纏め、翻訳は雑なので原文を読むのを推奨)</p>
<p>ドイツの社会学者 Niklas Luhmann によって作成されました。 Luhmannの Slip-boxは、小さいカードの入った箱でした。 一つのコンセプトを書くので一杯になるくらいの小さいカードです。</p>
<p>サイズの制限が、大きなアイデアを小さいコンセプトへ分割するのに役立ちます。 小さいコンセプトが、元のアイデアに少しだけ関連する別のアイデアを探すのに 役立ち、思考の幅を広げてくれます。</p>
<p>Luhmann はカードの関連付けのために順序付きのIDを用いましたが、 Org-roamではハイパーリンクを使っています。</p>
<h2>Fleeting notes/permanent notes</h2>
<p>slip-boxでは、素早くアイデアをメモするための仕組みが必要です。 それが <code>Fleeting notes</code> と呼ばれているものです。</p>
<p>Org-roamでは、org-Capture若しくは Org-roamの日記機能を使うことで実現します。</p>
<p>それと対照的なのが <code>Permanent notes</code> です。 これは名前の通り長く取っておくためのノートで、 literature notesと concept notesに分類されます。</p>
<h3>literature notes</h3>
<p>本やウェブサイト、論文等への簡素な注釈付きのメモで、 後に参照するために取っておくものです。</p>
<h3>concept notes</h3>
<p>コンセプトを書くためのもので、自己説明的であり詳細にかかれている必要 があります。</p>
<h1>何故org-roamを(私は)取り入れたか</h1>
<p>私は(今は併用していますが)元々完全なるvimmerで、 メモ等には <code>vimwiki</code> や <code>qfix-howm</code> を使っていました。</p>
<p>Org-modeに惹かれてEmacsに来たのですが、 デフォルトのOrg modeでは wiki形式のファイル管理ができません。</p>
<p><code>vimwiki</code> や <code>qfix-howm</code> と同じようにwiki形式でメモが取りたかったので 探した所、</p>
<ul>
<li>Howm (本家)</li>
<li>Org-roam</li>
</ul>
<p>の二つが目につきました。 正直どちらにするかとても悩んでいたのですが、とりあえず Howm系は触った ことがあったので新しい Org-roamを試してみることにしました。</p>
<h1>インストール</h1>
<p>私は <a href="https://emacs-jp.github.io/tips/emacs-in-2020">Emacs-jpの Emacs-in-2020</a> を参考にしてEmacsの環境を作ったので、 インストールには <a href="https://github.com/conao3/leaf.el">conao3/leaf.el</a> を使います。</p>
<h2>1. leaf-convert-insert-templateでテンプレ挿入</h2>
<p>leaf-convert も入れているので、 <code>M-x leaf-convert-insert-templace</code> を 用いてテンプレートを作成します。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(leaf org-roam
  :doc &quot;Roam Research replica with Org-mode&quot;
  :req &quot;emacs-26.1&quot; &quot;dash-2.13&quot; &quot;f-0.17.2&quot; &quot;s-1.12.0&quot; &quot;org-9.3&quot; &quot;emacsql-3.0.0&quot; &quot;emacsql-sqlite3-1.0.2&quot;
  :tag &quot;convenience&quot; &quot;roam&quot; &quot;org-mode&quot; &quot;emacs&gt;=26.1&quot;
  :added &quot;2021-05-18&quot;
  :url &quot;https://github.com/org-roam/org-roam&quot;
  :emacs&gt;= 26.1
  :ensure t
  :custom
  (org-roam-directory . (file-truename &quot;~/Dropbox/roam&quot;)))
</code></pre>
</div>
<h2>2. org-roam-directoryを設定する</h2>
<p>まず <code>org-roam-directory</code> でファイルを保存する場所を決めます。</p>
<p>Org-roamでは、全てのファイルを一つのディレクトリに保存することを推奨して はいますが、いくつかのディレクトリに分けて保存しても問題はないです。 <code>org-roam-directory</code> 内のディレクトリは再帰的に検索されます。</p>
<p>(<strong>ファイルの階層構造で関係性を作るのではなく、リンクによって関係性を作る ことが推奨されています。</strong>)</p>
<h2>3. org-roam-modeをセットする</h2>
<p><code>org-roam-mode</code> マイナーモードを起動します。 これにより、キャッシュの作成などのいくつかのhookを設定します。</p>
<p><strong>スタートアップ時( <code>after-init-hook</code> )に起動することが推奨されています</strong></p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(add-hook &#39;after-init-hook &#39;org-roam-mode)
</code></pre>
</div>
<p>が、leaf.el使っているので</p>
<div class="ui segment">
<div class="ui top right attached label">
diff
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff SourceCode"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>     (leaf org-roam</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>:doc &quot;Roam Research replica with Org-mode&quot;</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>:req &quot;emacs-26.1&quot; &quot;dash-2.13&quot; &quot;f-0.17.2&quot; &quot;s-1.12.0&quot; &quot;org-9.3&quot; &quot;emacsql-3.0.0&quot; &quot;emacsql-sqlite3-1.0.2&quot;</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>:tag &quot;convenience&quot; &quot;roam&quot; &quot;org-mode&quot; &quot;emacs&gt;=26.1&quot;</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>:added &quot;2021-05-18&quot;</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>:url &quot;https://github.com/org-roam/org-roam&quot;</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>:emacs&gt;= 26.1</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>:ensure t</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>:custom</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>(org-roam-directory . (file-truename &quot;~/Dropbox/roam&quot;))</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>    +  :hook (after-init-hook . org-roam-mode)</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>)</span></code></pre></div>
</div>
<p>こうします。(参考: <a href="https://github.com/conao3/leaf.el#hook-keyword">leaf.el#hook-keyword</a>) —</p>
<p>何故かよくわからないんですが、Emacsプロセスを切ってもうまく Melpaへの問合せをしてくれないんですよね…なんでなん…</p>
<h1>使い方</h1>
<h2>ノートの検索・作成: org-roam-find-file</h2>
<p><code>org-roam-find-file</code> はroamのファイルを検索するコマンドですが、 存在しないタイトルを入力するとそのファイルを作成します。</p>
<p>ノートを作成する際には <em>org-captureのテンプレートが使用されます</em> 。</p>
<p>ここでファイルを作成した後、2秒間何もしないとキャッシュをアップデート します。これはカスタマイズ可能です。</p>
<h2>リンクを作成する: org-roam-insert</h2>
<p><code>org-roam-insert</code> を実行すると、既存のノートのタイトルの一覧が表示 されます。そこからタイトルを選ぶと、そのファイルへのリンクが現在編集中の ファイルへと挿入されます。</p>
<p>現在存在しないタイトルを指定した場合、そのタイトルで新しいファイルが作成 されます。</p>
<h2>バックリンクを表示する: org-roam</h2>
<p><code>org-roam</code> を実行すると、バックリンクを表示するバッファの表示・非表示を 切り換えることができます。</p>
<h1>Org-roam特有の記法等</h1>
<p>まだまだ色々あるけど最初の方だけ</p>
<h2>タイトルの作成</h2>
<p>ノートのタイトルは、 org-roamで検索する対象になります。 一つのファイルに対して複数のタイトルを付けることができ、 これは例えば略称等があるときに便利ですね。</p>
<p>タイトルの指定には幾つかの方法があり <code>org-roam-title-sources</code> で 変更することができます。</p>
<table>
<thead>
<tr class="header">
<th>値</th>
<th>タイトル対象</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>'title</code></td>
<td><code>#+title</code> プロパティの値</td>
</tr>
<tr class="even">
<td><code>'headline</code></td>
<td>一番最初のヘッドライン</td>
</tr>
<tr class="odd">
<td><code>'alias</code></td>
<td><code>#+roam_alias</code> プロパティの値。スペース区切りで、ダブルクォートで括れば複数単語使えます。</td>
</tr>
</tbody>
</table>
<p>タイトルがなかった場合にはファイル名を使用します。</p>
<h2>タグの作成(<code>#+roam_tags</code>)</h2>
<p>デフォルトでは <code>#+roam_tags</code> プロパティの値を使用します。</p>
<h2>リファレンス(File Refs)</h2>
<p><code>#+roam_key</code> を使用することで、特定のリンク等にノートを関連付けることができます。 例えば私のブログへのノートを書くとすると、</p>
<div class="ui segment">
<div class="ui top right attached label">
org
</div>
<pre class="org SourceCode"><code>#+title: My blog articles
#+roam_key: https://cj-bc.github.io/blog
</code></pre>
</div>
<p>のようになります。</p>
<p>この状態で <a href="https://cj-bc.github.io/blog">https://cj-bc.github.io/blog</a> が別の場所に書かれると、 それもこのノートへのバックリンクとして表示されるようになります。</p>
<h1>カスタマイズ</h1>
<h2>キャッシュのアップデート間隔の調整</h2>
<p><code>org-roam-db-update-idle-seconds</code> を調節すると、何秒後にアップデート されるかを調節することができます。 又、 <code>org-roam-db-update-method</code> を <code>'immediate</code> にするとバッファが 保存された直後にアップデートするようになります。</p>
<h2>ファイルを作成した後、 <code>C-c C-c</code> で元のバッファに戻る</h2>
<p>org-captureのシステムを使っているものの、org-roamでは <code>C-c C-c</code> した後はその作成したファイルのバッファを開くようになっています。</p>
<p>これが気に入らない場合、 <code>org-roam-find-file</code> の代わりに <code>org-roam-capture</code> を使うことができます。</p>
]]></summary>
</entry>
<entry>
    <title>HaskellのIxedインスタンスを自作型につける</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-05-14-haskell-make-Ixed-instance.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-05-14-haskell-make-Ixed-instance.html</id>
    <published>2021-05-19T00:00:00Z</published>
    <updated>2021-05-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>HaskellのIxedインスタンスを自作型につける</h1>
  <div class="ui list">
    <div class="item">Posted on May 19, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 19, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;Haskell&#39;." href="/tags/Haskell.html" class="ui tag label">Haskell</a><a title="All pages tagged &#39;Ixed&#39;." href="/tags/Ixed.html" class="ui tag label">Ixed</a>
  
</div>

<h1><code>Ixed</code> とは</h1>
<p>数学的解説はわかりませんごめんなさい。誰か補足があれば <a href="https://github.com/Cj-bc/blog">blogのレポジトリ</a> にissueでも残してください() Haskellなのでとりあえず hoogleを参照します。 <code>Ixed</code> の定義は以下の通りです</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Ixed</span> m <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  <span class="co">-- |</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  <span class="co">-- /NB:/ Setting the value of this &#39;Traversal&#39; will only set the value in</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>  <span class="co">-- &#39;at&#39; if it is already present.</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>  <span class="co">-- If you want to be able to insert /missing/ values, you want &#39;at&#39;.</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [a,b,c,d] &amp; ix 2 %~ f</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>  <span class="co">-- fromList [a,b,f c,d]</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [a,b,c,d] &amp; ix 2 .~ e</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>  <span class="co">-- fromList [a,b,e,d]</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [a,b,c,d] ^? ix 2</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>  <span class="co">-- Just c</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [] ^? ix 2</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>  <span class="co">-- Nothing</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a><span class="ot">  ix ::</span> <span class="dt">Index</span> m <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> m (<span class="dt">IxValue</span> m)</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a>  default<span class="ot"> ix ::</span> <span class="dt">At</span> m <span class="ot">=&gt;</span> <span class="dt">Index</span> m <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> m (<span class="dt">IxValue</span> m)</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>  ix <span class="ot">=</span> ixAt</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>  <span class="ot">{-# INLINE ix #-}</span></span></code></pre></div>
</div>
<p><code>Ixed</code> は <code>Lens</code> の提供する型の一つで、 <code>Map</code> のような型の値に対して 値を <code>traverse</code> するシンプルな <code>Traversal</code> を提供するものです。</p>
<p>簡潔に言うと、 <strong>リスト等の要素にLensでアクセスできるようにするやつ</strong> みたいなざっくりとした理解をしています。</p>
<p>また、これに関連するオープンな型ファミリーとして <code>Index</code> と <code>IxValue</code> があります</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Index</span> (<span class="ot">s ::</span> <span class="op">*</span>)<span class="ot"> ::</span> <span class="op">*</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="co">-- | This provides a common notion of a value at an index that is shared by both &#39;Ixed&#39; and &#39;At&#39;.</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">IxValue</span> (<span class="ot">m ::</span> <span class="op">*</span>)<span class="ot"> ::</span> <span class="op">*</span></span></code></pre></div>
</div>
<p><code>Ixed</code> において、 <code>Index</code> はインデックスの型、 <code>IxValue</code> はそこに格納されている 値の型です。</p>
<h1>作る</h1>
<p>とりあえず作り始めます。</p>
<p>前提として、今回~Ixed~のインスタンスを作るのは以下の型です。 元のファイルは <a href="https://github.com/Cj-bc/playground/blob/0fb982f28f7ab0444ffd2ad59eacc3cd904b99ba/haskell/hit-n-blow/src/HitNBlow/Type.hs#L15-20">Cj-bc/playground – hit-n-blow</a> で使われているものです。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">-- | Represents each Pin</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Pin</span> <span class="ot">=</span> <span class="dt">Red</span> <span class="op">|</span> <span class="dt">Blue</span> <span class="op">|</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">White</span> <span class="op">|</span> <span class="dt">Purple</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co">-- | One Set of Pins that user will guess </span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Lane</span> <span class="ot">=</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div>
</div>
<p><code>Ixed</code> の定義に特に制限がかかれていないので、 <code>ix</code> を定義することにします。 そのために、 <code>ix</code> で使用される <code>Index</code> と <code>IxValue</code> を定義することにします。</p>
<h2>Index</h2>
<p><code>Index</code> はあまり説明がありませんが、型の情報からすると恐らく「添字に使う型」 の定義であろうと推測が出来ます。 (名前が <code>Index</code> であること、 <code>ix</code> において最初に取ること等。又、 既にあるインスタンスを確認するのも良い方法だと思います。)</p>
<p><code>Lane</code> において添字は <code>Int</code> です。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Index</span> <span class="dt">Lane</span> <span class="ot">=</span> <span class="dt">Int</span></span></code></pre></div>
</div>
<h2>IxValue</h2>
<p>同様ですが、今度はそれぞれの中身の型を定義します。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">IxValue</span> <span class="dt">Lane</span> <span class="ot">=</span> <span class="dt">Maybe</span> <span class="dt">Pin</span></span></code></pre></div>
</div>
<h2>Ixed</h2>
<p><code>Ixed</code> 本体に行きます!!</p>
<p><code>ix</code> の型は</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Index</span> m <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> m (<span class="dt">IxValue</span> m)</span></code></pre></div>
</div>
<p>で、今回は <code>m</code> が <code>Lane</code> なので具体的な型にすると</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span></code></pre></div>
</div>
<p>ということになります。</p>
<p>で、 <code>Lens</code> 少ししか分からんので一つ疑問が浮かびます</p>
<p><strong>&gt;&gt;&gt;&gt;&gt; <code>Traversal'</code> ってナニよ!!!!! &lt;&lt;&lt;&lt;&lt;</strong></p>
<h2>Traversal' ってナニよ!</h2>
<p>はい。名前は知ってるけど使い方良く分からずに放置してた子ですね。 定義によると</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Traversal&#39;</span> s a <span class="ot">=</span> <span class="dt">Traversal</span> s s a a</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Traversal</span> s t a b <span class="ot">=</span> <span class="kw">forall</span> f<span class="op">.</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f t</span></code></pre></div>
</div>
<p>ついでなので <a href="https://hackage.haskell.org/package/lens-5.0.1/docs/Control-Lens-Type.html#t:Traversal"><code>Traversal</code></a> の定義も載せておきました。 <code>Lens</code> と同じように、実体はただの関数ですね。</p>
<p><code>Lens</code> よりも制限の緩い型で <code>Traversable</code> の型関数である <code>traverse</code> の一般化らしいです。 しっかりと理解はしていないが、まぁ型を考えれば作れてしまうのでとりあえずは ふんわりと掴んだ状態で作ってみます。</p>
<p>あ、ちなみに <code>Traversal'</code> は単純に、値の更新等した時に型が変化しないものですね。</p>
<p>参考:</p>
<ul>
<li><a href="https://fumieval.hatenablog.com/entry/2015/07/14/223329">lensパッケージのオプティクス(弱い順) – モナドとわたしとコモナド</a></li>
</ul>
<h2><code>ix</code> を作る</h2>
<p>さて、 <code>Traversal'</code> がわかったので <code>ix</code> を作れ(る気がし)ます。 <code>Traversal'</code> を置き換えてみると:</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Traversa&#39;</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Traversal</span> <span class="dt">Lane</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="kw">forall</span> f<span class="op">.</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span> <span class="ot">-&gt;</span> f (<span class="dt">Maybe</span> <span class="dt">Pin</span>) <span class="ot">-&gt;</span> <span class="dt">Lane</span> <span class="ot">-&gt;</span> f <span class="dt">Lane</span></span></code></pre></div>
</div>
<p>となります(forallの位置は少し自信がないけど多分あってる)</p>
<p><code>Int</code> は元々 <code>Index m</code> だった部分なので、今興味のあるインデックス(に該当する数字)が来るのがわかります。</p>
<p>又、元の <code>Traversal'</code> の部分も要は「中身( <code>Maybe Pin</code> )に作用する関数を受け取り、作用させた 結果を返す」わけなので、その通りに実装します。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Ixed</span> <span class="dt">Lane</span> <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>  ix <span class="dv">1</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> <span class="op">&lt;$&gt;</span> g a <span class="op">&lt;*&gt;</span> b <span class="op">&lt;*&gt;</span> c <span class="op">&lt;*&gt;</span> d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>  ix <span class="dv">2</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a <span class="op">&lt;$&gt;</span> g b <span class="op">&lt;*&gt;</span> c <span class="op">&lt;*&gt;</span> d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>  ix <span class="dv">3</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a b <span class="op">&lt;$&gt;</span> g c <span class="op">&lt;*&gt;</span> d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>  ix <span class="dv">4</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a b c <span class="op">&lt;$&gt;</span> g d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>  ix <span class="dv">5</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a b c d <span class="op">&lt;$&gt;</span> g e</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>  ix _ <span class="ot">=</span> \_ l <span class="ot">-&gt;</span> <span class="fu">pure</span> l</span></code></pre></div>
</div>
<p>多分動いた!!</p>
]]></summary>
</entry>
<entry>
    <title>XMonad.Layoutのリスト</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-05-10-xmonad-list-of-layouts.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-05-10-xmonad-list-of-layouts.html</id>
    <published>2021-05-10T00:00:00Z</published>
    <updated>2021-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>XMonad.Layoutのリスト</h1>
  <div class="ui list">
    <div class="item">Posted on May 10, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 11, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;xmonad&#39;." href="/tags/xmonad.html" class="ui tag label">xmonad</a><a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" class="ui tag label">haskell</a>
  
</div>

<p>xmonadのレイアウトは、 <code>LayoutClass</code> のインスタンスであることが条件になっており、逆にいうと様々な型によって個別に実装されている。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">LayoutClass</span><span class="ot"> ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Show</span> (layout a) <span class="ot">=&gt;</span> <span class="dt">LayoutClass</span> layout a <span class="kw">where</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>      <span class="op">...</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">LayoutClass</span> <span class="dt">Tall</span> a <span class="kw">where</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>      <span class="op">...</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">LayoutClass</span> <span class="dt">Full</span> a</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="op">...</span></span></code></pre></div>
</div>
<p>これはつまり、以下のようなことが出来ないことになる</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">alist ::</span> <span class="dt">LayoutClass</span> layout a <span class="ot">=&gt;</span> [layout a]</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>alist <span class="ot">=</span> [<span class="dt">Full</span>, <span class="dt">Tall</span> def def def]</span></code></pre></div>
</div>
<p>これは以下のようなエラーになる</p>
<div class="ui segment">
<div class="ui top right attached label">
example
</div>
<pre class="example SourceCode"><code>• Couldn&#39;t match type ‘layout’ with ‘Full’
      ‘layout’ is a rigid type variable bound by
        the type signature for:
          alist :: forall (layout :: * -&gt; *) a.
                   LayoutClass layout a =&gt;
                   [layout a]
        at /tmp/vpWQTsV/198/xmonad.hs:125:1-43
      Expected type: layout a
        Actual type: Full a
    • In the expression: Full
      In the expression: [Full, Tall def def def]
      In an equation for ‘alist’: alist = [Full, Tall def def def]
    • Relevant bindings include
        alist :: [layout a] (bound at /tmp/vpWQTsV/198/xmonad.hs:126:1)
    |
126 | alist = [Full, Tall def def def]
    |          ^^^^
</code></pre>
</div>
<p>私の理解が正しければ、「 <code>Full</code> の型と <code>Tall</code> の型ちゃうやんけ!？？」ってことかなと。 正直よくわからん</p>
<p><code>Rank2Types</code> 使ってみたけど上手く動かず</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ot">alist ::</span> [<span class="kw">forall</span> l a<span class="op">.</span> (<span class="dt">LayoutClass</span> l a) <span class="ot">=&gt;</span> l a]</span></code></pre></div>
</div>
<h2>解法</h2>
<p><a href="https://hackage.haskell.org/package/xmonad-0.15/docs/src/XMonad.Core.html#Layout">XMonad.Core.Layout</a> を使う。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">alist ::</span> [<span class="dt">Layout</span> <span class="dt">Window</span>]</span></code></pre></div>
</div>
<p>なら大丈夫</p>
<p>参考までに</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Layout</span> a <span class="ot">=</span> <span class="kw">forall</span> l<span class="op">.</span> (<span class="dt">LayoutClass</span> l a, <span class="dt">Read</span> (l a)) <span class="ot">=&gt;</span> <span class="dt">Layout</span> (l a)</span></code></pre></div>
</div>
]]></summary>
</entry>
<entry>
    <title>xmonadにstackを使う</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-05-04-xmonad-use-stack-for-compile.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-05-04-xmonad-use-stack-for-compile.html</id>
    <published>2021-05-04T00:00:00Z</published>
    <updated>2021-05-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>xmonadにstackを使う</h1>
  <div class="ui list">
    <div class="item">Posted on May  4, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 11, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;xmonad&#39;." href="/tags/xmonad.html" class="ui tag label">xmonad</a><a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" class="ui tag label">haskell</a><a title="All pages tagged &#39;stack&#39;." href="/tags/stack.html" class="ui tag label">stack</a><a title="All pages tagged &#39;linux&#39;." href="/tags/linux.html" class="ui tag label">linux</a>
  
</div>

<p>xmonad、デフォルトだと新しい機能を自作したりしようとするとシステムグローバルに突っ込む必要が出てきます。 それは面倒だし、管理が煩雑になるのでそもそもstackを使用できるようにします。</p>
<h1>Xmonadをstackでコンパイルできるようにする</h1>
<h2>Xmonadのコンパイル方法を指定する方法</h2>
<p>xmonadの recompileは、 <a href="https://hackage.haskell.org/package/xmonad-0.15/docs/src/XMonad.Core.html#recompile">XMonad.Core.recompile</a> によって行われています。 そして内部を読んでみると、 <code class="sourceCode haskell">cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;build&quot;</span></code> が存在すればそれを読むということが分かります。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ot">recompile ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> m <span class="dt">Bool</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>recompile force <span class="ot">=</span> io <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    cfgdir  <span class="ot">&lt;-</span> getXMonadDir</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    datadir <span class="ot">&lt;-</span> getXMonadDataDir</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="kw">let</span> binn <span class="ot">=</span> <span class="st">&quot;xmonad-&quot;</span><span class="op">++</span>arch<span class="op">++</span><span class="st">&quot;-&quot;</span><span class="op">++</span>os</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>        bin  <span class="ot">=</span> datadir <span class="op">&lt;/&gt;</span> binn</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>        err  <span class="ot">=</span> datadir <span class="op">&lt;/&gt;</span> <span class="st">&quot;xmonad.errors&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>        src  <span class="ot">=</span> cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;xmonad.hs&quot;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>        lib  <span class="ot">=</span> cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;lib&quot;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>        buildscript <span class="ot">=</span> cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;build&quot;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>    <span class="co">-- ...</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>    useBuildscript <span class="ot">&lt;-</span> <span class="kw">do</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>      exists <span class="ot">&lt;-</span> doesFileExist buildscript</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>      <span class="kw">if</span> exists</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>        <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>          isExe <span class="ot">&lt;-</span> isExecutable buildscript</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a>          <span class="kw">if</span> isExe</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a>            <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>              trace <span class="op">$</span> <span class="st">&quot;XMonad will use build script at &quot;</span> <span class="op">++</span> <span class="fu">show</span> buildscript <span class="op">++</span> <span class="st">&quot; to recompile.&quot;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>              <span class="fu">return</span> <span class="dt">True</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true"></a>            <span class="kw">else</span> <span class="kw">do</span></span></code></pre></div>
</div>
<p><code>cfgdir</code> は</p>
<ol>
<li><code>$XMONAD_CONFIG_DIR</code></li>
<li><code>~/.xmonad</code></li>
<li><code>$XDG_CONFIG_HOME/xmonad</code></li>
</ol>
<p>のいずれかになります。</p>
<p>今回は、変更点をあまり作らないためにとりあえず <code>~/.xmonad</code> にしようと思います(そのうち <code>XDG_CONFIG_HOME</code> 以下に移したい)</p>
<h2><code>build</code> スクリプトを書く</h2>
<p>コマンドを使用することになるので、shellscriptで書くのが妥当かなと思います。 <code>build</code> スクリプトは以下のように呼ばれます。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a> <span class="co">-- ...</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a> <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>   <span class="co">-- temporarily disable SIGCHLD ignoring:</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>   uninstallSignalHandlers</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>   status <span class="ot">&lt;-</span> bracket (openFile err <span class="dt">WriteMode</span>) hClose <span class="op">$</span> \errHandle <span class="ot">-&gt;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>waitForProcess <span class="op">=&lt;&lt;</span> <span class="kw">if</span> useBuildscript</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>     <span class="kw">then</span> compileScript bin cfgdir buildscript errHandle</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>     <span class="kw">else</span> compileGHC bin cfgdir errHandle</span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>compileScript bin dir script errHandle <span class="ot">=</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>        runProcess script [bin] (<span class="dt">Just</span> dir) <span class="dt">Nothing</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span> (<span class="dt">Just</span> errHandle)</span></code></pre></div>
</div>
<p><code class="sourceCode haskell">runProcess</code> は、 <a href="https://hackage.haskell.org/package/process-1.6.11.0/docs/System-Process.html#v:runProcess">System.Process.runProcess</a> であり、上記の使い方だと <code>script</code> というプログラムに <code>bin</code> を引数として与え、 <code>dir</code> をワーキングディレクトリとしてから実行することになります。</p>
]]></summary>
</entry>
<entry>
    <title>ewwでスタイリッシュなスライダーを使う</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-04-26-eww-linux-minimal-design-slider.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-04-26-eww-linux-minimal-design-slider.html</id>
    <published>2021-04-26T00:00:00Z</published>
    <updated>2021-04-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>ewwでスタイリッシュなスライダーを使う</h1>
  <div class="ui list">
    <div class="item">Posted on April 26, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 11, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;eww&#39;." href="/tags/eww.html" class="ui tag label">eww</a><a title="All pages tagged &#39;scss&#39;." href="/tags/scss.html" class="ui tag label">scss</a><a title="All pages tagged &#39;linux&#39;." href="/tags/linux.html" class="ui tag label">linux</a>
  
</div>

<p><a href="https://github.com/Axarva/dotfiles-2.0">Axarva/dotfiles-2.0</a> に触発されて、 <a href="https://github.com/elkowar/eww">elkowar/eww</a> を使い始めました。(Emacsのewwではない)</p>
<p>キーボードドリブンな設計にしたかったので、axarvaの設定を参考にしながら自分で書いていました。 でも、デフォルトでは以下のような形に。</p>
<p><img src="file:///images/cropped-slider-without-scss.png" class="ui rounded image" /></p>
<p>本当は以下のようになってほしい。特に <strong>スライダーノブを消したい</strong> 。</p>
<p><img src="file:///images/cropped-slider-with-scss.png" class="ui rounded image" /></p>
<p>色々と設定を写したのですが上手くいかなかったけど、</p>
<div class="ui segment">
<div class="ui top right attached label">
css
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode css SourceCode"><code class="sourceCode css"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="op">*</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  <span class="kw">all</span>: <span class="bu">unset</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>}</span></code></pre></div>
</div>
<p>を設定したら出来た!!</p>
<p>ビフォー:</p>
<p><img src="file:///images/slider-without-scss.png" class="ui rounded image" /></p>
<p>アフター:</p>
<p><img src="file:///images/slider-with-scss.png" class="ui rounded image" /></p>
]]></summary>
</entry>
<entry>
    <title>git credentialにpassを使う</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-04-13-git-use-pass-for-git-credential.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-04-13-git-use-pass-for-git-credential.html</id>
    <published>2021-04-13T00:00:00Z</published>
    <updated>2021-04-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>git credentialにpassを使う</h1>
  <div class="ui list">
    <div class="item">Posted on April 13, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May  2, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;git&#39;." href="/tags/git.html" class="ui tag label">git</a><a title="All pages tagged &#39;pass&#39;." href="/tags/pass.html" class="ui tag label">pass</a>
  
</div>

<p>gitの認証情報を保存する為に使う <code>git-credential helper</code> ですが、passを用いたものはデフォルトで存在しないので作ることにします。</p>
<p>ちなみに元はどこかで見たアイデアです。確か誰かの実装があったと思うので、それを参照するのも良いかと思います。 私はなんとなく自作したかったので作っています。</p>
<h1>git credential helperについて</h1>
<p>git credentialは、機密を保存する為に外部のプログラムを使用します。 その方法は <a href="https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%81%AE%E4%BF%9D%E5%AD%98">git-scm.com Git-様々なツール-認証情報の保存</a> で書かれています。</p>
<h2>Git credential helperの役割</h2>
<p>git credential helperは、3つの用途で呼ばれます。</p>
<ul>
<li>store</li>
<li>get</li>
<li>erase</li>
</ul>
<p>です。</p>
<h3>store – 新しい認証情報を登録する</h3>
<p>Storeは、新しい認証情報を登録する時に呼び出されます。 標準入力から情報を受け取り、それを保存します。 標準出力から何かを返しても良いですが、gitはそれを無視するので必要ではないです。</p>
<h3>erase – 既存の認証情報を消去する</h3>
<p>Eraseは、認証情報を消去したい時に呼ばれます。 標準入力から情報を受け取り、それに該当するものがあればそれを消去します。 標準出力から何かを返しても良いですが、これについてもgitは無視するので必要ではないです。</p>
<h3>get – 渡された情報を基に認証情報を返す</h3>
<p>Getは、渡された情報に合致するエントリがあればその情報を返します。 この場合のみ標準出力は必須で、gitはこの標準出力をそのまま代入文として扱います。</p>
<h1>helperの作成</h1>
<p>さて、簡単な説明も済んだので実際にスクリプトを組もうと思います。 例示ではRubyが使われていましたが、passコマンドを使用することと、自分がbash に慣れていることから、bashを使おうと思います。</p>
<h2>データの格納方法</h2>
<p>データはpassに格納しますが、格納する階層構造は以下のようにしようと思います。</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>Password Store └── git-cli └── &lt;protocol&gt;:&lt;host&gt; └── &lt;username&gt;</p>
</blockquote>
</div>
<p>トップの <code>git-cli</code> はgitコマンドで使うものであることを示し、後はそのままです。</p>
<p>URI形式にしようと思いましたが、</p>
<ul>
<li><code>//</code> がパスとして認識されてしまう</li>
<li><code>Username</code> は <code>get</code> の際に与えられない</li>
</ul>
<p>ことから、</p>
<ul>
<li>プロトコルとホスト名の間はコロン1つ</li>
<li>ユーザー名は下位エントリ</li>
</ul>
<p>にしました。</p>
<h2>1. storeの作成</h2>
<p>storeは、シンプルに与えられた情報からpassに登録をします。 標準入力は</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>protocol=&lt;protocol&gt; host=&lt;host&gt; username=&lt;username&gt; password=&lt;password&gt;</p>
</blockquote>
</div>
<p>という4つの入力です。 これを保存します</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="store_key" data-org-language="sh" data-results="output verbatim" data-tangle="git-credential-pass" data-shebang="&quot;#!/usr/local/env bash&quot;"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="store_key-1"><a href="#store_key-1" aria-hidden="true"></a><span class="kw">function</span><span class="fu"> createStoreKey</span> <span class="kw">{</span></span>
<span id="store_key-2"><a href="#store_key-2" aria-hidden="true"></a>    <span class="kw">case</span> <span class="va">$1</span><span class="kw"> in</span></span>
<span id="store_key-3"><a href="#store_key-3" aria-hidden="true"></a>  <span class="st">&quot;store&quot;</span><span class="kw">)</span> <span class="bu">echo</span> <span class="st">&quot;git-cli/</span><span class="va">${2}</span><span class="st">:</span><span class="va">${3}</span><span class="st">/</span><span class="va">${4}</span><span class="st">&quot;</span><span class="kw">;;</span></span>
<span id="store_key-4"><a href="#store_key-4" aria-hidden="true"></a>  <span class="st">&quot;get&quot;</span>)   <span class="bu">echo</span> <span class="st">&quot;git-cli/</span><span class="va">${2}</span><span class="st">:</span><span class="va">${3}</span><span class="st">&quot;</span><span class="kw">;;</span></span>
<span id="store_key-5"><a href="#store_key-5" aria-hidden="true"></a>  <span class="ex">*</span>) <span class="kw">;;</span></span>
<span id="store_key-6"><a href="#store_key-6" aria-hidden="true"></a>    <span class="kw">esac</span></span>
<span id="store_key-7"><a href="#store_key-7" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="store_key-8"><a href="#store_key-8" aria-hidden="true"></a></span>
<span id="store_key-9"><a href="#store_key-9" aria-hidden="true"></a><span class="kw">function</span><span class="fu"> store_key()</span> <span class="kw">{</span></span>
<span id="store_key-10"><a href="#store_key-10" aria-hidden="true"></a>  <span class="bu">declare</span> -A <span class="va">input=()</span></span>
<span id="store_key-11"><a href="#store_key-11" aria-hidden="true"></a></span>
<span id="store_key-12"><a href="#store_key-12" aria-hidden="true"></a>  <span class="co"># バックスラッシュをエスケープ用に使わないために ~-r~ が必要です。</span></span>
<span id="store_key-13"><a href="#store_key-13" aria-hidden="true"></a>  <span class="kw">while</span> <span class="va">IFS=</span>\= <span class="bu">read</span> -r <span class="va">key</span> <span class="va">value</span>; <span class="kw">do</span></span>
<span id="store_key-14"><a href="#store_key-14" aria-hidden="true"></a><span class="va">input[$key]=$value</span></span>
<span id="store_key-15"><a href="#store_key-15" aria-hidden="true"></a>  <span class="kw">done</span> <span class="op">&lt;</span> <span class="op">&lt;(</span><span class="fu">cat</span> -<span class="op">)</span></span>
<span id="store_key-16"><a href="#store_key-16" aria-hidden="true"></a></span>
<span id="store_key-17"><a href="#store_key-17" aria-hidden="true"></a>  <span class="va">store_key=$(</span><span class="ex">createStoreKey</span> <span class="st">&quot;store&quot;</span> <span class="va">${input[protocol]}</span> <span class="va">${input[host]}</span> <span class="va">${input[username]})</span></span>
<span id="store_key-18"><a href="#store_key-18" aria-hidden="true"></a></span>
<span id="store_key-19"><a href="#store_key-19" aria-hidden="true"></a>  <span class="bu">echo</span> <span class="st">&quot;Save credential info into pass.&quot;</span></span>
<span id="store_key-20"><a href="#store_key-20" aria-hidden="true"></a>  <span class="bu">echo</span> <span class="st">&quot;Key is set to </span><span class="dt">\&quot;</span><span class="va">${store_key}</span><span class="dt">\&quot;</span><span class="st">&quot;</span></span>
<span id="store_key-21"><a href="#store_key-21" aria-hidden="true"></a>  <span class="fu">cat</span> <span class="op">&lt;&lt;EOF</span> <span class="kw">|</span> <span class="ex">pass</span> insert <span class="va">$store_key</span></span>
<span id="store_key-22"><a href="#store_key-22" aria-hidden="true"></a>  <span class="va">${input[password]}</span></span>
<span id="store_key-23"><a href="#store_key-23" aria-hidden="true"></a>  <span class="va">${input[password]}</span></span>
<span id="store_key-24"><a href="#store_key-24" aria-hidden="true"></a>  EOF</span>
<span id="store_key-25"><a href="#store_key-25" aria-hidden="true"></a></span>
<span id="store_key-26"><a href="#store_key-26" aria-hidden="true"></a>  [ <span class="va">$?</span> -eq 0 ] &amp;&amp; echo &quot;Credential <span class="op">s</span><span class="ex">aved</span> noormally<span class="st">&quot; \</span></span>
<span id="store_key-27"><a href="#store_key-27" aria-hidden="true"></a><span class="st">    || echo &quot;</span>Failed to save credential<span class="st">&quot;</span></span>
<span id="store_key-28"><a href="#store_key-28" aria-hidden="true"></a><span class="st">}</span></span></code></pre></div>
</div>
<h3>実例</h3>
<p>例として</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>protocol=https host=myGitHost.com username=me password=some<sub>simplepassword</sub></p>
</blockquote>
</div>
<p>を登録してみます。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="store_key-example-code" data-org-language="sh" data-var="a=store_key()"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="store_key-example-code-1"><a href="#store_key-example-code-1" aria-hidden="true"></a><span class="fu">cat</span> - <span class="kw">|</span> <span class="ex">store_key</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
example
</div>
<pre class="example SourceCode"><code>/tmp/babel-EN1Wbc/sh-script-qhWEEa: line 3: store_key: command not found
</code></pre>
</div>
<h2>2. getの作成</h2>
<p>getは、標準入力からホストとプロトコルの情報を読み込み、 標準出力からユーザー名とパスワードを返します。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="pass_get" data-org-language="sh" data-results="output verbatim" data-tangle="git-credential-pass" data-shebang="&quot;#!/usr/local/env bash&quot;"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="pass_get-1"><a href="#pass_get-1" aria-hidden="true"></a><span class="kw">function</span><span class="fu"> createStoreKey</span> <span class="kw">{</span></span>
<span id="pass_get-2"><a href="#pass_get-2" aria-hidden="true"></a>    <span class="kw">case</span> <span class="va">$1</span><span class="kw"> in</span></span>
<span id="pass_get-3"><a href="#pass_get-3" aria-hidden="true"></a>  <span class="st">&quot;store&quot;</span><span class="kw">)</span> <span class="bu">echo</span> <span class="st">&quot;git-cli/</span><span class="va">${2}</span><span class="st">:</span><span class="va">${3}</span><span class="st">/</span><span class="va">${4}</span><span class="st">&quot;</span><span class="kw">;;</span></span>
<span id="pass_get-4"><a href="#pass_get-4" aria-hidden="true"></a>  <span class="st">&quot;get&quot;</span>)   <span class="bu">echo</span> <span class="st">&quot;git-cli/</span><span class="va">${2}</span><span class="st">:</span><span class="va">${3}</span><span class="st">&quot;</span><span class="kw">;;</span></span>
<span id="pass_get-5"><a href="#pass_get-5" aria-hidden="true"></a>  <span class="ex">*</span>) <span class="kw">;;</span></span>
<span id="pass_get-6"><a href="#pass_get-6" aria-hidden="true"></a>    <span class="kw">esac</span></span>
<span id="pass_get-7"><a href="#pass_get-7" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="pass_get-8"><a href="#pass_get-8" aria-hidden="true"></a><span class="bu">declare</span> -A <span class="va">input=()</span></span>
<span id="pass_get-9"><a href="#pass_get-9" aria-hidden="true"></a></span>
<span id="pass_get-10"><a href="#pass_get-10" aria-hidden="true"></a><span class="kw">while</span> <span class="va">IFS=</span>\= <span class="bu">read</span> -r <span class="va">key</span> <span class="va">value</span>; <span class="kw">do</span></span>
<span id="pass_get-11"><a href="#pass_get-11" aria-hidden="true"></a>  [[ <span class="va">${#key}</span> <span class="ex">-eq</span> 0 ]] <span class="kw">&amp;&amp;</span> <span class="bu">continue</span></span>
<span id="pass_get-12"><a href="#pass_get-12" aria-hidden="true"></a>  <span class="va">input[$key]=$value</span></span>
<span id="pass_get-13"><a href="#pass_get-13" aria-hidden="true"></a><span class="kw">done</span> <span class="op">&lt;</span> <span class="op">&lt;(</span><span class="fu">cat</span> -<span class="op">)</span></span>
<span id="pass_get-14"><a href="#pass_get-14" aria-hidden="true"></a></span>
<span id="pass_get-15"><a href="#pass_get-15" aria-hidden="true"></a><span class="va">store_key=$(</span><span class="ex">createStoreKey</span> <span class="st">&quot;get&quot;</span> <span class="va">${input[protocol]}</span> <span class="va">${input[host]})</span></span>
<span id="pass_get-16"><a href="#pass_get-16" aria-hidden="true"></a></span>
<span id="pass_get-17"><a href="#pass_get-17" aria-hidden="true"></a><span class="va">username=$(LANG=</span>C <span class="ex">pass</span> show <span class="st">&quot;</span><span class="va">$store_key</span><span class="st">&quot;</span> <span class="kw">|</span> <span class="fu">awk</span> -v storeKey=<span class="st">&quot;</span><span class="va">$store_key</span><span class="st">&quot;</span> -v store_key=<span class="st">&quot;</span><span class="va">$store_key</span><span class="st">&quot;</span> <span class="st">&#39;$1 == store_key { getline; sub(&quot;`-- +&quot;, &quot;&quot;); print }&#39;</span><span class="va">)</span></span>
<span id="pass_get-18"><a href="#pass_get-18" aria-hidden="true"></a></span>
<span id="pass_get-19"><a href="#pass_get-19" aria-hidden="true"></a><span class="kw">[[</span> <span class="ot">-z</span> <span class="va">$username</span><span class="kw"> ]]</span> <span class="kw">&amp;&amp;</span> <span class="kw">{</span> <span class="bu">echo</span> <span class="st">&quot;failed to look up user for </span><span class="va">${store_key}</span><span class="st">. exit&quot;</span> <span class="kw">;</span> <span class="bu">exit</span><span class="kw">;</span> <span class="kw">}</span></span>
<span id="pass_get-20"><a href="#pass_get-20" aria-hidden="true"></a></span>
<span id="pass_get-21"><a href="#pass_get-21" aria-hidden="true"></a><span class="va">password=$(LANG=</span>C <span class="ex">pass</span> show <span class="st">&quot;</span><span class="va">${store_key}</span><span class="st">/</span><span class="va">$username</span><span class="st">&quot;</span><span class="va">)</span></span>
<span id="pass_get-22"><a href="#pass_get-22" aria-hidden="true"></a><span class="fu">cat</span> <span class="op">&lt;&lt;EOF</span></span>
<span id="pass_get-23"><a href="#pass_get-23" aria-hidden="true"></a>username=<span class="va">$username</span></span>
<span id="pass_get-24"><a href="#pass_get-24" aria-hidden="true"></a>password=<span class="va">$password</span></span>
<span id="pass_get-25"><a href="#pass_get-25" aria-hidden="true"></a><span class="op">EOF</span></span></code></pre></div>
</div>
<h3>実例</h3>
<p>getに必要なのはホストとプロトコル(とそれに続く空白行)だけなので以下の情報を入れます</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>protocol=https host=myGitHost.com</p>
</blockquote>
</div>
<div class="ui segment">
<div class="ui top right attached label">
example
</div>
<pre class="example SourceCode"><code>username=me
password=some_simple_password
</code></pre>
</div>
<h2>3. Eraseの作成(未作成)</h2>
<p>Eraseも本来は存在しますが、入力で何を期待すれば良いのかが分からないため今はスルーすることにします。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="erase_key" data-org-language="sh" data-results="output verbatim" data-tangle="git-credential-pass" data-shebang="&quot;#!/usr/local/env bash&quot;"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="erase_key-1"><a href="#erase_key-1" aria-hidden="true"></a><span class="bu">exit</span></span></code></pre></div>
</div>
<h1>最終的に出来たもの</h1>
<p><a href="https://github.com/Cj-bc/dotfiles/blob/master/dotfiles/bin/git-credential-pass">Cj-bc/dotfiles – dotfiles/bin/git-credential-pass</a> にあります。</p>
<p>このポストから <code>org tangle</code> しようとしたのですが、諸々(関数化したりetc)上手く出来なかったのでtangleではないです 実用的なスクリプトとしてはそちらを参照して下さい</p>
]]></summary>
</entry>
<entry>
    <title>うちのlightdmのログインループはxmonadが原因だった</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-04-12-lightdm-login-loop-was-caused-by-xmonad.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-04-12-lightdm-login-loop-was-caused-by-xmonad.html</id>
    <published>2021-04-12T00:00:00Z</published>
    <updated>2021-04-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>うちのlightdmのログインループはxmonadが原因だった</h1>
  <div class="ui list">
    <div class="item">Posted on April 12, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 11, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;lightdm&#39;." href="/tags/lightdm.html" class="ui tag label">lightdm</a><a title="All pages tagged &#39;xmonad&#39;." href="/tags/xmonad.html" class="ui tag label">xmonad</a><a title="All pages tagged &#39;archlinux&#39;." href="/tags/archlinux.html" class="ui tag label">archlinux</a>
  
</div>

<h1>起きていたこと</h1>
<p><code>pacman -Syu</code> して再起動した後、=light DM= できちんとログインしても <code>light DM</code> が再度呼び出されてしまう問題があった。</p>
<p>調べた所、色々な要因があるようだがどれも私のケースではなかった。 私のケースで問題だったのは、 「 <strong>コンパイル済みのxmonadが要求するライブラリが、アップデートによって消えていた</strong> 」 ことだった。</p>
<p>xmonadはユーザーの書いた <code>/.xmonad/xmonad.hs</code> をコンパイルして動くが、そのバイナリはいくつかの動的ライブラリを参照している。 ~pacman -Syu~の際、(例えば <code>xmonad-contrib</code> など)がアップデートされると動的ライブラリのパスが変わってしまう。 それにより、xmonadが読みにいこうとしたライブラリが存在しなくなり、エラーが起きる。 エラーのせいでxmonadが立ち上がらないため、lightdmは「Window managerが終了した」と判断(しているのか正確には知らないが)し、またログイン画面に戻ってくる。</p>
<h1>直し方</h1>
<ol>
<li><code>light DM</code> の画面で <code>Alt+Control+F1</code> でGUI環境を抜け、CUIを開く。</li>
<li><code>Alt+F2</code> をし、新しいターミナルを開きそこからログインする。</li>
<li><code>xmonad --recompile</code> する</li>
<li><code>Alt+Control+F7</code> でGUI環境に戻り、ログインを試すと入れるはず。</li>
</ol>
<h1>他に考えられる原因</h1>
<p><a href="https://askubuntu.com/questions/223501/ubuntu-gets-stuck-in-a-login-loop">色々調べる途中で見付けたaskubuntuのスレッド</a> で、ありうる原因として挙げられていたものたち:</p>
<ul>
<li>indicator-multiloadをインストールしたのが原因だった</li>
<li>flatpakが原因だった</li>
<li>~/.Xauthorityの所有者が自分ではない</li>
<li>~/.ICEauthorityの所有者が自分ではない（場合によっては必要なファイル、うちにはなかった）</li>
<li>/tmpのパーミッションが777&amp;&amp;file mode bitがt</li>
<li>sudo startxした（これのせいで~/.Xauthorityの所有者が変わってしまう模様）</li>
<li>Nvidiaの公式サイトから落としたドライバーが、きちんとテストされてないことがあるらしい</li>
<li>~/.profileにtypoや構文ミスがある</li>
<li>容量不足</li>
</ul>
<h1>おまけ: xmonadを、関連パッケージがアップデートされる度に自動リビルドさせる。</h1>
<p>このためには、pacmanのhook機能が使える。 pacmanのhookは、指定した条件に合致した場合に指定した内容を実行する仕組みである。 ファイルは(多分)ini形式で書かれ、デフォルトでは <code>/etc/pacman.d/hooks</code> 以下に配置される。</p>
<p>ここでは簡単に、必要最低限の解説だけする。 hookの書き方について詳しくは <a href="man:alpm-hooks">man:alpm-hooks</a> を参照してほしい。</p>
<p>先に完成形はこちら(最新版は <a href="github:Cj-bc/dotfiles">github:Cj-bc/dotfiles</a> の <code>dotfiles/pacman/hooks/xmonad.hook</code>)</p>
<p>尚、 <strong>このhookはまだテストされていません</strong> (アップデートを実行した直後に書いたため)</p>
<p>[2021-05-02]: <code>pacman -Syu</code> 何度か試していますが多分動いている…?エラーが出てる気もする…</p>
<div class="ui segment">
<div class="ui top right attached label">
dosini
</div>
<pre class="dosini SourceCode"><code>[Trigger]
Operation = Upgrade
Type = Package
Target = xmonad*
Target = haskell-*

[Action]
Description = Rebuild xmonad to prevent login loop
Exec = xmonad --recompile
When = PostTransaction
</code></pre>
</div>
<h2>pacman hookの作り</h2>
<p>pacman hookは <code>[Trigger]</code> と <code>[Action]</code> の二つのブロックから構成される。 <code>[Trigger]</code> で「そのHookが実行される条件」を指定し、 <code>[Action]</code> で実行する内容を指定する。</p>
<p><code>Operation</code> で指定された操作が、 <code>Target</code> に一致するファイル・パッケージに対して実行された時にhookが実行される。</p>
<p>このhookの場合は、 <code>xmonad*</code> 若しくは <code>haskell-*</code> という名前のパッケージがUpgradeされた時、Upgrade処理が終わった後に <code>xmonad --recompile</code> を実行する。</p>
]]></summary>
</entry>
<entry>
    <title>vim9scriptで気をつけること</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-03-02-vim-vim9script-struggling-memo-v8.2_1-2560.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-03-02-vim-vim9script-struggling-memo-v8.2_1-2560.html</id>
    <published>2021-03-02T00:00:00Z</published>
    <updated>2021-03-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>vim9scriptで気をつけること</h1>
  <div class="ui list">
    <div class="item">Posted on March  2, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on March  2, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;vim&#39;." href="/tags/vim.html" class="ui tag label">vim</a><a title="All pages tagged &#39;vim script&#39;." href="/tags/vim%20script.html" class="ui tag label">vim script</a><a title="All pages tagged &#39;vim9&#39;." href="/tags/vim9.html" class="ui tag label">vim9</a>
  
</div>

<p><a href="https://vim-jp.org/vimdoc-ja/usr_46.html">vim9script</a>は、新しく実装が進められているvim用のスクリプト言語で、 型を取り入れたりモジュールの概念を取り入れたりなど「モダンな言語」の機能をふんだんに取り入れています。</p>
<p><strong>現在はまだ開発中であり不安定である</strong> ためプラグインの作成などには向かないようですが、あくまでも自己責任ということで使ってみたくなったので <a href="https://github.com/Cj-bc/dotfiles/tree/master/dotfiles/vim">自分のvimrc</a> の新しく書く部分に少し使ってみたりしています。</p>
<p>が、如何せん開発中のものなのでバグが多かったり、ドキュメントが不足していたり。。。</p>
<p>取り急ぎ、自分で把握したものはメモしていきます。</p>
<p>なお当方のvimは現時点でのgitのマスターブランチから <code>make</code> コマンドのみによってコンパイルされたもので、</p>
<p>バージョンは <code>8.2 (2019 Dec 12, compiled Mar 2 2021 10:43:55) patch 1-2560</code> です。</p>
<p>又、コードの実行には <a href="https://github.com/thinca/vim-quickrun">thinca/vim-quickrun</a> を使用させていただいております。</p>
<h1>文字列連結は'..'。'.'ではない。</h1>
<p>これは明確に「変更点」としては見当たらなかったのですが、恐らく変更されているところです。 <code>.</code> を使って連結しようとしてみたところ、 <code>E15: 無効な式です</code> と言われてしまいました。</p>
<p>&lt;画像入れる&gt;</p>
<p>これを <code>..</code> に変えたところすんなり動きました。</p>
<h1>'map()'と'mapnew()'を使い分ける</h1>
<p><code>map()</code> は、リストや辞書型のオブジェクトの要素ひとつひとつに対して関数を適用してくれる関数です。</p>
<p>Haskellとかやってると馴染みが深いですが、その分注意する必要がある点があります。</p>
<p><code>map()</code> 関数、実は <strong>与えられたリストや辞書型のオブジェクトをそのまま更新</strong> します。 つまり <strong>新しいオブジェクトを作って返すわけではない</strong> のです。</p>
<p>今まではこれで良かったのですが、=vim9script= になると違います。 使用する関数を気をつけないと、 <strong>型の不一致でコンパイルエラー</strong> を受けます。</p>
<p>例えば、</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>var ret = [1, 2, 3]
map(ret, (n) =&gt; n + 1)
</code></pre>
</div>
<p>は <code>a -&gt; a</code> な関数を渡しているので動きますが、</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>var ret = [1, 2, 3]
map(ret, (n) =&gt; n .. &quot;th&quot;)
</code></pre>
</div>
<p>は~a -&gt; b~ (<code>number -&gt; string</code>) な関数を渡しているのでコンパイルエラーになります。</p>
<p>この場合、*新しいオブジェクトを作って返す* バージョンである <code>mapnew()</code> を使用して回避できます。</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>var ret = mapnew([1,2,3], (n) =&gt; n .. &quot;th&quot;)
</code></pre>
</div>
]]></summary>
</entry>
<entry>
    <title>Redox OSとかいう新しいOSが気になった話</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-23-redox-os.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-23-redox-os.html</id>
    <published>2021-02-24T00:00:00Z</published>
    <updated>2021-02-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>Redox OSとかいう新しいOSが気になった話</h1>
  <div class="ui list">
    <div class="item">Posted on February 24, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 24, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;redox os&#39;." href="/tags/redox%20os.html" class="ui tag label">redox os</a><a title="All pages tagged &#39;os&#39;." href="/tags/os.html" class="ui tag label">os</a><a title="All pages tagged &#39;rust&#39;." href="/tags/rust.html" class="ui tag label">rust</a>
  
</div>

<h1>お断り</h1>
<p>私は一切Redox OSを使ったことがないし、関係者でもなくただ単に「気になってちょっとドキュメントみた」程度なので、 その程度の知識しかないことはご了承ください。</p>
<h1>redox osとは</h1>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>Redox OS は、Rustで書かれたUNIXライクなオペレーションシステムで、 Rustという革命的手法を、モダンなマイクロカーネルおよび 全てのアプリケーションに持ち込むことを目指しています</p>
<p>– 公式サイト <a href="https://www.redox-os.org/jp">https://www.redox-os.org/jp</a> より</p>
</blockquote>
</div>
<p>Rust製のマイクロカーネルなOSのようです。</p>
<p>別段OS(というかカーネル)は何気に色々あるのでそこまで特筆すべきほど驚くか？ と言われると微妙なところではありますが、個人的に面白いなと思ったところを軽く書いておこうと 思います。</p>
<h1>面白いところ</h1>
<h2>公式サイトに日本語訳がある</h2>
<p>これは本当に驚いたところで、感動したところでもあります。</p>
<p>大体のプロジェクトには日本語なんてないし、そもそも多国語対応している 物の方が少ないと思います。 <del>知らんけど</del></p>
<p>全てが対応しているわけではないようですが、それでも十分インパクトがありました。</p>
<p>ちなみにページの情報によると、全部で次のような言語があるようですね。 …読めないものも多い！！</p>
<ul>
<li>日本語</li>
<li>English</li>
<li>中文</li>
<li>Español</li>
<li>Русский</li>
<li>Français</li>
<li>Deutsch</li>
<li>Italiano</li>
<li>Türkçe</li>
<li>Svenska</li>
<li>Nederlands</li>
<li>Dansk</li>
<li>Norsk</li>
<li>Čeština</li>
<li>Esperanto</li>
<li>Português</li>
<li>한국어</li>
<li>Magyar</li>
<li>Polski</li>
<li>Українська</li>
</ul>
<p><a href="https://www.jei.or.jp/3pundesiru/">Esperanto</a> があるのは個人的にめちゃくちゃ好き！！！</p>
<p>人工言語意外と好きなので… (今の推しは <a href="https://mw.lojban.org/index.php?title=Lojban&amp;setlang=ja">lojban</a> ですが。)</p>
<h2>Rust製である</h2>
<p>何かと低レイヤーに使われがちな気はしていますが、 カーネルはCが使われるイメージしかなかったのでとても斬新に感じました。</p>
<p>まぁ多分そうじゃないのもたくさんあるんだろうけど…疎いので…</p>
<h2>Coreutilとかshellとかエディタとか自作である</h2>
<p>何気にこれほんとすごいと思います。</p>
<ul>
<li><a href="https://gitlab.redox-os.org/redox-os/coreutils">coreutils</a></li>
<li><a href="https://gitlab.redox-os.org/redox-os/binutils">binutils</a></li>
<li><a href="https://gitlab.redox-os.org/redox-os/bootloader-efi">bootloader-efi</a></li>
<li><a href="https://gitlab.redox-os.org/redox-os/ion">ion(shell)</a></li>
<li><a href="https://gitlab.redox-os.org/redox-os/sodium">sodium(editor)</a></li>
</ul>
<h2>独自のshellがある</h2>
<p>これは自分がshell好きだからでもあるのですが、知らないshellを見るとやっぱりワクワクしますよね… <a href="https://gitlab.redox-os.org/redox-os/ion">ion(shell)</a></p>
]]></summary>
</entry>

</feed>
