<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/tag/blender.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/tag/blender.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2021-02-20T00:00:00Z</updated>
    <entry>
    <title>fix-typoのデバッグメモ</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-20-blender-vrm-plugin-bugfix-after-merged-memo.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-20-blender-vrm-plugin-bugfix-after-merged-memo.html</id>
    <published>2021-02-20T00:00:00Z</published>
    <updated>2021-02-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>fix-typoのデバッグメモ</h1>
  <div class="ui list">
    <div class="item">Posted on February 20, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 22, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;python&#39;." href="/tags/python.html" class="ui tag label">python</a><a title="All pages tagged &#39;blender&#39;." href="/tags/blender.html" class="ui tag label">blender</a><a title="All pages tagged &#39;vrm&#39;." href="/tags/vrm.html" class="ui tag label">vrm</a><a title="All pages tagged &#39;VRM_IMPORTER_for_Blender&#39;." href="/tags/VRM_IMPORTER_for_Blender.html" class="ui tag label">VRM_IMPORTER_for_Blender</a>
  
</div>

<table>
<tbody>
<tr class="odd">
<td>該当PR</td>
<td><a href="https://github.com/saturday06/VRM_Addon_for_Blender/pull/23">saturday06/VRM<sub>IMPORTERforBlender</sub>: PR #23</a></td>
</tr>
<tr class="even">
<td>作業メモ</td>
<td><a href="https://Cj-bc.github.io/blog/posts/2021-01-11-blender-python-memo.html">https://Cj-bc.github.io/blog/posts/2021-01-11-blender-python-memo.html</a></td>
</tr>
</tbody>
</table>
<h1 id="問題">問題</h1>
<p><a href="https://github.com/saturday06/VRM_Addon_for_Blender/pull/23#issuecomment-782580000">issueでsaturday06さんが教えてくれた</a> のですが、「一度古いプラグインでVRMを読み込んだblendファイルで、新しくVRMを読み込むとエラーを吐く」</p>
<h2 id="トレースバック">トレースバック</h2>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>Traceback (most recent call last):
  File &quot;/Users/me/Library/Application
  Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/__init__.py&quot;,
  line 88, in execute
      blend_model.BlendModel(context, vrm_load.read_vrm(self.filepath, self),
      self)
        File &quot;/Users/me/Library/Application
        Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
        line 53, in __init__
            self.vrm_model_build()
              File &quot;/Users/me/Library/Application
              Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
              line 71, in vrm_model_build
                  self.make_material()
                    File &quot;/Users/me/Library/Application
                    Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
                    line 333, in make_material
                        self.build_material_from_mtoon(b_mat, mat)
                          File &quot;/Users/me/Library/Application
                          Support/Blender/2.80/scripts/addons/VRM_IMPORTER_for_Blender/importer/blend_model.py&quot;,
                          line 646, in build_material_from_mtoon
                              color_socket_to_connect=sg.inputs[tex_dic[tex_name]],
                              KeyError: &#39;bpy_prop_collection[key]: key
                              &quot;NormalmapTexture&quot; not found&#39;

                              location: &lt;unknown location&gt;:-1
</code></pre>
</div>
<h1 id="バグが起きた場所">バグが起きた場所</h1>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>__init__.ImportVRM.execute()
└blend_model.BlendModel.__init__()
 └BlendModel.vrm_model_build()
  └BlendModel.make_material()
   └BlendModel.build_material_from_mtoon()
</code></pre>
</div>
<h1 id="バグの原因">バグの原因</h1>
<p><code>node_group_create</code> は新しいNodegroupを作って返すが、</p>
<p><code>importer/blend_model.py:449</code> で <code>bpy.data.node_groups[shader_node_group_name]</code> を取ってきているところが原因。</p>
<p><code>bpy.data.node_groups</code> はblendfile内にあるnode<sub>groupsを保持しており</sub>、 既に「古いバージョンで読み込まれたVRM」がある場合 <code>bpy.data.node_groups["MToon_unversioned"]</code> は 「古いバージョンの=MToon<sub>unversioned</sub>=」=typoが含まれたものを返してしまう。 そうすると、 <code>node_group_create</code> から返されたのちに <code>.inputs["Normalmap"]</code> が読まれた際に存在せずにクラッシュしてしまう。</p>
<h1 id="解決方法">解決方法</h1>
<p>ここでできるのは</p>
<ol>
<li>今までと同じように"Normalmap"が存在しなかったら"Nomalmap"を読ませる</li>
<li>そもそも古い <code>bpy.data.node_groups["MToon_unversioned"]</code> を更新させる(どのタイミングで？)</li>
<li></li>
</ol>
]]></summary>
</entry>
<entry>
    <title>VRM_IMPORTER_for_Blender \#23 作業メモ</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-01-11-blender-python-memo.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-01-11-blender-python-memo.html</id>
    <published>2021-01-11T00:00:00Z</published>
    <updated>2021-01-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>VRM_IMPORTER_for_Blender \#23 作業メモ</h1>
  <div class="ui list">
    <div class="item">Posted on January 11, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on January 15, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;blender&#39;." href="/tags/blender.html" class="ui tag label">blender</a><a title="All pages tagged &#39;python&#39;." href="/tags/python.html" class="ui tag label">python</a>
  
</div>

<h1 id="追加されたシェーダーを探す">追加されたシェーダーを探す</h1>
<h2 id="場所の特定">場所の特定</h2>
<p>そもそもファイルがどこに追加されているのかを確かめる必要がある。 そこで、<code>__init__.py</code>を参照する。(どうでもいいけど中身のある<code>__init__.py</code>は初めて見た)<br />
Blenderは、Addonが追加されるとクラスなどを登録するために<code>register()</code>という関数を探して実行する。 以下がこのAddonの<code>register()</code>関数。 (<a href="https://github.com/saturday06/VRM_IMPORTER_for_Blender/blob/a14835bfbc573a1d8f2be2a74ed198da46a573e4/__init__.py#L277-L285">githubで確認する</a>)</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co"># アドオン有効化時の処理</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">def</span> register():</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="cf">for</span> cls <span class="kw">in</span> classes:</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>        bpy.utils.register_class(cls)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    bpy.types.TOPBAR_MT_file_import.append(menu_import)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>    bpy.types.TOPBAR_MT_file_export.append(menu_export)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>    bpy.types.VIEW3D_MT_armature_add.append(add_armature)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>    <span class="co"># bpy.types.VIEW3D_MT_mesh_add.append(make_mesh)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>    bpy.app.handlers.load_post.append(add_shaders)</span></code></pre></div>
</div>
<p>明らかに<code>bpy.app.handlers.load_post.append(add_shaders)</code>が怪しい。というか、<code>add_shaders</code>という わかりやすい名前があるので間違い無くここで追加している。 ということで<code>add_shaders</code>を見てみると (<a href="https://github.com/saturday06/VRM_IMPORTER_for_Blender/blob/a14835bfbc573a1d8f2be2a74ed198da46a573e4/__init__.py#L245-L253">githubで確認する</a>)</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="at">@persistent</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">def</span> add_shaders(<span class="va">self</span>):</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    filedir <span class="op">=</span> os.path.join(</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>        os.path.dirname(<span class="va">__file__</span>), <span class="st">&quot;resources&quot;</span>, <span class="st">&quot;material_node_groups.blend&quot;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>    )</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    <span class="cf">with</span> bpy.data.libraries.load(filedir, link<span class="op">=</span><span class="va">False</span>) <span class="im">as</span> (data_from, data_to):</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>        <span class="cf">for</span> nt <span class="kw">in</span> data_from.node_groups:</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>            <span class="cf">if</span> nt <span class="kw">not</span> <span class="kw">in</span> bpy.data.node_groups:</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>                data_to.node_groups.append(nt)</span></code></pre></div>
</div>
<h2 id="実際にshaderを追加している部分">実際にshaderを追加している部分</h2>
<p>このコードである。そして、読めば字の如くだが、レポジトリにある<code>resources/material_node_groups.blend</code> にある<code>node_groups</code>の中でBlenderに存在していないものがあれば <code>data_to.node_groups.append()</code>して追加している。<br />
結論から言うと<a href="https://docs.blender.org/api/current/bpy.types.BlendData.html?highlight=node_groups#bpy.types.BlendData.node_groups"><code>node_groups</code></a>は nodeで表現されるもの(オブジェクト？)、つまり<code>Shading</code>/<code>Textures</code>/<code>Compositin</code>に関わるものの集合である。 (<a href="https://docs.blender.org/api/current/bpy.types.NodeTree.html#bpy.types.NodeTree">公式doc</a>)<br />
type()によると、<code>bpy.data</code>は<code>bpy.types.BlendData</code>であるので、<code>node_groups</code>は <a href="https://docs.blender.org/api/current/bpy.types.BlendData.html?highlight=node_groups#bpy.types.BlendData.node_groups"><code>bpy.types.BlendData.node_groups</code></a> である。 ここで、なんとなく<code>bpy.data</code>を見てみると<code>bpy.data.node_groups</code>に追加されてることがわかる。</p>
<details>
<summary>`bpy.data.node_groups`までたどり着く道のりメモ(でもよくわからなくて落書き)</summary>
`data_to`は[`bpy.data.libraries.load`](https://docs.blender.org/api/current/bpy.types.BlendDataLibraries.html#bpy.types.BlendDataLibraries.load)から返されている。
`bpy.data`が[`BlendData`](https://docs.blender.org/api/current/bpy.types.BlendData.html)のインスタンスであることから
`bpy.data.libraries.load`は[`BlendDataLibraries.load`](https://docs.blender.org/api/current/bpy.types.BlendDataLibraries.html#bpy.types.BlendDataLibraries.load)である。  

...で、なんとなく`bpy.data`を見る、に戻る
</details>
<p><code>node_groups</code>の中で入力を受け付けてるものなら<code>.inputs</code>にある。 今回でいうと、<code>MToon</code>マテリアルにある<code>NomalmapTexture</code>というtypoを直したいので、 <code>bpy.data.node_groups['MToon_unversioned'].input['NomalmapTexture']</code>を参照する</p>
<h1 id="今行き詰まっている問題">今行き詰まっている問題</h1>
<h2 id="bpypropcollectionに追加できない">bpy<em>prop</em>collectionに追加できない</h2>
<p>これをtypoが直った<code>bpy.data.node_groups['MToon_unversioned'].input['NormalmapTexture']</code>に変えたいのだけど、 どうやら<code>input['NomalmapTexture']</code>の型である<code>bpy_prop_collection</code>がC実装なようで、普段のpythonのようにはいかない。 具体的にいうと</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>bpy.data.node_groups[<span class="st">&#39;MToon_unversioned&#39;</span>].<span class="bu">input</span>[<span class="st">&#39;NormalmapTexture&#39;</span>] <span class="op">=</span> bpy.data.node_groups[<span class="st">&#39;MToon_unversioned&#39;</span>].<span class="bu">input</span>[<span class="st">&#39;NomalmapTexture&#39;</span>]</span></code></pre></div>
</div>
<p>では以下のようにエラーを吐かれてうまくいかない。</p>
<div class="ui segment">
<div class="ui top right attached label">
python-repl
</div>
<pre class="python-repl SourceCode"><code>&gt;&gt;&gt; mtonNode = bpy.data.node_groups[&#39;MToon_unversioned&#39;]
&gt;&gt;&gt; mtoonNode.inputs[&#39;NormalmapTexture&#39;] = mtoonNode.inputs[&#39;NomalmapTexture&#39;]
Traceback (most recent call last):
  File &quot;&lt;console&gt;&quot;, line 1, in &lt;module&gt;
TypeError: bpy_prop_collection[key]: invalid key, must be a string or an int, not str</code></pre>
</div>
<h3 id="試したこと">試したこと</h3>
<p><a href="https://docs.blender.org/api/current/bpy.types.bpy_prop_collection.html?highlight=bpy_prop_collection#bpy.types.bpy_prop_collection"><code>bpy_prop_collection</code></a>のドキュメントと<code>dir(mtoonNode.inputs[0])</code>を読んでみた所、 ドキュメントには書かれていなかったけど<code>move</code>と<code>new</code>があった。</p>
<div class="ui segment">
<div class="ui top right attached label">
python-repl
</div>
<pre class="python-repl SourceCode"><code>&gt;&gt;&gt; dir(mtoonNode.inputs)
[&#39;__bool__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__doc__&#39;
, &#39;__doc__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__iter__&#39;, &#39;__len__&#39;
, &#39;__module__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__slots__&#39;, &#39;bl_rna&#39;
, &#39;clear&#39;, &#39;find&#39;, &#39;foreach_get&#39;, &#39;foreach_set&#39;, &#39;get&#39;
, &#39;items&#39;, &#39;keys&#39;, &#39;move&#39;, &#39;new&#39;, &#39;remove&#39;, &#39;rna_type&#39;, &#39;values&#39;]</code></pre>
</div>
<p>それぞれの挙動を試してみたが、どっちもうまく動かず...というか挙動がわからなかった</p>
<h4 id="new()"><code>new()</code></h4>
<details> <summary>Replの結果ですが長いので折りたたみ</summary>
``` python-repl
>>> mtoonNode.inputs
bpy.data...inputs
>>> mtoonNode
bpy.data.node_groups['MToon_unversioned']
>>> mtoonNode.inputs.new
<bpy_func NodeTreeInputs.new()>
>>> mtoonNode.inputs.new()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: NodeTreeInputs.new(): required parameter "type" not specified
>>> # mtoonNode.inputs['NomalmapTexture']から値を拝借
>>> mtoonNode.inputs.new('RGBA')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: NodeTreeInputs.new(): required parameter "name" not specified
>>> mtoonNode.inputs.new('RGBA', 'NormalmapTexture')
>>> mtoonNode.inputs
bpy.data...inputs
>>> mtoonNode.inputs['NormalmapTexture']
Traceback (most recent call last):
  File "<console>", line 1, in <module>
KeyError: 'bpy_prop_collection[key]: key "NormalmapTexture" not found'
>>> mtoonNode.inputs.items()
[('MainTexture', bpy.data...inputs[0])
, ('MainTextureAlpha', bpy.data...inputs[1])
, ('ShadeTexture', bpy.data...inputs[2])
, ('ReceiveShadow_Texture_alpha', bpy.data...inputs[3])
, ('NomalmapTexture', bpy.data...inputs[4])
, ('ShadingGradeTexture', bpy.data...inputs[5])
, ('Emission_Texture', bpy.data...inputs[6])
, ('SphereAddTexture', bpy.data...inputs[7])
, ('OutlineWidthTexture', bpy.data...inputs[8])
, ('UV_Animation_Mask_Texture', bpy.data...inputs[9])
, ('DiffuseColor', bpy.data...inputs[10])
, ('ShadeColor', bpy.data...inputs[11])
, ('EmissionColor', bpy.data...inputs[12])
, ('OutlineColor', bpy.data...inputs[13])
, ('RimColor', bpy.data...inputs[14])
, ('RimTexture', bpy.data...inputs[15])
, ('RimLightingMix', bpy.data...inputs[16])
, ('RimFresnelPower', bpy.data...inputs[17])
, ('RimLift', bpy.data...inputs[18])
, ('CutoffRate', bpy.data...inputs[19])
, ('BumpScale', bpy.data...inputs[20])
, ('ReceiveShadowRate', bpy.data...inputs[21])
, ('ShadeShift', bpy.data...inputs[22])
, ('ShadeToony', bpy.data...inputs[23])
, ('ShadingGradeRate', bpy.data...inputs[24])
, ('LightColorAttenuation', bpy.data...inputs[25])
, ('IndirectLightIntensity', bpy.data...inputs[26])
, ('OutlineWidth', bpy.data...inputs[27])
, ('OutlineScaleMaxDistance', bpy.data...inputs[28])
, ('OutlineLightingMix', bpy.data...inputs[29])
, ('OutlineWidthMode', bpy.data...inputs[30])
, ('OutlineColorMode', bpy.data...inputs[31])
, ('UV_Scroll_X', bpy.data...inputs[32])
, ('UV_Scroll_Y', bpy.data...inputs[33])
, ('UV_Scroll_Rotation', bpy.data...inputs[34])]
```
</details>
<h4 id="move()">move()</h4>
<details> <summary> Replの結果。長いため折りたたみ。 </summary>
``` python-repl
>>> mtoonNode.inputs.move()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: NodeTreeInputs.move(): required parameter "from_index" not specified
>>> mtoonNode.inputs.move(4)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: NodeTreeInputs.move(): required parameter "to_index" not specified
>>> mtoonNode.inputs.move(4, 35)
>>> mtoonNode.inputs.items()
[('MainTexture', bpy.data...inputs[0]), ('MainTextureAlpha', bpy.data...inputs[1])
, ('ShadeTexture', bpy.data...inputs[2])
, ('ReceiveShadow_Texture_alpha', bpy.data...inputs[3])
, ('NomalmapTexture', bpy.data...inputs[4])
, ('ShadingGradeTexture', bpy.data...inputs[5])
, ('Emission_Texture', bpy.data...inputs[6])
, ('SphereAddTexture', bpy.data...inputs[7])
, ('OutlineWidthTexture', bpy.data...inputs[8])
, ('UV_Animation_Mask_Texture', bpy.data...inputs[9])
, ('DiffuseColor', bpy.data...inputs[10])
, ('ShadeColor', bpy.data...inputs[11])
, ('EmissionColor', bpy.data...inputs[12])
, ('OutlineColor', bpy.data...inputs[13])
, ('RimColor', bpy.data...inputs[14])
, ('RimTexture', bpy.data...inputs[15])
, ('RimLightingMix', bpy.data...inputs[16])
, ('RimFresnelPower', bpy.data...inputs[17])
, ('RimLift', bpy.data...inputs[18])
, ('CutoffRate', bpy.data...inputs[19])
, ('BumpScale', bpy.data...inputs[20])
, ('ReceiveShadowRate', bpy.data...inputs[21])
, ('ShadeShift', bpy.data...inputs[22])
, ('ShadeToony', bpy.data...inputs[23])
, ('ShadingGradeRate', bpy.data...inputs[24])
, ('LightColorAttenuation', bpy.data...inputs[25])
, ('IndirectLightIntensity', bpy.data...inputs[26])
, ('OutlineWidth', bpy.data...inputs[27])
, ('OutlineScaleMaxDistance', bpy.data...inputs[28])
, ('OutlineLightingMix', bpy.data...inputs[29])
, ('OutlineWidthMode', bpy.data...inputs[30])
, ('OutlineColorMode', bpy.data...inputs[31])
, ('UV_Scroll_X', bpy.data...inputs[32])
, ('UV_Scroll_Y', bpy.data...inputs[33])
, ('UV_Scroll_Rotation', bpy.data...inputs[34])]
>>> mtoonNode.inputs.values()
[bpy.data...inputs[0]
, bpy.data...inputs[1], bpy.data...inputs[2]
, bpy.data...inputs[3], bpy.data...inputs[4]
, bpy.data...inputs[5], bpy.data...inputs[6]
, bpy.data...inputs[7], bpy.data...inputs[8]
, bpy.data...inputs[9], bpy.data...inputs[10]
, bpy.data...inputs[11], bpy.data...inputs[12]
, bpy.data...inputs[13], bpy.data...inputs[14]
, bpy.data...inputs[15], bpy.data...inputs[16]
, bpy.data...inputs[17], bpy.data...inputs[18]
, bpy.data...inputs[19], bpy.data...inputs[20]
, bpy.data...inputs[21], bpy.data...inputs[22]
, bpy.data...inputs[23], bpy.data...inputs[24]
, bpy.data...inputs[25], bpy.data...inputs[26]
, bpy.data...inputs[27], bpy.data...inputs[28]
, bpy.data...inputs[29], bpy.data...inputs[30]
, bpy.data...inputs[31], bpy.data...inputs[32]
, bpy.data...inputs[33], bpy.data...inputs[34]]
>>> bpy.data...inputs[1]
  File "<console>", line 1
    bpy.data...inputs[1]
              ^
SyntaxError: invalid syntax
>>>
```
</details>
]]></summary>
</entry>
<entry>
    <title>VRM_IMPORTER_for_BlenderでVRMモデルを作る際の注意点</title>
    <link href="https://cj-bc.github.io/blog/posts/2020-10-24-blender-vrmImporter-Not-Object-on-origin.html" />
    <id>https://cj-bc.github.io/blog/posts/2020-10-24-blender-vrmImporter-Not-Object-on-origin.html</id>
    <published>2020-10-24T00:00:00Z</published>
    <updated>2020-10-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>VRM_IMPORTER_for_BlenderでVRMモデルを作る際の注意点</h1>
  <div class="ui list">
    <div class="item">Posted on October 24, 2020</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November 15, 2020
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;VRM&#39;." href="/tags/VRM.html" class="ui tag label">VRM</a><a title="All pages tagged &#39;blender&#39;." href="/tags/blender.html" class="ui tag label">blender</a><a title="All pages tagged &#39;VRM_IMPORTER_for_Blender&#39;." href="/tags/VRM_IMPORTER_for_Blender.html" class="ui tag label">VRM_IMPORTER_for_Blender</a>
  
</div>

<h1 id="全てのメッシュの原点(Origin)を ワールド座標系の 原点に置く">全てのメッシュの原点(Origin)を <em>ワールド座標系の</em> 原点に置く</h1>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>There are not an object on the origin <mesh名> (もしくは) <mesh名> が原点座標にありません</p>
</blockquote>
</div>
<p>というエラーについて。単刀直入にいうと、 全てのメッシュは <strong>Originをワールド座標系の原点におく必要があります</strong></p>
<p>これは、 <strong><code>Set origin&gt; Origin to Geometry</code>とは違う</strong> ので注意してください。</p>
<p>これをするには、</p>
<ol>
<li>3Dカーソルを原点に移動</li>
<li>オブジェクトを選択</li>
<li><code>Set origin&gt; Origin to 3D cursor</code></li>
</ol>
<p>の手順を踏みます。</p>
<h1 id="追加したmeshオブジェクトのtransformは全て0(scaleは1)にする">追加したmeshオブジェクトのtransformは全て0(scaleは1)にする</h1>
<p>Blender上では全然問題なく見えますが、これをしておかないとexportした後に変な位置にオブジェクトが表示されてしまいます。 (私は<code>3tenePRO</code>で動作確認をしていますが、おそらく他でもそうなると思います。)<br />
具体的には、「全てのトランスフォームが0(scaleは1)に指定された通りに表示」されます。</p>
<h2 id="具体例:">具体例:</h2>
<p>scaleが1になっていない例 <img src="/images/sscale_isnt_1.jpeg" class="ui rounded image" alt="scaleが1じゃない" /></p>
<p>scaleが1になるように調整した例 <img src="/images/scale_is_1.jpeg" class="ui rounded image" alt="scaleが1" /></p>
<p>rotationが0になっていない例 <img src="/images/rotation_isnt_0.jpeg" class="ui rounded image" alt="rotationが0じゃない" /></p>
<p>rotationが0になっている例 <img src="/images/rotation_is_0.jpeg" class="ui rounded image" alt="rotationが0" /></p>
<h2 id="直し方">直し方</h2>
<p>Inspectorで各transformの値を確認します。そうしたら、それを覚えておき値は0に修正。 <code>Edit mode</code>に移行して、 <strong>originを中心に、軸を指定して先ほど覚えた値分</strong> 回転させます。</p>
<h2 id="最終系">最終系</h2>
<p>綺麗になりました！！</p>
<p><img src="/images/completed.jpg" class="ui rounded image" alt="全部直した" /></p>
<h1 id="Shade Textureは必ず設定する">Shade Textureは必ず設定する</h1>
<p>ShadeTextureを設定していないと、面を法線と反対側から見たときにピンク色になってしまいます。 これは、<code>Shade Color</code>が塗られているからで、それを防ぎ表面と同じものを表示したい場合は必ず設定する必要があります。 なお、<code>MainTexture</code>と同じテクスチャで問題ないと思います。</p>
<p>設定してなかった:<br />
<blockquote class="twitter-tweet" data-conversation="none" data-theme="dark"><p lang="ja" dir="ltr">色々と調節は必要そうだね <a href="https://t.co/ndXTzYKdfQ">pic.twitter.com/ndXTzYKdfQ</a></p>— mi'e himari (@mihe_himari) <a href="https://twitter.com/mihe_himari/status/1320608433352003584?ref_src=twsrc%5Etfw">October 26, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>設定した:<br />
<blockquote class="twitter-tweet" data-conversation="none" data-theme="dark"><p lang="ja" dir="ltr">他のオブジェクトにも設定してきた...ﾖｼ!! <a href="https://t.co/8tMJyUaawt">pic.twitter.com/8tMJyUaawt</a></p>— mi'e himari (@mihe_himari) <a href="https://twitter.com/mihe_himari/status/1320613366864330752?ref_src=twsrc%5Etfw">October 26, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<h1 id="todo">todo</h1>
<ul class="task-list">
<li><input type="checkbox" disabled="" />
画像入れる</li>
<li><input type="checkbox" disabled="" />
動画いれる</li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Blender docs -- data block</title>
    <link href="https://cj-bc.github.io/blog/posts/2020-08-19-blender-data-blocks.html" />
    <id>https://cj-bc.github.io/blog/posts/2020-08-19-blender-data-blocks.html</id>
    <published>2020-08-19T00:00:00Z</published>
    <updated>2020-08-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>Blender docs -- data block</h1>
  <div class="ui list">
    <div class="item">Posted on August 19, 2020</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 31, 2020
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;blender&#39;." href="/tags/blender.html" class="ui tag label">blender</a><a title="All pages tagged &#39;document&#39;." href="/tags/document.html" class="ui tag label">document</a><a title="All pages tagged &#39;translation&#39;." href="/tags/translation.html" class="ui tag label">translation</a><a title="All pages tagged &#39;wip&#39;." href="/tags/wip.html" class="ui tag label">wip</a>
  
</div>

<p>公式: <a href="https://docs.blender.org/manual/ja/2.80/files/data_blocks.html" class="uri">https://docs.blender.org/manual/ja/2.80/files/data_blocks.html</a></p>
<h1 id="Data blocks">Data blocks</h1>
<p>いかなるBlenderプロジェクトの基本単位は<code>data-block</code>です。<code>data-block</code>の例としては: meshes, objects, materials, textures, node trees, scenes, texts, brushes, そして workspace</p>
<p><code>data-block</code>は、とても異なる種類のデータの全体的な抽象であり、共通の基本的な<code>feature</code>であるプロパティと<code>behaviors</code>に重心を置いています。</p>
<p>いくつかの共通した特徴は:</p>
<ul>
<li><code>blend-file</code>の<code>primary contents</code>です。</li>
<li>再利用やインスタンス化のために、違いを参照することができます。(Child/parent, object/object-data, materials/images, in modifiers or constraints too...)</li>
<li>それぞれの名前は、<code>blend-file</code>内で同じタイプの中で<code>unique</code>です。</li>
<li>追加、削除、編集、複製が可能です。</li>
<li>ファイル間で<code>link</code>することができます。(限られた種類の<code>data-blocks</code>のみです)</li>
<li>それぞれ独自のアニメーションデータを持つことができます。</li>
<li>それぞれ<a href="https://docs.blender.org/manual/ja/2.80/files/data_blocks.html#files-data-blocks-custom-properties">Custom properties</a>を持つことができます。</li>
</ul>
<p>ユーザーは<code>typically</code>高レベルの<code>data type</code>を扱うことになります(<code>obects</code>, <code>meshes</code>など)。 複雑なプロジェクトを扱う場合、特に<code>inter-linking blend-files</code>の場合、<code>data-block</code>の管理はより重要になります。 それ用の主なエディターは<a href="https://docs.blender.org/manual/ja/2.80/editors/outliner.html">Outliner</a>です</p>
<p>Blender内の全てのデータが<code>data-block</code>なわけではありません。例えば、<code>bones</code>, <code>sequence strips</code>や<code>vertex groups</code>は違っており、 それぞれ<code>armature</code>、<code>scene</code>、<code>mesh types</code>に付属(<code>belong to</code>)しています。</p>
<h1 id="Life Time">Life Time</h1>
<p>全ての<code>data-block</code>は<code>usage counted</code>(<code>reference count</code>)を持っており、一つ以上である場合は、UIの中で<code>data-block</code>の名前の右側に<code>current user</code>の数が表示されます。</p>
<p>Blenderは、使用されていないデータは最終的に削除されるという<code>general rule</code>に従っています。</p>
<p>作業中にたくさんのデータを追加・削除することは一般的なため、全ての<code>data-block</code>を一つ一つ手動で管理する必要がないのは利点です。</p>
<p>これは、<code>blend-file</code>を書き込む際に、<code>zero user</code>な<code>data-block</code>をスキップする仕組みになっています。</p>
<h1 id="Protected">Protected</h1>
<p><code>zero user</code>な<code>data-block</code>は保存されないため、時にはユーザーのことを考えずにデータの保存を強制させたい時があるでしょう。</p>
<p>もし、<code>blend-file</code>を<code>library</code>として使っていたり、他のファイルから<code>link</code>したりされたりする目的で使っていた場合、 突然削除されないように気をつける必要があります。</p>
<p><code>data-block</code>を<code>protect</code>するためには、その<code>data-block</code>の名前の横にある盾のボタンを使用します。 そうすると、その<code>data-block</code>はblenderによって自動的に削除されることは無くなりますが、必要ならば手動で削除することができます。</p>
<h1 id="Sharing">Sharing</h1>
<p><code>data-block</code>は他の<code>data-block</code>間でも共有できます。</p>
<p>よくデータの共有が行われる例:</p>
<ul>
<li><code>materials</code>間で<code>textures</code>を共有する</li>
<li><code>objects</code>(<code>instances</code>)間で<code>meshes</code>を共有する</li>
<li><code>objects</code>間で<code>animated actions</code>を共有する。例えば、全てのライトが同時に<code>dim</code>するようにします。</li>
</ul>
<p><code>data-block</code>をファイル間でも共有できます、詳しくは:</p>
<ul>
<li><a href="https://docs.blender.org/manual/ja/2.80/files/linked_libraries.html">linked libraries</a></li>
</ul>
<h1 id="Making Single User">Making Single User</h1>
<p><code>data-block</code>が複数のユーザーによって共有されている時、あるユーザーのためにコピーを作成することができます。 そうするには、名前の右にある<code>user-count</code>ボタンを押してください。そうすることにより、その<code>data-block</code>を複製してその用途のみに<code>assign</code>します。</p>
<h2 id="注釈">注釈</h2>
<p><code>Objects</code>は<code>single-user</code>になるためにより発展的な<code>actions</code>を持っています。<a href="https://docs.blender.org/manual/ja/2.80/scene_layout/object/editing/duplication.html">彼らのドキュメント</a>を参照してください。</p>
<h1 id="Removing Data-Blocks">Removing Data-Blocks</h1>
]]></summary>
</entry>
<entry>
    <title>blenderのSmooth</title>
    <link href="https://cj-bc.github.io/blog/posts/2020-08-17-blender-auto-smooth.html" />
    <id>https://cj-bc.github.io/blog/posts/2020-08-17-blender-auto-smooth.html</id>
    <published>2020-08-17T00:00:00Z</published>
    <updated>2020-08-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>blenderのSmooth</h1>
  <div class="ui list">
    <div class="item">Posted on August 17, 2020</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 31, 2020
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;blender&#39;." href="/tags/blender.html" class="ui tag label">blender</a><a title="All pages tagged &#39;memo&#39;." href="/tags/memo.html" class="ui tag label">memo</a><a title="All pages tagged &#39;tips&#39;." href="/tags/tips.html" class="ui tag label">tips</a>
  
</div>

<p>Blenderには、面と面を補完して滑らかに表示する<code>shade smooth</code>という機能があります。 しかし、何も考えずに使おうとすると思わぬところが補完され、予期せぬ結果になることが多々起こります。</p>
<p><img src="https://pbs.twimg.com/media/Efm72cmU8AI3H5K?format=jpg&amp;name=medium" class="ui rounded image" alt="shade flatの結果" /></p>
<p><img src="https://pbs.twimg.com/media/Efm74u6UcAEU2nM?format=jpg&amp;name=medium" class="ui rounded image" alt="shade smoothの結果" /></p>
<h1 id="Auto Smoothを使おう">Auto Smoothを使おう</h1>
<p>Auto Smoothは、面の角度によって<code>shade smooth</code>と<code>shade flat</code>を使い分けてくれる機能です。 <a href="https://blender-cg.net/smooth-flat/">blender-cg.netさんの記事</a>で知りました。</p>
<p><a href="https://docs.blender.org/manual/ja/2.80/modeling/meshes/structure.html#auto-smooth">公式リファレンス(英語)</a></p>
<p>これを使うと、かなり快適に使うことができます！わーい！！</p>
<p><img src="https://pbs.twimg.com/media/Efm8n4uUYAALg-g?format=png&amp;name=small" class="ui rounded image" alt="auto smoothの場所" /></p>
<p><img src="https://pbs.twimg.com/media/Efm8pyjU8AAU01a?format=jpg&amp;name=medium" class="ui rounded image" alt="auto smoothを適用してみた結果" /></p>
]]></summary>
</entry>
<entry>
    <title>blenderマテリアル のblend modeについて</title>
    <link href="https://cj-bc.github.io/blog/posts/2020-08-16-blender-material-blend-mode.html" />
    <id>https://cj-bc.github.io/blog/posts/2020-08-16-blender-material-blend-mode.html</id>
    <published>2020-08-16T00:00:00Z</published>
    <updated>2020-08-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>blenderマテリアル のblend modeについて</h1>
  <div class="ui list">
    <div class="item">Posted on August 16, 2020</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 31, 2020
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;blender&#39;." href="/tags/blender.html" class="ui tag label">blender</a><a title="All pages tagged &#39;memo&#39;." href="/tags/memo.html" class="ui tag label">memo</a><a title="All pages tagged &#39;material&#39;." href="/tags/material.html" class="ui tag label">material</a><a title="All pages tagged &#39;3dcg&#39;." href="/tags/3dcg.html" class="ui tag label">3dcg</a>
  
</div>

<ul>
<li>Blenderのバージョン: 2.80</li>
<li>公式のリファレンス: <a href="https://docs.blender.org/manual/en/2.80/render/eevee/materials/settings.html">blender manual -- materials</a></li>
</ul>
<p>Blend modeは、表面の色の計算が終わった後にどのようにカラーバッファに影響するかを決めます。</p>
<h1 class="small-caption" id="Opaque">Opaque</h1>
<p>アルファチャンネル(=透明度)を完全に無視し、色を上書きします。これが一番早いモードです。</p>
<h1 class="small-caption" id="Additive">Additive</h1>
<p>直前の色に表面の色を加算します。アルファ値は、 <em>neutral color</em> の黒 (0.0, 0.0, 0.0, 0.0) と表面の色を混ぜるために使われます。</p>
<h1 class="small-caption" id="Multiplicative">Multiplicative</h1>
<p>直前の色と表面の色を乗算します。アルファ値は、 <em>neutral color</em> の白 (1.0, 1.0, 1.0) と表面の色を混ぜるために使われます。</p>
<h1 class="small-caption" id="Alpha Clip">Alpha Clip</h1>
<p>アルファ値がclip閾値を上回った場合のみ、直前の色は表面の色で上書きされます。</p>
<h1 class="small-caption" id="Alpha Hashed">Alpha Hashed</h1>
<p>アルファ値がランダムで決められたclip閾値を上回った場合のみ、直前の色は表面の色で上書きされます。 この統計学的なアプローチはノイズが多いですが、ソートの問題なしにアルファ値のブレンドを概算できます。レンダー設定でサンプル数を増やすと、最終的なノイズを減らすことができます。</p>
<h1 class="small-caption" id="Alpha Blending">Alpha Blending</h1>
<p>アルファ値のブレンドを使い、直前の色の上に表面の色をオーバーレイします。</p>
]]></summary>
</entry>

</feed>
