<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/tag/xmonad.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/tag/xmonad.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2021-05-10T00:00:00Z</updated>
    <entry>
    <title>XMonad.Layoutのリスト</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-05-10-xmonad-list-of-layouts.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-05-10-xmonad-list-of-layouts.html</id>
    <published>2021-05-10T00:00:00Z</published>
    <updated>2021-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1></h1>
  <div class="ui list">
    <div class="item">Posted on May 10, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 11, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;xmonad&#39;." href="/tags/xmonad.html" class="ui tag label">xmonad</a><a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" class="ui tag label">haskell</a>
  
</div>

<p>xmonadのレイアウトは、 <code>LayoutClass</code> のインスタンスであることが条件になっており、逆にいうと様々な型によって個別に実装されている。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">LayoutClass</span><span class="ot"> ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Show</span> (layout a) <span class="ot">=&gt;</span> <span class="dt">LayoutClass</span> layout a <span class="kw">where</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>      <span class="op">...</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">LayoutClass</span> <span class="dt">Tall</span> a <span class="kw">where</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>      <span class="op">...</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">LayoutClass</span> <span class="dt">Full</span> a</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="op">...</span></span></code></pre></div>
</div>
<p>これはつまり、以下のようなことが出来ないことになる</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">alist ::</span> <span class="dt">LayoutClass</span> layout a <span class="ot">=&gt;</span> [layout a]</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>alist <span class="ot">=</span> [<span class="dt">Full</span>, <span class="dt">Tall</span> def def def]</span></code></pre></div>
</div>
<p>これは以下のようなエラーになる</p>
<div class="ui segment">
<div class="ui top right attached label">
example
</div>
<pre class="example SourceCode"><code>• Couldn&#39;t match type ‘layout’ with ‘Full’
      ‘layout’ is a rigid type variable bound by
        the type signature for:
          alist :: forall (layout :: * -&gt; *) a.
                   LayoutClass layout a =&gt;
                   [layout a]
        at /tmp/vpWQTsV/198/xmonad.hs:125:1-43
      Expected type: layout a
        Actual type: Full a
    • In the expression: Full
      In the expression: [Full, Tall def def def]
      In an equation for ‘alist’: alist = [Full, Tall def def def]
    • Relevant bindings include
        alist :: [layout a] (bound at /tmp/vpWQTsV/198/xmonad.hs:126:1)
    |
126 | alist = [Full, Tall def def def]
    |          ^^^^
</code></pre>
</div>
<p>私の理解が正しければ、「 <code>Full</code> の型と <code>Tall</code> の型ちゃうやんけ!？？」ってことかなと。 正直よくわからん</p>
<p><code>Rank2Types</code> 使ってみたけど上手く動かず</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ot">alist ::</span> [<span class="kw">forall</span> l a<span class="op">.</span> (<span class="dt">LayoutClass</span> l a) <span class="ot">=&gt;</span> l a]</span></code></pre></div>
</div>
<h1 id="解法">解法</h1>
<p><a href="https://hackage.haskell.org/package/xmonad-0.15/docs/src/XMonad.Core.html#Layout">XMonad.Core.Layout</a> を使う。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">alist ::</span> [<span class="dt">Layout</span> <span class="dt">Window</span>]</span></code></pre></div>
</div>
<p>なら大丈夫</p>
<p>参考までに</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Layout</span> a <span class="ot">=</span> <span class="kw">forall</span> l<span class="op">.</span> (<span class="dt">LayoutClass</span> l a, <span class="dt">Read</span> (l a)) <span class="ot">=&gt;</span> <span class="dt">Layout</span> (l a)</span></code></pre></div>
</div>
]]></summary>
</entry>
<entry>
    <title>xmonadにstackを使う</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-05-04-xmonad-use-stack-for-compile.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-05-04-xmonad-use-stack-for-compile.html</id>
    <published>2021-05-04T00:00:00Z</published>
    <updated>2021-05-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1></h1>
  <div class="ui list">
    <div class="item">Posted on May  4, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 11, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;xmonad&#39;." href="/tags/xmonad.html" class="ui tag label">xmonad</a><a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" class="ui tag label">haskell</a><a title="All pages tagged &#39;stack&#39;." href="/tags/stack.html" class="ui tag label">stack</a><a title="All pages tagged &#39;linux&#39;." href="/tags/linux.html" class="ui tag label">linux</a>
  
</div>

<p>xmonad、デフォルトだと新しい機能を自作したりしようとするとシステムグローバルに突っ込む必要が出てきます。 それは面倒だし、管理が煩雑になるのでそもそもstackを使用できるようにします。</p>
<p>Xmonadをstackでコンパイルできるようにする</p>
<h1 id="Xmonadのコンパイル方法を指定する方法">Xmonadのコンパイル方法を指定する方法</h1>
<p>xmonadの recompileは、 <a href="https://hackage.haskell.org/package/xmonad-0.15/docs/src/XMonad.Core.html#recompile">XMonad.Core.recompile</a> によって行われています。 そして内部を読んでみると、 <code class="sourceCode haskell">cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;build&quot;</span></code> が存在すればそれを読むということが分かります。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ot">recompile ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> m <span class="dt">Bool</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>recompile force <span class="ot">=</span> io <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    cfgdir  <span class="ot">&lt;-</span> getXMonadDir</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    datadir <span class="ot">&lt;-</span> getXMonadDataDir</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="kw">let</span> binn <span class="ot">=</span> <span class="st">&quot;xmonad-&quot;</span><span class="op">++</span>arch<span class="op">++</span><span class="st">&quot;-&quot;</span><span class="op">++</span>os</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>        bin  <span class="ot">=</span> datadir <span class="op">&lt;/&gt;</span> binn</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>        err  <span class="ot">=</span> datadir <span class="op">&lt;/&gt;</span> <span class="st">&quot;xmonad.errors&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>        src  <span class="ot">=</span> cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;xmonad.hs&quot;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>        lib  <span class="ot">=</span> cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;lib&quot;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>        buildscript <span class="ot">=</span> cfgdir <span class="op">&lt;/&gt;</span> <span class="st">&quot;build&quot;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>    <span class="co">-- ...</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>    useBuildscript <span class="ot">&lt;-</span> <span class="kw">do</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>      exists <span class="ot">&lt;-</span> doesFileExist buildscript</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>      <span class="kw">if</span> exists</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>        <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>          isExe <span class="ot">&lt;-</span> isExecutable buildscript</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a>          <span class="kw">if</span> isExe</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a>            <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>              trace <span class="op">$</span> <span class="st">&quot;XMonad will use build script at &quot;</span> <span class="op">++</span> <span class="fu">show</span> buildscript <span class="op">++</span> <span class="st">&quot; to recompile.&quot;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>              <span class="fu">return</span> <span class="dt">True</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true"></a>            <span class="kw">else</span> <span class="kw">do</span></span></code></pre></div>
</div>
<p><code>cfgdir</code> は</p>
<ol>
<li><code>$XMONAD_CONFIG_DIR</code></li>
<li><code>~/.xmonad</code></li>
<li><code>$XDG_CONFIG_HOME/xmonad</code></li>
</ol>
<p>のいずれかになります。</p>
<p>今回は、変更点をあまり作らないためにとりあえず <code>~/.xmonad</code> にしようと思います(そのうち <code>XDG_CONFIG_HOME</code> 以下に移したい)</p>
<h1 id="build スクリプトを書く"><code>build</code> スクリプトを書く</h1>
<p>コマンドを使用することになるので、shellscriptで書くのが妥当かなと思います。 <code>build</code> スクリプトは以下のように呼ばれます。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a> <span class="co">-- ...</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a> <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>   <span class="co">-- temporarily disable SIGCHLD ignoring:</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>   uninstallSignalHandlers</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>   status <span class="ot">&lt;-</span> bracket (openFile err <span class="dt">WriteMode</span>) hClose <span class="op">$</span> \errHandle <span class="ot">-&gt;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>waitForProcess <span class="op">=&lt;&lt;</span> <span class="kw">if</span> useBuildscript</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>     <span class="kw">then</span> compileScript bin cfgdir buildscript errHandle</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>     <span class="kw">else</span> compileGHC bin cfgdir errHandle</span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>compileScript bin dir script errHandle <span class="ot">=</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>        runProcess script [bin] (<span class="dt">Just</span> dir) <span class="dt">Nothing</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span> (<span class="dt">Just</span> errHandle)</span></code></pre></div>
</div>
<p><code class="sourceCode haskell">runProcess</code> は、 <a href="https://hackage.haskell.org/package/process-1.6.11.0/docs/System-Process.html#v:runProcess">System.Process.runProcess</a> であり、上記の使い方だと <code>script</code> というプログラムに <code>bin</code> を引数として与え、 <code>dir</code> をワーキングディレクトリとしてから実行することになります。</p>
]]></summary>
</entry>
<entry>
    <title>うちのlightdmのログインループはxmonadが原因だった</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-04-12-lightdm-login-loop-was-caused-by-xmonad.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-04-12-lightdm-login-loop-was-caused-by-xmonad.html</id>
    <published>2021-04-12T00:00:00Z</published>
    <updated>2021-04-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>起きていたこと</h1>
  <div class="ui list">
    <div class="item">Posted on April 12, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 11, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;lightdm&#39;." href="/tags/lightdm.html" class="ui tag label">lightdm</a><a title="All pages tagged &#39;xmonad&#39;." href="/tags/xmonad.html" class="ui tag label">xmonad</a><a title="All pages tagged &#39;archlinux&#39;." href="/tags/archlinux.html" class="ui tag label">archlinux</a>
  
</div>

<p><code>pacman -Syu</code> して再起動した後、=light DM= できちんとログインしても <code>light DM</code> が再度呼び出されてしまう問題があった。</p>
<p>調べた所、色々な要因があるようだがどれも私のケースではなかった。 私のケースで問題だったのは、 「 <strong>コンパイル済みのxmonadが要求するライブラリが、アップデートによって消えていた</strong> 」 ことだった。</p>
<p>xmonadはユーザーの書いた <code>/.xmonad/xmonad.hs</code> をコンパイルして動くが、そのバイナリはいくつかの動的ライブラリを参照している。 ~pacman -Syu~の際、(例えば <code>xmonad-contrib</code> など)がアップデートされると動的ライブラリのパスが変わってしまう。 それにより、xmonadが読みにいこうとしたライブラリが存在しなくなり、エラーが起きる。 エラーのせいでxmonadが立ち上がらないため、lightdmは「Window managerが終了した」と判断(しているのか正確には知らないが)し、またログイン画面に戻ってくる。</p>
<p>直し方</p>
<ol>
<li><code>light DM</code> の画面で <code>Alt+Control+F1</code> でGUI環境を抜け、CUIを開く。</li>
<li><code>Alt+F2</code> をし、新しいターミナルを開きそこからログインする。</li>
<li><code>xmonad --recompile</code> する</li>
<li><code>Alt+Control+F7</code> でGUI環境に戻り、ログインを試すと入れるはず。</li>
</ol>
<p>他に考えられる原因</p>
<p><a href="https://askubuntu.com/questions/223501/ubuntu-gets-stuck-in-a-login-loop">色々調べる途中で見付けたaskubuntuのスレッド</a> で、ありうる原因として挙げられていたものたち:</p>
<ul>
<li>indicator-multiloadをインストールしたのが原因だった</li>
<li>flatpakが原因だった</li>
<li>~/.Xauthorityの所有者が自分ではない</li>
<li>~/.ICEauthorityの所有者が自分ではない（場合によっては必要なファイル、うちにはなかった）</li>
<li>/tmpのパーミッションが777&amp;&amp;file mode bitがt</li>
<li>sudo startxした（これのせいで~/.Xauthorityの所有者が変わってしまう模様）</li>
<li>Nvidiaの公式サイトから落としたドライバーが、きちんとテストされてないことがあるらしい</li>
<li>~/.profileにtypoや構文ミスがある</li>
<li>容量不足</li>
</ul>
<p>おまけ: xmonadを、関連パッケージがアップデートされる度に自動リビルドさせる。</p>
<p>このためには、pacmanのhook機能が使える。 pacmanのhookは、指定した条件に合致した場合に指定した内容を実行する仕組みである。 ファイルは(多分)ini形式で書かれ、デフォルトでは <code>/etc/pacman.d/hooks</code> 以下に配置される。</p>
<p>ここでは簡単に、必要最低限の解説だけする。 hookの書き方について詳しくは <a href="man:alpm-hooks">man:alpm-hooks</a> を参照してほしい。</p>
<p>先に完成形はこちら(最新版は <a href="github:Cj-bc/dotfiles">github:Cj-bc/dotfiles</a> の <code>dotfiles/pacman/hooks/xmonad.hook</code>)</p>
<p>尚、 <strong>このhookはまだテストされていません</strong> (アップデートを実行した直後に書いたため)</p>
<p>[2021-05-02]: <code>pacman -Syu</code> 何度か試していますが多分動いている…?エラーが出てる気もする…</p>
<div class="ui segment">
<div class="ui top right attached label">
dosini
</div>
<pre class="dosini SourceCode"><code>[Trigger]
Operation = Upgrade
Type = Package
Target = xmonad*
Target = haskell-*

[Action]
Description = Rebuild xmonad to prevent login loop
Exec = xmonad --recompile
When = PostTransaction
</code></pre>
</div>
<h1 id="pacman hookの作り">pacman hookの作り</h1>
<p>pacman hookは <code>[Trigger]</code> と <code>[Action]</code> の二つのブロックから構成される。 <code>[Trigger]</code> で「そのHookが実行される条件」を指定し、 <code>[Action]</code> で実行する内容を指定する。</p>
<p><code>Operation</code> で指定された操作が、 <code>Target</code> に一致するファイル・パッケージに対して実行された時にhookが実行される。</p>
<p>このhookの場合は、 <code>xmonad*</code> 若しくは <code>haskell-*</code> という名前のパッケージがUpgradeされた時、Upgrade処理が終わった後に <code>xmonad --recompile</code> を実行する。</p>
]]></summary>
</entry>

</feed>
