<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/tag/vrm.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/tag/vrm.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2022-10-18T00:00:00Z</updated>
    <entry>
    <title>2022-10-18</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-10-18.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-10-18.html</id>
    <published>2022-10-18T00:00:00Z</published>
    <updated>2022-10-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>2022/10/18</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on October 18, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on October 19, 2022
	</div>

	

	
	<a title="All pages tagged &#39;neosvr&#39;." href="/tags/neosvr.html" class="ui tag label">neosvr</a>
	
      </div>

    <div class="description">
      <p>Neosで色々いじって遊んでた。</p>
<h1 id="やったこと">やったこと</h1>
<h1 id="知ったこと">知ったこと</h1>
<h2 id="VirtualKey は、同じSlotに付いた Button コンポーネントによる入力以外受け付けない neosvr"><code>VirtualKey</code> は、同じSlotに付いた <code>Button</code> コンポーネントによる入力以外受け付けない <span class="tag" data-tag-name="neosvr"><span class="smallcaps">neosvr</span></span></h2>
<p>NeosVRの公式discordを検索してきた所、何人か同じことを質問している人がいた。 やっぱりか~みたいな感じではある。 <code>VirtualKey</code> 、文字を入力するだけでなく 「キーボードをエミュレートする」挙動をするようなのでセキュリティ面でも仕方 ないことなのかもしれない。</p>
<ol>
<li><p>一応可能な突破方法: Userの手元に"TouchButton"を出現させ、押させる</p>
<p>NeosVR公式Discordでの会話の中で、「ユーザーが一瞬だけボタンをタッチするように すれば出来るは出来るよ」みたいなことが言われていたので実際にやってみた所、十分 普通に動いた。現状はこれが唯一のハックかな？って気がする。</p></li>
</ol>
<h2 id="名前忘れちゃったけどNから始まる方の楽器群がめちゃよい!! neosvr insturments">名前忘れちゃったけどNから始まる方の楽器群がめちゃよい!! <span class="tag" data-tag-name="neosvr"><span class="smallcaps">neosvr</span></span> <span class="tag" data-tag-name="insturments"><span class="smallcaps">insturments</span></span></h2>
<p><code>Neos Essentials/Community public folders/JP Publics/個人 individuals/?</code></p>
<p>Neos閉じちゃって名前が分からない。 ギター的なのとかドラム的なのとかオカリナ的なのとか色々な種類の楽器がある。めちゃよい。</p>
<h2 id="Aegisさんのモデリングツール">Aegisさんのモデリングツール</h2>
<p>場所: <code>Essential Tools/Aegis Folder</code></p>
<p>メッシュ一枚一枚作成して最終的に一つのモデルを作ることが出来る。 <a href="https://www.youtube.com/watch?v=sap5_NvrBFk">本人の動画</a>がYouTubeにある。</p>
<h1 id="やること">やること</h1>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-10-17</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-10-17.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-10-17.html</id>
    <published>2022-10-17T00:00:00Z</published>
    <updated>2022-10-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>2022/10/17</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on October 17, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on October 19, 2022
	</div>

	

	
	
	
      </div>

    <div class="description">
      <h1 id="やったこと">やったこと</h1>
<h1 id="知ったこと">知ったこと</h1>
<h2 id="&quot;Stop Writing Dead Programs&quot; by Jack Rusher (Strange Loop 2022) - YouTube"><a href="https://www.youtube.com/watch?v=8Ab3ArE8W3s">"Stop Writing Dead Programs" by Jack Rusher (Strange Loop 2022) - YouTube</a></h2>
<ul>
<li>単純に話が面白い。</li>
<li>プログラミングは未だにバッチ処理的なものが殆んどだが、環境と直接対話していけるものの方がよくね、という</li>
</ul>
<h1 id="やること">やること</h1>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-10-16</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-10-16.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-10-16.html</id>
    <published>2022-10-16T00:00:00Z</published>
    <updated>2022-10-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>2022/10/16</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on October 16, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on October 19, 2022
	</div>

	

	
	
	
      </div>

    <div class="description">
      <p>今日はなんか色々調べたりしていたのでメモっておく。</p>
<h1 id="やったこと">やったこと</h1>
<h1 id="知ったこと">知ったこと</h1>
<h2 id="RDF">RDF</h2>
<p>知識記述言語とのこと。 それ自体は具体的な文法を持たず、N3やRDF/XML等が別個定義されている。</p>
<h2 id="ActivityPubの概要ざっくり">ActivityPubの概要ざっくり</h2>
<p><a href="https://www.w3.org/TR/activitypub/#Overview">w3.orgのOverview</a>自体が割と分かりやすい説明をしてくれているのでそれを見ると良い。</p>
<p>基本は<a href="https://www.w3.org/TR/activitystreams-core/">ActivityStreams</a>というデータフォーマットを軸にして作られている。 ソーシャルネットワークで必要となる基本的な語彙(表現したいオブジェクトや活動など)は ActivityStreams自体で表現が可能で、物足りない場合は<a href="https://www.w3.org/TR/json-ld/">JSON-LD</a>で拡張出来る。</p>
<p>サーバー⇔サーバー間のプロトコルとサーバー⇔クライアント間のプロトコルの二つの プロトコルから構成されている。</p>
<p>片方のみの実装でも可能で、例えばMisskeyとかはサーバー⇔クライアント間は独自のプロトコルを 使っていたはず。</p>
<p>ユーザーは<a href="https://www.w3.org/TR/activitypub/#actors">actors</a>として表現されており、それぞれ <code>inbox</code> と <code>outbox</code> を持つ。 <code>inbox</code> はその名の通り受け取るメッセージが入ってくる所で、Actorはそこにアクセスすることで 自分宛のメッセージを受け取る。 <code>outbox</code> は逆に「自分が世界に発信したいもの」を置く場所で、他のActorがそこを見にきたり、 サーバー間プロトコルによって転送されたりする。 「世界に発信」ではなく「特定の個人に発信」したい場合は、その個人のActorが持つ <code>inbox</code> に直接 メッセージをPOSTする。</p>
<h1 id="やること">やること</h1>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-08-30-rtsp-stream-rtsp-with-gstreamer</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-08-30-rtsp-stream-rtsp-with-gstreamer.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-08-30-rtsp-stream-rtsp-with-gstreamer.html</id>
    <published>2022-08-30T00:00:00Z</published>
    <updated>2022-08-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>GStreamerでRTSPを経由して画面映像を共有する</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on August 30, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on October 19, 2022
	</div>

	

	
	<a title="All pages tagged &#39;gstreamer&#39;." href="/tags/gstreamer.html" class="ui tag label">gstreamer</a><a title="All pages tagged &#39;rtsp&#39;." href="/tags/rtsp.html" class="ui tag label">rtsp</a><a title="All pages tagged &#39;streaming&#39;." href="/tags/streaming.html" class="ui tag label">streaming</a>
	
      </div>

    <div class="description">
      <h1 id="Tl;Dr">Tl;Dr</h1>
<p><code>x264enc</code> は <code>gst-plugins-ugly</code> に含まれています。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">git</span> clone https://github.com/GStreamer/gst-rtsp-server</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> gst-rtsp-server</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">meson</span> dest</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> dest</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ex">ninja</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ex">./examples/test-launch</span> <span class="at">-p</span> 39451 <span class="st">&quot;( ximagesrc ! videoconvert ! x264enc ! rtph264pay name=pay0 )&quot;</span></span></code></pre></div>
</div>
<p>途中で <code>ninja</code> した時にエラーを吐かれましたが、何故かその後上手くビルド出来ていたのでとりあえずそのままに しています。</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p><span class="math inline">? = 1<em>Q</em><em>w</em><em>Q</em><em>i</em> : <em>d</em><em>e</em><em>s</em><em>t</em></span> ninja [19/22] Generating gst/rtsp-server/GstRtspServer-1.0.gir with a custom command (wrapped by meson to set env) FAILED: gst/rtsp-server/GstRtspServer-1.0.gir /usr/bin/meson –internal exe –unpickle /home/me/Documents/ghq/github.com/GStreamer/gst-rtsp-server/dest/meson-private/meson<sub>exeg</sub>-ir-scanner<sub>3ab56c3a7bd05fcd52077a9babfa7bfdcb5a</sub> c3e5.dat while executing ['/usr/bin/g-ir-scanner', '–no-libtool', '–namespace=GstRtspServer', '–nsversion=1.0', '–warn-all', '–output', 'gst/rtsp-server/GstRtspServer-1.0.gir', '–add-init -section=extern void gst<sub>init</sub>(gint*,gchar**);g<sub>setenv</sub>("GST<sub>REGISTRY1</sub>.0", "/home/me/Documents/ghq/github.com/GStreamer/gst-rtsp-server/dest/gir<sub>emptyregistry</sub>.reg", TRUE);g<sub>setenv</sub> ("GST<sub>PLUGINPATH10</sub>", "", TRUE);g<sub>setenv</sub>("GST<sub>PLUGINSYSTEMPATH10</sub>", "", TRUE);gst<sub>init</sub>(NULL,NULL);', '–quiet', '–c-include=gst/rtsp-server/rtsp-server.h', '-I/home/me/Docum ents/ghq/github.com/GStreamer/gst-rtsp-server/gst/rtsp-server', '-I/home/me/Documents/ghq/github.com/GStreamer/gst-rtsp-server/dest/gst/rtsp-server', '-I/home/me/Documents/gh q/github.com/GStreamer/gst-rtsp-server/gst/rtsp-server', '-I/home/me/Documents/ghq/github.com/GStreamer/gst-rtsp-server/dest/gst/rtsp-server', '-I/home/me/Documents/ghq/githu b.com/GStreamer/gst-rtsp-server/.', '-I/home/me/Documents/ghq/github.com/GStreamer/gst-rtsp-server/dest/.', '–filelist=/home/me/Documents/ghq/github.com/GStreamer/gst-rtsp-s erver/dest/gst/rtsp-server/libgstrtspserver-1.0.so.0.1902.0.p/GstRtspServer<sub>1</sub>.0<sub>girfilelist</sub>', '–include=Gst-1.0', '–include=GstRtsp-1.0', '–include=GstNet-1.0', '–symbol-prefix=gs t', '–identifier-prefix=Gst', '–pkg-export=gstreamer-rtsp-server-1.0', '–cflags-begin', '-DG<sub>DISABLEDEPRECATED</sub>', '-I/home/me/Documents/ghq/github.com/GStreamer/gst-rtsp-server <em>gst/rtsp-server', '-I/home/me/Documents/ghq/github.com/GStreamer/gst-rtsp-server/dest/gst/rtsp-server', '-I/home/me/Documents/ghq/github.com/GStreamer/gst-rtsp-server</em>.', '- I/home/me/Documents/ghq/github.com/GStreamer/gst-rtsp-server/dest/.', '-I/usr/include/gstreamer-1.0', '-I/usr/include/glib-2.0', '-I/usr/lib/glib-2.0/include', '-I/usr/include/sys prof-4', '-I/usr/include/orc-0.4', '-I/usr/include/libmount', '-I/usr/include/blkid', '-I/usr/include/gio-unix-2.0', '-I/usr/include/gobject-introspection-1.0', '–cflags-end', '–add- include-path=/usr/share/gir-1.0', '-L/home/me/Documents/ghq/github.com/GStreamer/gst-rtsp-server/dest/gst/rtsp-server', '–library', 'gstrtspserver-1.0', '-lgstrtsp-1.0', '-lgstre amer-1.0', '-lgstsdp-1.0', '-lgio-2.0', '-lgobject-2.0', '-lglib-2.0', '-lgstrtp-1.0', '-lgstbase-1.0', '-lgstnet-1.0', '-lgstapp-1.0', '-lgirepository-1.0'] — stdout —</p>
<p>— stderr — Traceback (most recent call last): File "/usr/bin/g-ir-scanner", line 98, in &lt;module&gt; from giscanner.scannermain import scanner<sub>main</sub> File "/usr/lib/gobject-introspection/giscanner/scannermain.py", line 35, in &lt;module&gt; from giscanner.ast import Include, Namespace File "/usr/lib/gobject-introspection/giscanner/ast.py", line 29, in &lt;module&gt; from .sourcescanner import CTYPE<sub>TYPEDEF</sub>, CSYMBOL<sub>TYPETYPEDEF</sub> File "/usr/lib/gobject-introspection/giscanner/sourcescanner.py", line 34, in &lt;module&gt; from giscanner.<sub>giscanner</sub> import SourceScanner as CSourceScanner ModuleNotFoundError: No module named 'giscanner.<sub>giscanner</sub>'</p>
</blockquote>
</div>
<h1 id="動機">動機</h1>
<p>パソコンの画面をNeosVRから見たい。 でもLAN内で見ることさえ出来れば良いので外部のサーバーを経由させたくなくて、 <a href="https://www.youtube.com/watch?v=Ta8N4ZFRjJg">kokolive</a>や<a href="https://github.com/TopazChat/TopazChat">TopazChat</a>とかは使えませんでした。</p>
<p>なのでじゃぁ自分で構築するしかないかぁということで行き着いたところです。</p>
<h1 id="作りたいものの要件">作りたいものの要件</h1>
<ul>
<li>GNU/Linux上で動く</li>
<li>自分のみが見えれば良い</li>
<li>LAN内のみで完結する</li>
<li>映像配信を外部のサーバーを通さなくて良い</li>
<li>低遅延</li>
</ul>
<p>他の人と共有することは目的としていない為、LANのみで 完結する構成にしたいです。</p>
<h1 id="RTSPについて少しだけ">RTSPについて少しだけ</h1>
<p>RTSPは、ビデオや音声等のマルチメディアをリアルタイムに <u>制御する</u> ためのアプリケーション層のプロトコルです。 大切なことなのでもう一度書きますが、 <u>制御する</u> ためのプロトコルです。 ここでの制御とは例えば、再生・一時停止・停止等の操作を指します。</p>
<p>実際のデータの送受信には RTP 等の別のプロトコルを用います。</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>This protocol is intended to control multiple data delivery sessions; provide a means for choosing delivery channels such as UDP, multicast UDP, and TCP; and provide a means for choosing delivery mechanisms based upon RTP (RFC 3550).</p>
<p>— <a href="https://www.rfc-editor.org/rfc/rfc7826">https://www.rfc-editor.org/rfc/rfc7826</a>, Abstract</p>
</blockquote>
</div>
<h1 id="詳細">詳細</h1>
<p>今回、GStreamer自体についての解説はあまり含みません。 それに関しては別途記事を書くかもしれないし書かないかもしれないのですが、 もし興味がある&amp;英語おkなら<a href="https://gstreamer.freedesktop.org/documentation/tutorials/index.html">公式のチュートリアル</a>を見てみると良いと思います。</p>
<p>知らないと分からないことはないと思いますが、所々用語は普通に使うのでご容赦下さい。</p>
<h2 id="使用するサーバーを決める">使用するサーバーを決める</h2>
<p>RTSPサーバーがあり、クライアントがそこに接続してストリームを受け取るという 仕組みになっているので、まずはRTSPサーバーを建てる必要があります。 <a href="#DeveloppersIOの記事">DeveloppersIOの記事</a>には <a href="https://github.com/mpromonet/v4l2rtspserver">v4l2rtspserver</a>についても紹介されていますが、</p>
<ul>
<li>v4l2に関してよく分からなかった</li>
<li>GStreamerなら開発元に信頼がある</li>
<li>GStreamerは単純に見知っている</li>
</ul>
<p>という理由から、GStreamerを使ったものを建ててみました。</p>
<p>GStreamer公式から <a href="https://github.com/GStreamer/gst-rtsp-server">GStreamer/gst-rtsp-server</a> が提供されているので、 これを使います。</p>
<p>それ自体はライブラリとなっていますが、examplesに簡単なサーバーとして使用出来る サンプルファイルがあるのでとりあえずはこれを用いることにします。</p>
<p>幾つかありますが、今回は <a href="https://github.com/GStreamer/gst-rtsp-server/blob/master/examples/test-launch.c">gst-rtsp-server/test-launch.c at master · GStreamer/gst-rtsp-server</a> を使用しました。</p>
<h2 id="サーバーのビルド">サーバーのビルド</h2>
<p><a href="#DeveloppersIOの記事">DeveloppersIOの記事</a>では <code>autogen.sh</code> を叩いていましたが、今は <code>meson</code> に変わっていました。 <code>meson</code> にはあまり馴染みがないのですが、以下の手順でとりあえず動くものは出来ました。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># `dest&#39; にmesonにより生成されたものが格納されます。</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co"># 任意の名前で良いです。</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">meson</span> dest</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co"># `build.ninja&#39; のあるディレクトリに移動します</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> dest</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ex">ninja</span></span></code></pre></div>
</div>
<p>尚、この際にエラーを吐かれましたが無視しても動いたので一度放置しています。 <code>--internal exe</code> とかあるのでWindows用のかな？と思っていたり。</p>
<h2 id="ソースの指定、サーバーの実行">ソースの指定、サーバーの実行</h2>
<p><code>test-launch.c</code> は <code>gst-launch-1.0</code> の引数と同じ形式の文字列を引数に取り、 サーバーを起動します。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb3" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ./dest/examples/test-launch <span class="at">--help</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Usage:</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="ex">test-launch</span> [OPTION<span class="pp">?</span>] <span class="op">&lt;</span>launch line<span class="op">&gt;</span> - Test RTSP Server, Launch</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Example:</span> <span class="st">&quot;( videotestsrc ! x264enc ! rtph264pay name=pay0 pt=96 )&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="ex">Help</span> Options:</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="ex">-h,</span> <span class="at">--help</span>                        Show help options</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">--help-all</span>                        Show all help options</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="ex">--help-gst</span>                        Show GStreamer Options</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="ex">Application</span> Options:</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="ex">-p,</span> <span class="at">--port</span><span class="op">=</span>PORT                   Port to listen on <span class="er">(</span><span class="ex">default:</span> 8554<span class="kw">)</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>  <span class="ex">--disable-rtcp</span>                    Whether RTCP should be disabled <span class="er">(</span><span class="ex">default</span> false<span class="kw">)</span></span></code></pre></div>
</div>
<p><code>Example</code> にある通りに実行すると、よくブラウン管テレビとかに写ってそうなテスト映像を配信する RTSPサーバーが立ち上がります。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb4" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./dest/examples/test-launch</span> <span class="st">&quot;( videotestsrc ! x264enc ! rtph264pay name=pay0 pt=96 )&quot;</span></span></code></pre></div>
</div>
<p>上手くいかない事があった場合は、 <span class="spurious-link" target="デバッグログの出し方"><em>デバッグログの出し方</em></span> にあるように環境変数を使ってログを出してみて下さい。</p>
<h2 id="X.orgの画面をキャプチャして配信する">X.orgの画面をキャプチャして配信する</h2>
<p>問題なく動作したら次の段階に進めてみましょう。 前章ではテスト用の映像を配信していましたが、本命は「画面共有」なので 画面の映像を配信するように作り変えてみます。</p>
<p>X.org用のソースには<a href="https://gstreamer.freedesktop.org/documentation/ximagesrc/index.html">ximagesrc</a>を使用します。そのまま <code>x264enc</code> には入れられないため、一度 <code>videoconvert</code> を かましています。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb5" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./dest/examples/test-launch</span> <span class="st">&quot;( ximagesrc ! videoconvert ! x264enc ! rtph264pay name=pay0 pt=96 )&quot;</span></span></code></pre></div>
</div>
<p>変えるのは少しだけ!GStreamer楽!!</p>
<h1 id="作業時のTips">作業時のTips</h1>
<h2 id="各パーツの調べ方">各パーツの調べ方</h2>
<p><code>gst-inspect-1.0</code> を使う</p>
<h2 id="デバッグログの出し方">デバッグログの出し方</h2>
<p><code>GST_DEBUG</code> 環境変数を設定すると、デバッグログを出力させることができます。 出力するログの段階はカテゴリ毎に細かく設定することが出来ますが、 数字を直接指定することで全体に対して指定もできます。</p>
<p>ログの段階は以下の通りです</p>
<table class="ui celled table">
<thead>
<tr class="header">
<th>指定する数字</th>
<th>意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>ERROR</td>
</tr>
<tr class="even">
<td>2</td>
<td>WARN</td>
</tr>
<tr class="odd">
<td>3</td>
<td>FIXME</td>
</tr>
<tr class="even">
<td>4</td>
<td>INFO</td>
</tr>
<tr class="odd">
<td>5</td>
<td>DEBUG</td>
</tr>
<tr class="even">
<td>6</td>
<td>LOG</td>
</tr>
<tr class="odd">
<td>7</td>
<td>TRACE</td>
</tr>
<tr class="even">
<td>9</td>
<td>MEMDUMP</td>
</tr>
</tbody>
</table>
<p>例えば、 <code>WARN</code> までのログを全てのカテゴリに於いて出力したい場合は</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb6" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="va">GST_DEBUG</span><span class="op">=</span>2 <span class="ex">./dest/examples/test-launch</span> <span class="st">&quot;( videotestsrc ! x264enc ! rtph264pay name=pay0 pt=96 )&quot;</span></span></code></pre></div>
</div>
<p>のように実行します。</p>
<p>詳しい使い方は <a href="https://man.archlinux.org/man/gst-launch-1.0.1">gst-launch-1.0のmanページ</a> に記載されています。</p>
<h1 id="参考">参考</h1>
<ul>
<li><span id="DeveloppersIOの記事"></span>: <a href="https://dev.classmethod.jp/articles/amazon-kinesis-vidseo-streams-gstreamer-rtsp-server/">Kinesis Video Streams GStreamerを使用したRTSPサーバを構築し、Macから動画を送信してみました。 | DevelopersIO</a></li>
<li><a href="https://github.com/GStreamer/gst-rtsp-server/blob/master/examples/test-launch.c">gst-rtsp-server/test-launch.c at master · GStreamer/gst-rtsp-server</a></li>
<li><a href="https://www.rfc-editor.org/rfc/rfc7826">RFC 7826: Real-Time Streaming Protocol Version 2.0</a></li>
<li><a href="https://gstreamer.freedesktop.org/documentation/additional/rtp.html">RTP and RTSP support – gstreamer.freedesktop.org</a></li>
</ul>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-08-12-cairo-understanding-basics-of-cairo</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-08-12-cairo-understanding-basics-of-cairo.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-08-12-cairo-understanding-basics-of-cairo.html</id>
    <published>2022-08-12T00:00:00Z</published>
    <updated>2022-08-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>cairoの基礎的なことを学んでみた</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on August 12, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on August 15, 2022
	</div>

	

	
	<a title="All pages tagged &#39;cairo&#39;." href="/tags/cairo.html" class="ui tag label">cairo</a><a title="All pages tagged &#39;c&#39;." href="/tags/c.html" class="ui tag label">c</a><a title="All pages tagged &#39;graphic&#39;." href="/tags/graphic.html" class="ui tag label">graphic</a>
	
      </div>

    <div class="description">
      <p>cairoには、<a href="https://www.cairographics.org/tutorial/">公式のページにチュートリアルがある</a>のでこれを見て学習します。 尚、この後にcairo-xlibのHaskell用のバインディングを書きたい影響で、Cを用いて学習することにします。</p>
<p>とはいえ、チュートリアルがとても分かりやすいので英語が分かるのであればそちらを読むことを推奨します。</p>
<h1 id="cairoでのレンダリングの仕組み">cairoでのレンダリングの仕組み</h1>
<p>cairoのレンダリングは、 <code>Surface</code> 、 <code>Source</code> 、 <code>Mask</code> の3つの概念を組み合わせることで行われます。 それらは3つの板のようなもので、Surfaceの上に <code>Mask</code> を置き、その上から <code>Source</code> を載せるようにして描画されます。</p>
<p>そして、それらを保持するための仕組みとして <code>Context</code> が存在します。</p>
<h2 id="Surface">Surface</h2>
<p>Surfaceは文字通り「表面」のことで、つまり描画する対象のことです。 SVGやPDFファイル、はたまたX window systemのwindowなどを選ぶことができます。</p>
<p><code>cairo_surface_t</code> というデータ型に格納されます。</p>
<p>Surface は種類毎に作成する関数が異なります。 一例として、以下のコードは各ピクセル32bit、120x120ピクセルの画像の <code>Surface</code> を作成します。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>cairo_surface_t <span class="op">*</span>surface<span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>surface <span class="op">=</span> cairo_image_surface_create <span class="op">(</span>CAIRO_FORMAT_ARGB32<span class="op">,</span> <span class="dv">120</span><span class="op">,</span> <span class="dv">120</span><span class="op">);</span></span></code></pre></div>
</div>
<p>使用後に <a href="https://www.cairographics.org/manual/cairo-cairo-surface-t.html#cairo-surface-destroy"><code>cairo_surface_destroy()</code></a> を呼び出す必要があります。</p>
<h2 id="Source">Source</h2>
<p>Maskを通して塗られる色やパターン・画像のことです。 単色やパターン、既に作られた Surface を Source として使用する事が可能です。</p>
<h2 id="Mask">Mask</h2>
<p>SourceをSurfaceに転写する範囲を制限するマスクです。 Path や Source 等を使って作成されます。</p>
<h2 id="Path">Path</h2>
<p>ベクターグラフィックを扱ったことがある人は、その Path と思ってよいと思います。 内部でどう保存されているのかはわかりませんが、扱いとしてはベクターの線です。</p>
<p>cairoでは Path は「点と点を繋いだもの」として表現されており、その繋ぎ方を直線・円・曲線等 から選ぶことができます。</p>
<p>レンダリング時にMaskに変換されます。</p>
<h2 id="Context">Context</h2>
<p>レンダリングにおいて必要な情報を全て保持しています。 使用する <code>Surface</code>, <code>Source</code>, <code>Mask</code> をそれぞれ一つずつと付随する補助変数、そして <code>Path</code> を 使用している場合はそれも保持されています。</p>
<p><code>Context</code> は <code>cairo_t</code> というデータ型に格納されます。 また、 <code>Surface</code> と紐付けられている必要があるため、作成時には <code>Surface</code> を先に作成しておく必要があります。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>cairo_surface_t <span class="op">*</span>surface<span class="op">;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>cairo_t <span class="op">*</span>cr<span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>surface <span class="op">=</span> cairo_image_surface_create <span class="op">(</span>CAIRO_FORMAT_ARGB32<span class="op">,</span> <span class="dv">120</span><span class="op">,</span> <span class="dv">120</span><span class="op">);</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>cr <span class="op">=</span> cairo_create<span class="op">(</span>surface<span class="op">);</span></span></code></pre></div>
</div>
<p>使用後に <a href="https://www.cairographics.org/manual/cairo-cairo-surface-t.html#cairo-surface-destroy"><code>cairo_destroy()</code></a> を呼び出す必要があります。</p>
<h1 id="レンダリングの手順">レンダリングの手順</h1>
<p>実際のコードでどう書くかを書きます。 今回は、ピクセル毎32bit 120x120ピクセルの画像を作成することにします。</p>
<p>まずは <code>Surface</code> と <code>Context</code> を作成します。最後に破棄もすることを忘れずに。</p>
<p>尚、本来ならシグナルハンドリング等するべきだと思うのですが、 私はCをほぼ使っておらず疎いので書いてありません。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  cairo_surface_t <span class="op">*</span>surface<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  cairo_t <span class="op">*</span>cr<span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  surface <span class="op">=</span> cairo_image_surface_create<span class="op">(</span>CAIRO_FORMAT_ARGB32<span class="op">,</span> <span class="dv">120</span><span class="op">,</span> <span class="dv">120</span><span class="op">);</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  cr <span class="op">=</span> cairo_create<span class="op">(</span>surface<span class="op">);</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">// cairoを使う処理はここに書く</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 最後に行う</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>  cairo_destroy<span class="op">(</span>cr<span class="op">);</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  cairo_surface_destroy<span class="op">(</span>surface<span class="op">);</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div>
<p>後は、その間に描画用の処理を書いていきます。 描画用の処理は用途によって異なるためここでは省略します。代わりに、次の章に 使える関数について書き、その後に例のコードをいくつか置いておこうと思います。</p>
<h1 id="ライブラリのコード各種">ライブラリのコード各種</h1>
<h2 id="色々なSurface">色々なSurface</h2>
<p><a href="https://www.cairographics.org/manual/cairo-surfaces.html">Surfaceの一覧ページ</a> に全て載っています。 正直全てを把握しているわけではないので、詳しくはそちらを参照してください。</p>
<table class="ui celled table">
<thead>
<tr class="header">
<th>Surface名</th>
<th>どんなもの？</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Image Surfaces</td>
<td>メモリ上に保存される画像データ。これを画像に書き出し出来る。</td>
</tr>
<tr class="even">
<td>PDF Surfaces</td>
<td></td>
</tr>
<tr class="odd">
<td>PNG Support</td>
<td></td>
</tr>
<tr class="even">
<td>PostScript Surfaces</td>
<td></td>
</tr>
<tr class="odd">
<td>Recording Surfaces</td>
<td></td>
</tr>
<tr class="even">
<td>Win32 Surfaces</td>
<td></td>
</tr>
<tr class="odd">
<td>SVG Surfaces</td>
<td></td>
</tr>
<tr class="even">
<td>Quartz Surfaces</td>
<td></td>
</tr>
<tr class="odd">
<td>XCB Surfaces</td>
<td></td>
</tr>
<tr class="even">
<td>XLib Surfaces</td>
<td></td>
</tr>
<tr class="odd">
<td>XLib-XRender Backend</td>
<td></td>
</tr>
<tr class="even">
<td>Script Surfaces</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="色々なSource">色々なSource</h2>
<p>Sourceはさほど多くないです。</p>
<table class="ui celled table">
<tbody>
<tr class="odd">
<td>linear gradient(<code>cairo_pattern_create_linear()</code>)</td>
<td>linear gradientを作成します。</td>
</tr>
</tbody>
</table>
<ol>
<li><p>単色 (<code>cairo_pattern_create_rgb()</code>)</p>
<p>単色のみの Source です。</p>
<p>link: <a href="https://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-create-rgb">https://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-create-rgb</a></p></li>
<li><p>単色+Alpha (<code>cairo_pattern_create_rgba()</code>)</p>
<p>単色でもアルファチャンネルを指定する関数もあります。</p>
<p>link: <a href="https://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-create-rgba">https://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-create-rgba</a></p></li>
<li><p>linear gradient</p>
<p>link: <a href="https://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-create-linear">https://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-create-linear</a></p></li>
<li><p>Radial gradient</p>
<p>link: <a href="https://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-create-radial">https://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-create-radial</a></p></li>
<li><p>Raster Source</p>
<p>link: <a href="https://www.cairographics.org/manual/cairo-Raster-Sources.html">https://www.cairographics.org/manual/cairo-Raster-Sources.html</a></p></li>
</ol>
<h2 id="色々なMask">色々なMask</h2>
<p>Surface や Pattern、 Path を Mask として使うことが出来ます。 ちょっと疲れてきたので端折り。</p>
<h2 id="色々なPath生成関数">色々なPath生成関数</h2>
<p>最初にも述べた通り、 cairo では Path は「点と点の繋がり」で表現されています。 そのため Path の開始点は常に内部で保存されており(多分 Context の中？)、 その点から指定した点への Path が描画されるようになっています。</p>
<p>cairoでの座標系は <strong>左上が <code>(0, 0)</code> である</strong> ことに注意してください。 これを間違えると悲しいことになります。ハマりました(当事者)</p>
<ol>
<li><p>開始点の移動</p>
<p>Path の開始点を移動します。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> cairo_move_to<span class="op">(</span>cairo_t <span class="op">*</span>cr<span class="op">,</span> <span class="dt">double</span> x<span class="op">,</span> <span class="dt">double</span> y<span class="op">);</span></span></code></pre></div>
</div>
<p>これは Pathの開始点を移動する関数なので Path を作成しません。</p></li>
<li><p>直線</p>
<p>現在の座標からグローバル座標の特定の場所まで線を引きます。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> cairo_line_to<span class="op">(</span>cairo_t <span class="op">*</span>cr<span class="op">,</span> <span class="dt">double</span> x<span class="op">,</span> <span class="dt">double</span> y<span class="op">);</span></span></code></pre></div>
</div>
<p>又、相対座標で指定するには <a href="https://www.cairographics.org/manual/cairo-Paths.html#cairo-rel-line-to"><code>cairo_rel_line_to</code></a> を使用します。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> cairo_rel_line_to<span class="op">(</span>cairo_t <span class="op">*</span>cr<span class="op">,</span> <span class="dt">double</span> dx<span class="op">,</span> <span class="dt">double</span> dy<span class="op">);</span></span></code></pre></div>
</div></li>
<li><p>曲線</p>
<p>cairoでは3次ベジエ曲線(cubic Bézier spline)を使用することが出来ます。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> cairo_curve_to<span class="op">(</span>cairo_t <span class="op">*</span>cr</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>                    <span class="op">,</span> <span class="dt">double</span> x1<span class="op">,</span> <span class="dt">double</span> y1</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>                    <span class="op">,</span> <span class="dt">double</span> x2<span class="op">,</span> <span class="dt">double</span> y2</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>                    <span class="op">,</span> <span class="dt">double</span> x3<span class="op">,</span> <span class="dt">double</span> y3<span class="op">);</span></span></code></pre></div>
</div>
<p><code>(x1, y1)</code> <code>(x2, y2)</code> の二つの座標をコントロールポイントとし、 カーブの終点が <code>(x3, y3)</code> となります。</p></li>
<li><p>弧</p>
<p>弧は開始点に関わらずに描画されます。</p>
<p>弧を描く関数は <a href="https://www.cairographics.org/manual/cairo-Paths.html#cairo-arc"><code>cairo_arc()</code></a> と <a href="https://www.cairographics.org/manual/cairo-Paths.html#cairo-arc-negative"><code>cairo_arc_negative()</code></a> の2種類があり、 これは弧を描く方向のみ異なる関数です。</p>
<p><code>cairo_arc()</code> は時計周り、 <code>cairo_arc_nagative()</code> は反時計周りに弧を描きます。</p>
<p>(※ <code>cairo_arc()</code> のドキュメントの説明で"Y+方向に向かって回る"とありますが、 <strong>cairoでのY+方向は一般的には下向き</strong> であることを忘れないでください。私は嵌りました。)</p>
<p>角度はラジアンで表記されており、x+軸方向(つまり一般的には右方向)が0になっています。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb8"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> cairo_arc<span class="op">(</span>cairo_t <span class="op">*</span>cr</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>               <span class="op">,</span> <span class="dt">double</span> xc <span class="co">// 弧を描く円の中心点のx座標</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>               <span class="op">,</span> <span class="dt">double</span> yc <span class="co">// 弧を描く円の中心点のy座標</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>               <span class="op">,</span> <span class="dt">double</span> radius <span class="co">// 弧を描く円の半径</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>               <span class="op">,</span> <span class="dt">double</span> angle1 <span class="co">// ラジアンで</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>               <span class="op">,</span> <span class="dt">double</span> angle2</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>               <span class="op">);</span></span></code></pre></div>
</div></li>
<li><p>文字</p>
<p>文字を表示する方法は二通りあります。 <a href="https://www.cairographics.org/manual/cairo-text.html#cairo-show-text"><code>cairo_show_text()</code></a>を使って Path の作成と fill を同時に行うのと、 <a href="https://www.cairographics.org/manual/cairo-Paths.html#cairo-text-path"><code>cairo_text_path()</code></a> で Path を作成した後に <a href="https://www.cairographics.org/manual/cairo-cairo-t.html#cairo-fill"><code>cairo_fill()</code></a> で fill をする方法です。</p>
<p>チュートリアルによると、前者の <code>cairo_show_text()</code> の方は内部でキャッシュを持ったり効率的に動くため、 そちらを推奨するとのことです。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb9"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> cairo_show_text <span class="op">(</span>cairo_t <span class="op">*</span>cr<span class="op">,</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>utf8<span class="op">);</span></span></code></pre></div>
</div></li>
<li><p>Path を閉じる</p>
<p>現在の Path の始点と終点を繋いで Path を閉じます。 閉じられた Path には LineCaps の設定が適用されなくなります(適用する場所がない)</p>
<p>詳しくは <a href="https://www.cairographics.org/manual/cairo-Paths.html#cairo-close-path"><code>cairo_close_path()</code></a></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb10"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> cairo_close_path <span class="op">(</span>cairo_t <span class="op">*</span>cr<span class="op">);</span></span></code></pre></div>
</div></li>
</ol>
<h1 id="コード例">コード例</h1>
<p>以下のコードは、私の環境下(archlinux)にてorg-modeのTangle機能を利用して 実行し、実際に動作しているのを確認しています。</p>
<p>尚、私の環境のそれぞれのバージョンは以下の通りです:</p>
<table class="ui celled table">
<thead>
<tr class="header">
<th>ライブラリ・ツール</th>
<th>バージョン</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>gcc</td>
<td><code>gcc (GCC) 12.1.1 20220730</code></td>
</tr>
<tr class="even">
<td>cairo</td>
<td><code>1.17.6-2</code></td>
</tr>
</tbody>
</table>
<h2 id="三角形(塗り潰しなし)">三角形(塗り潰しなし)</h2>
<p>120x120ピクセル、透過ありのPNG画像に三角形を描画します。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="png-triangle.c" data-tangle="&quot;png-triangle.c&quot;"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="png-triangle.c-1"><a href="#png-triangle.c-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cairo.h&gt;</span></span>
<span id="png-triangle.c-2"><a href="#png-triangle.c-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="png-triangle.c-3"><a href="#png-triangle.c-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="png-triangle.c-4"><a href="#png-triangle.c-4" aria-hidden="true" tabindex="-1"></a>  cairo_surface_t <span class="op">*</span>surface<span class="op">;</span></span>
<span id="png-triangle.c-5"><a href="#png-triangle.c-5" aria-hidden="true" tabindex="-1"></a>  cairo_t <span class="op">*</span>cr<span class="op">;</span></span>
<span id="png-triangle.c-6"><a href="#png-triangle.c-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="png-triangle.c-7"><a href="#png-triangle.c-7" aria-hidden="true" tabindex="-1"></a>  surface <span class="op">=</span> cairo_image_surface_create<span class="op">(</span>CAIRO_FORMAT_ARGB32<span class="op">,</span> <span class="dv">120</span><span class="op">,</span> <span class="dv">120</span><span class="op">);</span></span>
<span id="png-triangle.c-8"><a href="#png-triangle.c-8" aria-hidden="true" tabindex="-1"></a>  cr <span class="op">=</span> cairo_create<span class="op">(</span>surface<span class="op">);</span></span>
<span id="png-triangle.c-9"><a href="#png-triangle.c-9" aria-hidden="true" tabindex="-1"></a>  cairo_scale<span class="op">(</span>cr<span class="op">,</span> <span class="dv">120</span><span class="op">,</span> <span class="dv">120</span><span class="op">);</span></span>
<span id="png-triangle.c-10"><a href="#png-triangle.c-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="png-triangle.c-11"><a href="#png-triangle.c-11" aria-hidden="true" tabindex="-1"></a>  cairo_set_line_width<span class="op">(</span>cr<span class="op">,</span> <span class="fl">0.1</span><span class="op">);</span></span>
<span id="png-triangle.c-12"><a href="#png-triangle.c-12" aria-hidden="true" tabindex="-1"></a>  cairo_set_source_rgb<span class="op">(</span>cr<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="png-triangle.c-13"><a href="#png-triangle.c-13" aria-hidden="true" tabindex="-1"></a>  cairo_move_to<span class="op">(</span>cr<span class="op">,</span> <span class="fl">0.5</span><span class="op">,</span> <span class="fl">0.25</span><span class="op">);</span></span>
<span id="png-triangle.c-14"><a href="#png-triangle.c-14" aria-hidden="true" tabindex="-1"></a>  cairo_line_to<span class="op">(</span>cr<span class="op">,</span> <span class="fl">0.25</span><span class="op">,</span> <span class="fl">0.75</span><span class="op">);</span></span>
<span id="png-triangle.c-15"><a href="#png-triangle.c-15" aria-hidden="true" tabindex="-1"></a>  cairo_line_to<span class="op">(</span>cr<span class="op">,</span> <span class="fl">0.75</span><span class="op">,</span> <span class="fl">0.75</span><span class="op">);</span></span>
<span id="png-triangle.c-16"><a href="#png-triangle.c-16" aria-hidden="true" tabindex="-1"></a>  cairo_line_to<span class="op">(</span>cr<span class="op">,</span> <span class="fl">0.5</span><span class="op">,</span> <span class="fl">0.25</span><span class="op">);</span></span>
<span id="png-triangle.c-17"><a href="#png-triangle.c-17" aria-hidden="true" tabindex="-1"></a>  cairo_stroke<span class="op">(</span>cr<span class="op">);</span></span>
<span id="png-triangle.c-18"><a href="#png-triangle.c-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="png-triangle.c-19"><a href="#png-triangle.c-19" aria-hidden="true" tabindex="-1"></a>  cairo_surface_write_to_png<span class="op">(</span>surface<span class="op">,</span> <span class="st">&quot;triangle.png&quot;</span><span class="op">);</span></span>
<span id="png-triangle.c-20"><a href="#png-triangle.c-20" aria-hidden="true" tabindex="-1"></a>  cairo_destroy<span class="op">(</span>cr<span class="op">);</span></span>
<span id="png-triangle.c-21"><a href="#png-triangle.c-21" aria-hidden="true" tabindex="-1"></a>  cairo_surface_destroy<span class="op">(</span>surface<span class="op">);</span></span>
<span id="png-triangle.c-22"><a href="#png-triangle.c-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div>
<p>これをコンパイルして実行すると:</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb11" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="fu">gcc</span> <span class="at">-o</span> png-triangle <span class="va">$(</span><span class="ex">pkg-config</span> <span class="at">--cflags</span> <span class="at">--libs</span> cairo<span class="va">)</span> png-triangle.c <span class="kw">&amp;&amp;</span> <span class="ex">./png-triangle</span></span></code></pre></div>
</div>
<p>以下のようなPNGファイルが生成されます。</p>
<p><img src="file:///images/triangle.png" class="ui rounded image" /></p>
<h2 id="三角形(塗り潰しあり)">三角形(塗り潰しあり)</h2>
<p>120x120ピクセル、透過ありのPNG画像に三角形を描画します。 先程のものを、 Path の中を塗り潰すようにしたものです。 <code>cairo_stroke()</code> を <code>cairo_fill()</code> に入れ替えただけです。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="png-triangle-filled.c" data-tangle="&quot;png-triangle-filled.c&quot;"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="png-triangle-filled.c-1"><a href="#png-triangle-filled.c-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cairo.h&gt;</span></span>
<span id="png-triangle-filled.c-2"><a href="#png-triangle-filled.c-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="png-triangle-filled.c-3"><a href="#png-triangle-filled.c-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="png-triangle-filled.c-4"><a href="#png-triangle-filled.c-4" aria-hidden="true" tabindex="-1"></a>  cairo_surface_t <span class="op">*</span>surface<span class="op">;</span></span>
<span id="png-triangle-filled.c-5"><a href="#png-triangle-filled.c-5" aria-hidden="true" tabindex="-1"></a>  cairo_t <span class="op">*</span>cr<span class="op">;</span></span>
<span id="png-triangle-filled.c-6"><a href="#png-triangle-filled.c-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="png-triangle-filled.c-7"><a href="#png-triangle-filled.c-7" aria-hidden="true" tabindex="-1"></a>  surface <span class="op">=</span> cairo_image_surface_create<span class="op">(</span>CAIRO_FORMAT_ARGB32<span class="op">,</span> <span class="dv">120</span><span class="op">,</span> <span class="dv">120</span><span class="op">);</span></span>
<span id="png-triangle-filled.c-8"><a href="#png-triangle-filled.c-8" aria-hidden="true" tabindex="-1"></a>  cr <span class="op">=</span> cairo_create<span class="op">(</span>surface<span class="op">);</span></span>
<span id="png-triangle-filled.c-9"><a href="#png-triangle-filled.c-9" aria-hidden="true" tabindex="-1"></a>  cairo_scale<span class="op">(</span>cr<span class="op">,</span> <span class="dv">120</span><span class="op">,</span> <span class="dv">120</span><span class="op">);</span></span>
<span id="png-triangle-filled.c-10"><a href="#png-triangle-filled.c-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="png-triangle-filled.c-11"><a href="#png-triangle-filled.c-11" aria-hidden="true" tabindex="-1"></a>  cairo_set_line_width<span class="op">(</span>cr<span class="op">,</span> <span class="fl">0.1</span><span class="op">);</span></span>
<span id="png-triangle-filled.c-12"><a href="#png-triangle-filled.c-12" aria-hidden="true" tabindex="-1"></a>  cairo_set_source_rgb<span class="op">(</span>cr<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="png-triangle-filled.c-13"><a href="#png-triangle-filled.c-13" aria-hidden="true" tabindex="-1"></a>  cairo_move_to<span class="op">(</span>cr<span class="op">,</span> <span class="fl">0.5</span><span class="op">,</span> <span class="fl">0.25</span><span class="op">);</span></span>
<span id="png-triangle-filled.c-14"><a href="#png-triangle-filled.c-14" aria-hidden="true" tabindex="-1"></a>  cairo_line_to<span class="op">(</span>cr<span class="op">,</span> <span class="fl">0.25</span><span class="op">,</span> <span class="fl">0.75</span><span class="op">);</span></span>
<span id="png-triangle-filled.c-15"><a href="#png-triangle-filled.c-15" aria-hidden="true" tabindex="-1"></a>  cairo_line_to<span class="op">(</span>cr<span class="op">,</span> <span class="fl">0.75</span><span class="op">,</span> <span class="fl">0.75</span><span class="op">);</span></span>
<span id="png-triangle-filled.c-16"><a href="#png-triangle-filled.c-16" aria-hidden="true" tabindex="-1"></a>  cairo_line_to<span class="op">(</span>cr<span class="op">,</span> <span class="fl">0.5</span><span class="op">,</span> <span class="fl">0.25</span><span class="op">);</span></span>
<span id="png-triangle-filled.c-17"><a href="#png-triangle-filled.c-17" aria-hidden="true" tabindex="-1"></a>  cairo_fill<span class="op">(</span>cr<span class="op">);</span></span>
<span id="png-triangle-filled.c-18"><a href="#png-triangle-filled.c-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="png-triangle-filled.c-19"><a href="#png-triangle-filled.c-19" aria-hidden="true" tabindex="-1"></a>  cairo_surface_write_to_png<span class="op">(</span>surface<span class="op">,</span> <span class="st">&quot;triangle-filled.png&quot;</span><span class="op">);</span></span>
<span id="png-triangle-filled.c-20"><a href="#png-triangle-filled.c-20" aria-hidden="true" tabindex="-1"></a>  cairo_destroy<span class="op">(</span>cr<span class="op">);</span></span>
<span id="png-triangle-filled.c-21"><a href="#png-triangle-filled.c-21" aria-hidden="true" tabindex="-1"></a>  cairo_surface_destroy<span class="op">(</span>surface<span class="op">);</span></span>
<span id="png-triangle-filled.c-22"><a href="#png-triangle-filled.c-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div>
<p>これをコンパイルして実行すると:</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb12" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="fu">gcc</span> <span class="at">-o</span> png-triangle-filled <span class="va">$(</span><span class="ex">pkg-config</span> <span class="at">--cflags</span> <span class="at">--libs</span> cairo<span class="va">)</span> png-triangle-filled.c <span class="kw">&amp;&amp;</span> <span class="ex">./png-triangle-filled</span></span></code></pre></div>
</div>
<p>以下のようなPNGファイルが生成されます。</p>
<p><img src="file:///images/triangle-filled.png" class="ui rounded image" /></p>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-07-21-hakyll-how-to-fixnot-enough-bytes-runtime-error</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-07-21-hakyll-how-to-fixnot-enough-bytes-runtime-error.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-07-21-hakyll-how-to-fixnot-enough-bytes-runtime-error.html</id>
    <published>2022-07-21T00:00:00Z</published>
    <updated>2022-07-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>Enough bytesランタイム例外の原因と対処の一例</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on July 21, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on July 21, 2022
	</div>

	

	
	<a title="All pages tagged &#39;hakyll&#39;." href="/tags/hakyll.html" class="ui tag label">hakyll</a><a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" class="ui tag label">haskell</a>
	
      </div>

    <div class="description">
      <p><a href="https://github.com/Cj-bc/blog">私のHakyll製のこのブログ</a>のコードをいじっていたとき、コンパイルは問題なかったが 実行時に以下のような例外を吐いた。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">blog:</span> Data.Binary.Get.runGet at position 269: not enough bytes</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">CallStack</span> <span class="er">(</span><span class="ex">from</span> HasCallStack<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="ex">error,</span> called at libraries/binary/src/Data/Binary/Get.hs:351:5 in binary-0.8.8.0:Data.Binary.Get</span></code></pre></div>
</div>
<p>これは、どこかで <code>Snapshot</code> に入れた値が <code>Binary</code> のインスタンスを持たない型であった 可能性がある。</p>
<p>一番気をつけるべき(と個人的に思う)のは、 <strong>そのうちの一つが <code>Text</code> 型であること</strong> だ。 <code>Text</code> は実は <code>Binary</code> のインスタンスを持たない (持ってそうなのに)。 <a href="https://hackage.haskell.org/package/text-2.0/docs/Data-Text.html#t:Text">hackage</a>を確認すれば 明白だろう。 なので、 <strong>Snapshotに入れる際は必ず <code>unpack</code> してあげる必要がある</strong> 。</p>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-07-17-haskell-profiling-with-stack-2-7-5</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-07-17-haskell-profiling-with-stack-2-7-5.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-07-17-haskell-profiling-with-stack-2-7-5.html</id>
    <published>2022-07-17T00:00:00Z</published>
    <updated>2022-07-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>stack 2.7.5でのProfilingの仕方メモ</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on July 17, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on July 21, 2022
	</div>

	

	
	<a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" class="ui tag label">haskell</a><a title="All pages tagged &#39;stack&#39;." href="/tags/stack.html" class="ui tag label">stack</a><a title="All pages tagged &#39;profiling&#39;." href="/tags/profiling.html" class="ui tag label">profiling</a>
	
      </div>

    <div class="description">
      <p>Stackを用いたHaskellプロジェクトのプロファイリングについて、 色々な情報を試したけれどうまく行かなかったのでメモ。</p>
<p>上手くいった例と、ダメだった例とを掲載します。</p>
<h1 id="プロファイリングの前提知識的なもの">プロファイリングの前提知識的なもの</h1>
<p>時間とメモリ使用量(time and space)に関するプロファイリングのための機能は、 GHC自体が提供してくれています(<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html">公式ドキュメント</a>)</p>
<p>このGHCが提供する機能は、コンパイル時と実行時にRSTオプションを切り替えることで 様々なプロファイルを取ることが出来ます。 コンパイルする際にプロファイリングを取れるようにコンパイルし、 実行時のオプションによって具体的な動作を決める感じですね。</p>
<p>詳しくは公式のドキュメントを参照してください。 (私もあまり詳しくないので)</p>
<p>ですが、 <strong>これはstackから直接使うことはできません(少なくとも、最善ではない)</strong> 。 stackのbuildコマンドには <code>--ghc-options</code> というオプションがあるため これに渡したくなるものですが、そうではなく他のフラグを使う必要があります。</p>
<h1 id="上手くいった方法">上手くいった方法</h1>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> build <span class="at">--profile</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> exec <span class="at">--profile</span> <span class="at">--</span> <span class="op">&lt;</span>EXE_NAME<span class="op">&gt;</span> +RTS <span class="at">-p</span></span></code></pre></div>
</div>
<p>ドキュメント: <a href="https://github.com/commercialhaskell/stack/blob/1be685aa6fa1e68caa1fd4b657d389ac782f8e1c/doc/GUIDE.md#debugging">commercialhaskell/stack – doc/GUIDE.md#debugging</a></p>
<p>どちらにも <code>--profile</code> が必要そうです。</p>
<p>追記:</p>
<p>片方外したら動かなかったのですが、検証環境を綺麗に出来ていなかった 疑惑が出たため、もしかしたら片方でも動くかもしれません。</p>
<h1 id="ダメだった方法">ダメだった方法</h1>
<h2 id="-ghc-options &#39;-prof&#39;"><code>-ghc-options '-prof'</code></h2>
<p><code>-prof</code> というのは、GHCにおいて<span class="spurious-link" target="*プロファイリングの前提知識的なもの"><em>プロファイリングの前提知識的なもの</em></span>で書いた 「GHCのプロファイリング機能」を使うためのフラグです。</p>
<p>素のGHCでプロファイリングをする際は、ビルド時に <code>-prof</code> オプションが 必要だ、ということで愚直につけてみると怒られます。 (提示されたリンク先の内容も古いです)</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> stack build <span class="at">--ghc-options</span> <span class="st">&#39;-prof&#39;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Error:</span> When building with stack, you should not use the <span class="at">-prof</span> GHC option</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Instead,</span> please use <span class="at">--library-profiling</span> and <span class="at">--executable-profiling</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ex">See:</span> https://github.com/commercialhaskell/stack/issues/1015</span></code></pre></div>
</div>
<h2 id="--profile なし"><code>--profile</code> なし</h2>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb3" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> clean</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> exec <span class="at">--</span> <span class="op">&lt;</span>EXE_NAME<span class="op">&gt;</span> +RTS <span class="at">-p</span></span></code></pre></div>
</div>
<p>stackから見るように言われる<a href="https://github.com/commercialhaskell/stack/issues/1015">commercialhaskell/stack#1015</a>では この方法で動いたとの記述があるが、動きませんでした。</p>
<p>これはどうやらstack 1系からstack 2系になった際に変わったようで、 <a href="https://github.com/commercialhaskell/stack/commit/7bde3936768d365e0a1fdb70c945769ce388ab15">ドキュメントの更新コミット</a>に説明とリンクがあります。</p>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-07-11-evmc4u-with-univrm-0-101-0-and-uniy-2021</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-07-11-evmc4u-with-univrm-0-101-0-and-uniy-2021.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-07-11-evmc4u-with-univrm-0-101-0-and-uniy-2021.html</id>
    <published>2022-07-11T00:00:00Z</published>
    <updated>2022-07-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>EVMC4U v3.8をUniVRM 0.101.0とUnity 2021.3.1f1でとりあえず動かす</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on July 11, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on July 14, 2022
	</div>

	

	
	<a title="All pages tagged &#39;unity&#39;." href="/tags/unity.html" class="ui tag label">unity</a><a title="All pages tagged &#39;evmc4u&#39;." href="/tags/evmc4u.html" class="ui tag label">evmc4u</a><a title="All pages tagged &#39;univrm&#39;." href="/tags/univrm.html" class="ui tag label">univrm</a>
	
      </div>

    <div class="description">
      <h1 id="最初に">最初に</h1>
<p>この記事は非公式かつ、EVMC4Uを触って1日目の個人が書いています。</p>
<p><strong>記事の内容はテストされておらず、公式でサポートされているわけでもありません</strong></p>
<p>本当に動かすようにした所までなのでまだ見掛けていない不具合がある可能性は 十分にありますので、もしも参考にされる際はお気をつけ下さい。責任は負えません。</p>
<h1 id="この記事の目的">この記事の目的</h1>
<ul>
<li>とりあえずUnity 2021.3.1f1で動くようにする
<ul>
<li><del>(パソコンの容量的にUnityのバージョン増やしたくないので…)</del></li>
</ul></li>
<li>ついでなのでUniVRMもアプデしてみる</li>
</ul>
<h1 id="環境">環境</h1>
<table class="ui celled table">
<tbody>
<tr class="odd">
<td>Unity</td>
<td>2021.3.1f1</td>
</tr>
<tr class="even">
<td>UniVRM</td>
<td>0.101.0</td>
</tr>
<tr class="odd">
<td>EVMC4U</td>
<td>ExternalRecieverPack<sub>v38</sub>(但し少し修正します)</td>
</tr>
</tbody>
</table>
<h1 id="やっていき">やっていき</h1>
<p>まずUnityを立ち上げ Unity 2021.3.1f1の3Dテンプレートでプロジェクトを作成し、 普通にUniVRMを導入します。</p>
<h2 id="UniVRM 0.101.0の読み込み">UniVRM 0.101.0の読み込み</h2>
<p>今回は UPMを用いて、 <code>manifest.json</code> を編集することで導入しました。 個人的にはパッケージは記載して管理する方がすき。</p>
<div class="ui segment">
<div class="ui top right attached label">
javascript
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript SourceCode"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>{</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;dependencies&quot;</span><span class="op">:</span> {</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">///</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;com.vrmc.vrmshaders&quot;</span><span class="op">:</span> <span class="st">&quot;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.101.0&quot;</span><span class="op">,</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;com.vrmc.gltf&quot;</span><span class="op">:</span> <span class="st">&quot;https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#v0.101.0&quot;</span><span class="op">,</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;com.vrmc.univrm&quot;</span><span class="op">:</span> <span class="st">&quot;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM#v0.101.0&quot;</span><span class="op">,</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;com.vrmc.vrm&quot;</span><span class="op">:</span> <span class="st">&quot;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM10#v0.101.0&quot;</span><span class="op">,</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">///</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
</div>
<p>これに関しては <a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.101.0">vrm-c/UniVRMのリリース</a>に書いてあるやつです。</p>
<h2 id="修正箇所1: VRMの読み込み時 VRMData を介する">修正箇所1: VRMの読み込み時 <code>VRMData</code> を介する</h2>
<p>UniVRM 0.82あたりでの変更点(らしい)です。</p>
<p>ドキュメント: <a href="https://vrm-c.github.io/UniVRM/ja/api/0_82_runtime_import.html">https://vrm-c.github.io/UniVRM/ja/api/0_82_runtime_import.html</a></p>
<ul>
<li><code>VRMImporterContext</code> に渡す前に、 <code>GltfData</code> を <code>GltfData</code> に変換する必要が出来た</li>
<li><code>VRMImporterContext</code> Disposeで破棄する必要が出来た</li>
</ul>
<p>ので、 <code>vrmImporter</code> を使ってる辺りを <code>using</code> で囲みます。 囲まないタイプの <code>using</code> もあるらしいけどUnityで使われてるC#のバージョン では対応してるんですかね…?調べるの面倒だったのでこちらで。</p>
<div class="ui segment">
<div class="ui top right attached label">
diff
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff SourceCode"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>  GlbLowLevelParser glbLowLevelParser = new GlbLowLevelParser(null, VRMdata);</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  GltfData gltfData = glbLowLevelParser.Parse();</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="va">+ VRMData vrm = new VRMData(gltfData);</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="st">- VRMImporterContext vrmImporter = new VRMImporterContext(gltfData);</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="va">+ using (VRMImporterContext vrmImporter = new VRMImporterContext(vrm)( {</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  ...</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="va">+ }</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div>
<h2 id="修正箇所2: VRMImporterContext.LoadAsyncが IAwaitCaller を実装した型を引数に取るように">修正箇所2: VRMImporterContext.LoadAsyncが <code>IAwaitCaller</code> を実装した型を引数に取るように</h2>
<p>ドキュメント: <a href="https://vrm-c.github.io/UniVRM/ja/api/0_87_runtime_import.html">https://vrm-c.github.io/UniVRM/ja/api/0_87_runtime_import.html</a></p>
<ul>
<li>同期的に読み込む場合は <code>ImmediateCaller</code> を与える</li>
<li>非同期的に読み込む場合は <code>RuntimeOnlyAwaitCaller</code> を与える</li>
</ul>
<p>今回は単純に簡単そうだったので <code>ImmediateCaller</code> を与えましたが、 実際にはもうちょい考えた方が良いのかもしれません。 まぁすぐに <code>await</code> して待ってるし同じ…?(あまり非同期得意ではない)</p>
<div class="ui segment">
<div class="ui top right attached label">
diff
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff SourceCode"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="st">- RuntimeGltfInstance instance = await vrmImporter.LoadAsync();</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="va">+ RuntimeGltfInstance instance = await vrmImporter.LoadAsync(VRMShaders.ImmediateCaller);</span></span></code></pre></div>
</div>
<p>参考までに、UniVRMのサンプルでは <code>m_useAsync</code> プロパティで <code>IAWaitCaller</code> を変えている実装がありました。 (<a href="https://github.com/vrm-c/UniVRM/blob/2f6b5224b641ea8b7919610e0955a0a810a16c3c/Assets/VRM10_Samples/VRM10Viewer/VRM10ViewerUI.cs#L447">Assets/VRM10<sub>Samples</sub>/VRM10Viewer/VRM10ViewerUI.cs#L447</a>)</p>
<div class="ui segment">
<div class="ui top right attached label">
csharp
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode csharp SourceCode"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>awaitCaller<span class="op">:</span> m_useAsync<span class="op">.</span><span class="fu">enabled</span> <span class="op">?</span> <span class="op">(</span>IAwaitCaller<span class="op">)</span><span class="kw">new</span> <span class="fu">RuntimeOnlyAwaitCaller</span><span class="op">()</span> <span class="op">:</span> <span class="op">(</span>IAwaitCaller<span class="op">)</span><span class="kw">new</span> <span class="fu">ImmediateCaller</span><span class="op">(),</span></span></code></pre></div>
</div>
<h2 id="(一旦) おわり!">(一旦) おわり!</h2>
<p>おわり!これでとりあえず読み込めるようになります。 UniVRM 0.101.0 で読み込んだモデルを使い、WaidayoのiPhone版アプリと 接続して使っていますが全く問題ないです。今の所。</p>
<p>多分だけどUnity 2021にした影響は特になさそうでした。 まぁ保証は出来無い。</p>
<h2 id="今回対応していないが参考">今回対応していないが参考</h2>
<p>とりあえず上記をやれば動くようにはなりましたが、 他にも本来修正すべき所があるぽいので追記。</p>
<p>ちなみに、こうした更新情報については、 <a href="https://vrm-c.github.io/UniVRM/ja/api/index.html">https://vrm-c.github.io/UniVRM/ja/api/index.html</a> で提供されているようです。 正直<a href="https://vrm.dev/">vrm.dev</a>から分かりやすくリンクされていないのでGithubレポジトリ直接漁ってて見付けました… 見逃してる人もいそうなのでここに。</p>
<p>(ちなみに<a href="https://vrm.dev/univrm/programming/index.html">https://vrm.dev/univrm/programming/index.html</a>に一応あります。う~ん深いね!)</p>
<ol>
<li><p><code>GltfData</code> も Disposeする必要がある</p>
<p>ドキュメント: <a href="https://vrm-c.github.io/UniVRM/ja/api/0_95_dispose.html">https://vrm-c.github.io/UniVRM/ja/api/0_95_dispose.html</a></p>
<p>らしいです。 今回私は急いでいたので、これなくても動いたのでそのままにしましたが お行儀は多分全くよくない。ので修正した方がいいんだと思います。</p></li>
<li><p>高レベルAPI</p>
<p>ドキュメント: <a href="https://vrm-c.github.io/UniVRM/ja/api/0_95_highlevel.html">https://vrm-c.github.io/UniVRM/ja/api/0_95_highlevel.html</a></p>
<p>よくある用途に対して高レベルAPIが提供されたらしいです。 多分ここら辺みながら直した方がよかったのかもしれない…?</p></li>
</ol>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-06-30-pyworld-trying</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-06-30-pyworld-trying.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-06-30-pyworld-trying.html</id>
    <published>2022-06-30T00:00:00Z</published>
    <updated>2022-06-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>WORLDのPythonラッパーpyworldを試す</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on June 30, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on July 14, 2022
	</div>

	

	
	<a title="All pages tagged &#39;pyworld&#39;." href="/tags/pyworld.html" class="ui tag label">pyworld</a><a title="All pages tagged &#39;WORLD&#39;." href="/tags/WORLD.html" class="ui tag label">WORLD</a>
	
      </div>

    <div class="description">
      <p>前々からLinuxで使えるボイチェンが欲しくて、何度かWORLDをおすすめされていたのだけれど C++があまり得意ではないので二の足を踏んでいた。 (最初は出来るだけオリジナルを使用したい民なので、pyworldの方はまだ試すつもりがなかった)</p>
<p>でも、まぁそろそろやる気が出たのでPython版を使ってみる。</p>
<p>ちなみに、Grallion2とかはLinux対応しているらしいので既存のもので良いならそっちの方が良いと 思う。</p>
<h1 id="今回の目標">今回の目標</h1>
<p>最終的には自分用のボイチェンを作りたいのでリアルタイム処理を したいのだが、とりあえずは音声ファイルを変換するのを出来るようにする。</p>
<h1 id="やることの大雑把な流れ">やることの大雑把な流れ</h1>
<p>大雑把な流れとしては、以下の通り。</p>
<ol>
<li>音声を読み込む</li>
<li>WORLDがモノラルしか受け付けないようなので、チャンネルを分離する</li>
<li>WORLDの関数を用いて、それぞれ要素を分解する</li>
<li>ピッチ・フォルマントをそれぞれいじる</li>
<li>合成する</li>
<li>音声を書き出す</li>
</ol>
<h1 id="使用ライブラリ">使用ライブラリ</h1>
<p>音声合成などに関してはpyworldを用いるとして、他の処理に用いるものを。</p>
<table class="ui celled table">
<tbody>
<tr class="odd">
<td>音声変換</td>
<td>pyworld</td>
</tr>
<tr class="even">
<td>wavファイル読み込み</td>
<td>soundfile</td>
</tr>
</tbody>
</table>
<p>尚wavファイルの読み込みには <code>scipy</code> を使うこともできるらしい。</p>
<h1 id="環境構築">環境構築</h1>
<p>グローバルに入れるの嫌だけど、ffi使う都合でC関連のものを グローバルに入れなきゃいけなくてめんどくせーー!!のでDockerで環境を閉じ込める。 ついでに可搬性も手に入るしね。</p>
<p>ちなみにnixも試したが、手元の環境で上手く動かせなかったのでDocker。</p>
<h2 id="ベースイメージ">ベースイメージ</h2>
<p>ベースは軽ければ特にこだわりがないので、 <code>python:3.9-alpine</code> を使う。</p>
<p>pythonのバージョンは、確か3.10だと上手く動かなかったので3.9にした記憶がある。 ただ、python以外の依存パッケージ系を色々入れてなかったので、その影響だったのかもしれない。 Dockerイメージ作り直すのが容量的にキツいのでそのまま3.9にしてある。</p>
<div class="ui segment">
<div class="ui top right attached label">
dockerfile
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode dockerfile SourceCode"><code class="sourceCode dockerfile"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">FROM</span> python:3.9-alpine</span></code></pre></div>
</div>
<h2 id="pyworldの導入">pyworldの導入</h2>
<p>pyworldはC++で書かれたWORLDのラッパーなので、g++を必要とすることに注意。 最初これに気付かなくて困った。</p>
<div class="ui segment">
<div class="ui top right attached label">
dockerfile
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode dockerfile SourceCode"><code class="sourceCode dockerfile"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">RUN</span> apk add g++ </span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">RUN</span> pip install pyworld</span></code></pre></div>
</div>
<h2 id="soundfileの導入">soundfileの導入</h2>
<p>注意点として、 <strong>libsndfile/libffiは dev版を入れる</strong> こと! さもなくば、ヘッダファイルがなくて怒られる。</p>
<p>あとbuild-baseもいる。(はず)</p>
<div class="ui segment">
<div class="ui top right attached label">
dockerfile
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode dockerfile SourceCode"><code class="sourceCode dockerfile"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>run apk add libsndfile-dev libffi-dev build-base</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">RUN</span> pip install soundfile</span></code></pre></div>
</div>
<h1 id="コーディング">コーディング</h1>
<h2 id="ボイチェンの基本的なしくみ">ボイチェンの基本的なしくみ</h2>
<p>凄い大雑把だが、ボイチェンは声の <em>ピッチ</em> と <em>フォルマント</em> をそれぞれ変換してやることで実装されている。</p>
<p>ピッチが音の高さ、フォルマントが声色と呼ばれているやつだ。</p>
<p>正直ここらへんは専門ではないので、詳しくは調べてほしい。気が向いたらそれ関連の リンクについても纏めようと思う。</p>
<p>で、これらのうち、特にフォルマントは簡単に取得できるものではなく、 「推定」を行う必要がある。</p>
<p>WORLDはここらへんをよしなにしてくれる。</p>
<h2 id="wavファイルの読み込み">wavファイルの読み込み</h2>
<p>まずは読み込む。 読み込むといったってpyworldで使える形式でないと意味がないわけなので先にそこを説明する。</p>
<p>pyworldの関数は</p>
<ul>
<li>一次元</li>
<li>メモリーレイアウトが 'C'</li>
<li>Double型の中身を持つ</li>
</ul>
<p><code>numpy.ndarray</code> を要求する。 これはそれぞれの関数の中の定義でも書かれているが、 <a href="https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder/blob/130c3abdeaeefc1dae3fdf7d2f2dba61938e58b5/pyworld/pyworld.pyx#L625-L658">wav2worldの実装</a> でも書かれている。</p>
<p>なので、 <code>numpy.ndarray</code> として読み込めるものなら何でも良いだろう。</p>
<p>とりあえず見た範囲では、以下の二つのライブラリが使用例があった。</p>
<ul>
<li><a href="https://docs.scipy.org/doc/scipy/tutorial/io.html#wav-sound-files-scipy-io-wavfile">scipy.io.wavfile</a>(使用されている記事: <a href="https://qiita.com/ohtaman/items/84426cee09c2ba4abc22">音声合成システム WORLD に触れてみる - Qiita</a>)</li>
<li><a href="https://pysoundfile.readthedocs.io/en/latest/">pysoundfile</a> (使用されている記事: <a href="https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder/blob/f3c811fb3ce2693b45bd6411c511f60d2d308ed1/demo/demo.py">pyworldのデモコード</a>)</li>
</ul>
<p>今回は、デモコードで使われていたという理由から <code>pysoundfile</code> を採用した。</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>soundfile.read(<span class="st">&quot;filename&quot;</span>)</span></code></pre></div>
</div>
<h2 id="チャンネルの分離">チャンネルの分離</h2>
<p>pyworldの関数達は次元数が1の <code>ndarray</code> しか受け付けないわけだが、 1チャンネル辺り1次元で作られるため 元の音源がステレオ以上だと次元が多すぎてエラーを吐かれてしまう。</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> pw.wav2world(data, samplerate)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>Traceback (most recent call last):</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  File <span class="st">&quot;&lt;stdin&gt;&quot;</span>, line <span class="dv">1</span>, <span class="kw">in</span> <span class="op">&lt;</span>module<span class="op">&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  File <span class="st">&quot;pyworld/pyworld.pyx&quot;</span>, line <span class="dv">654</span>, <span class="kw">in</span> pyworld.pyworld.wav2world</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  File <span class="st">&quot;pyworld/pyworld.pyx&quot;</span>, line <span class="dv">93</span>, <span class="kw">in</span> pyworld.pyworld.dio</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="pp">ValueError</span>: Buffer has wrong number of dimensions (expected <span class="dv">1</span>, got <span class="dv">2</span>)</span></code></pre></div>
</div>
<p>なので、音源が2チャンネル以上ある場合は切り分けてあげる必要がある。 <code>soundfile</code> で読み込んでいる場合、これをするには</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>data[:,<span class="dv">0</span>]</span></code></pre></div>
</div>
<p>のように、二つ目の添字をいじってあげることで取れる。 ここら辺の説明は面倒なので、というか結構色々あるので調べてみてほしい。 <code>numpy.ndarray</code> の構造までは知らなくていいと思うが、添字アクセスの仕方を知っていれば まぁわかると思う。</p>
<p><strong>そしてここで注意</strong></p>
<p>こうして制作したデータは、メモリ上で連続して存在しないため、 pyworldの関数に渡すことができない。 そのため、</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>data[:,<span class="dv">0</span>].copy(order<span class="op">=</span><span class="st">&#39;C&#39;</span>)</span></code></pre></div>
</div>
<p>として並べ替えてあげる必要がある。 尚、これについては少し後にもう少しだけ詳しく書いてある。</p>
<h2 id="ピッチ・フォルマント推定">ピッチ・フォルマント推定</h2>
<p>これはもうworldにおまかせ。詳しいことはわからん。 色々関数があるが、一括で欲しいパラメータを全て取得出来る <code>wav2world</code> を使用する。</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb8"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>f0, sp, ap <span class="op">=</span> pw.wav2world(data[:,<span class="dv">0</span>].copy(order<span class="op">=</span><span class="st">&#39;C&#39;</span>), samplerate)</span></code></pre></div>
</div>
<h2 id="ピッチ・フォルマントをいじる">ピッチ・フォルマントをいじる</h2>
<p>ここは一番手間がかかる所。先程取り出したパラメーターをよしなに変える。 正直ここは調整の話になってくると思うので、今はよくわからん。<a href="https://qiita.com/ohtaman/items/84426cee09c2ba4abc22">参考にしていた記事</a>にあった所を ちょっと弄っている所。</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb9"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> f <span class="kw">in</span> <span class="bu">range</span>(converted_sp.shape[<span class="dv">1</span>]):</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    converted_sp[:, f] <span class="op">=</span> sp[:, <span class="bu">int</span>(f<span class="op">/</span><span class="fl">1.2</span>)]</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>converted_f0 <span class="op">=</span> f0<span class="op">*</span><span class="dv">2</span></span></code></pre></div>
</div>
<h2 id="合成する">合成する</h2>
<p>これももうお任せ、 <code>pyworld.synthesize</code> に <code>pyworld.wav2world</code> した時の戻り値(とそれを いじったもの)を用いることで合成できる。</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb10"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>pw.synthesize(converted_f0, converted_sp, ap, samplerate)</span></code></pre></div>
</div>
<h2 id="書き出し">書き出し</h2>
<p>書き出しする際は、それぞれ分けていたチャンネルを一つに結合させる必要がある。</p>
<p><code>numpy.ndarray</code> を結合する関数は色々あるが、とりあえず <a href="https://numpy.org/doc/stable/reference/generated/numpy.stack.html#numpy.stack">numpy.stack</a> を使うと 簡潔に出来たのでこれでいく。</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb11"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>np.stack((ch1, ch2), axis<span class="op">=</span><span class="dv">1</span>)</span></code></pre></div>
</div>
<p>こうすると、元の形と同じ形式になる。</p>
<p>これを後は書き込む。</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb12"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>soundfile.write(OUT_FILE, result, samplerate)</span></code></pre></div>
</div>
<h1 id="実装の注意点">実装の注意点</h1>
<h2 id="pyworld.wav2worldはモノラル音源を期待する(らしい)">pyworld.wav2worldはモノラル音源を期待する(らしい)</h2>
<p>実際のドキュメントとか見たわけではないが、2chのwav音源を引数に与えた所 以下のようなエラーを出された。</p>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>Traceback (most recent call last):
File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
File &quot;pyworld/pyworld.pyx&quot;, line 654, in pyworld.pyworld.wav2world
File &quot;pyworld/pyworld.pyx&quot;, line 93, in pyworld.pyworld.dio
ValueError: Buffer has wrong number of dimensions (expected 1, got 2)
</code></pre>
</div>
<p>(ちなみにこれはReplでの表記なので実際に出たものとはほんの少し違うと思うが、まぁ大体同じ。)</p>
<p>なので、 <u>チャンネルをそれぞれ分けて変換する必要がある</u> らしい。</p>
<ol>
<li><p>チャンネルを分離する</p>
<p><code>soundfile.read()</code> で読み込んだデータは、nx2行列 (多分。2xnだったりする？？numpyの行列表現の順序に自信がない) として表現されている。サンプル数がn、チャンネル数が2のデータだ。</p>
<p>これを愚直に取り出すと、以下のようになる</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb14"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>FILENAME <span class="op">=</span> <span class="st">&quot;入力に使いたいファイル名&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> soundfile.read(FILENAME)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>ch1 <span class="op">=</span> data[:,<span class="dv">0</span>]</span></code></pre></div>
</div>
<p>しかし、これをそのまま利用しようとすると「C-contiguous」でないため怒られる。</p>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>&gt;&gt;&gt; pw.wav2world(data[:,0], samplerate)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;pyworld/pyworld.pyx&quot;, line 654, in pyworld.pyworld.wav2world
  File &quot;pyworld/pyworld.pyx&quot;, line 93, in pyworld.pyworld.dio
ValueError: ndarray is not C-contiguous
</code></pre>
</div>
<p>この原因は、 <code>ch1</code> が内部構造として非連続的である(？)ことが原因らしい。</p>
<p>ここら辺の情報は色々探したが日本語・英語共に見付けられなかったので、原文をそのまま 書くと「The data is in a single, C-style contiguous segment.」じゃなかったのが問題だったらしい。 (情報元は<a href="https://numpy.org/doc/stable/reference/generated/numpy.ndarray.flags.html">numpy.ndarray.flagsのドキュメント</a>の <code>C_CONTIGUOUS</code> の部分)</p>
<p>これは推測だが、恐らく、 <code>ch1</code> に含まれる値は実際の値をコピーしているのではなく、 元の <code>data</code> の中に飛び飛びで存在する値を参照しており、連続的ではないのだと思われる。 これだとC言語側に渡した時に連続したアドレスから値が取得できないため、問題になってしまうのだろうなと 感じた。</p>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre id="~C_CONTIGUOUS~ かどうかの確認方法" class="SourceCode"><code>&gt;&gt;&gt; data.flags
  C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  WRITEBACKIFCOPY : False

&gt;&gt;&gt; data[:,0].flags
  C_CONTIGUOUS : False
  F_CONTIGUOUS : False
  OWNDATA : False
  WRITEABLE : True
  ALIGNED : True
  WRITEBACKIFCOPY : False

</code></pre>
</div>
<p>そこで、 <code>C_CONTIGUOUS</code> に変換していく必要がでてきた。</p>
<p>色々な方法があるのかもしれないが、今回は <a href="https://numpy.org/doc/stable/reference/generated/numpy.ndarray.copy.html">numpy.ndarray.copy()</a> を利用する。</p>
<p><code>copy()</code> はその <code>ndarray</code> のコピーを返す関数で、 パラーメーター引数 <code>order</code> を設定することでメモリーレイアウト (直訳、適切な訳があれば知りたい)を変更できる。デフォルトは <code>C</code> らしいが、明記しておいた。</p>
<div class="ui segment">
<div class="ui top right attached label">
python
</div>
<div class="sourceCode" id="cb16"><pre class="sourceCode python SourceCode"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>data[:,<span class="dv">0</span>].copy(order<span class="op">=</span><span class="st">&#39;C&#39;</span>)</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="co"># これで、きちんと pyworld.wav2world に渡せるレイアウトになる。</span></span></code></pre></div>
</div></li>
</ol>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://qiita.com/ohtaman/items/84426cee09c2ba4abc22">音声合成システム WORLD に触れてみる - Qiita</a></li>
<li><a href="https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder">JeremyCCHsu/Python-Wrapper-for-World-Vocoder</a></li>
<li><a href="https://stackoverflow.com/questions/26778079/valueerror-ndarray-is-not-c-contiguous-in-cython">python - ValueError: ndarray is not C-contiguous in cython - Stack Overflow</a></li>
</ul>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-06-21-skk-azik-tring</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-06-21-skk-azik-tring.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-06-21-skk-azik-tring.html</id>
    <published>2022-06-21T00:00:00Z</published>
    <updated>2022-06-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>DDSKKでAZIKを始めてみた</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on June 21, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on June 22, 2022
	</div>

	

	
	<a title="All pages tagged &#39;skk&#39;." href="/tags/skk.html" class="ui tag label">skk</a><a title="All pages tagged &#39;日本語入力&#39;." href="/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A5%E5%8A%9B.html" class="ui tag label">日本語入力</a><a title="All pages tagged &#39;azik&#39;." href="/tags/azik.html" class="ui tag label">azik</a><a title="All pages tagged &#39;emacs&#39;." href="/tags/emacs.html" class="ui tag label">emacs</a>
	
      </div>

    <div class="description">
      <p>長らくDDSKKを使った日本語入力をしてきたが、そろそろかなり慣れてきたので AZIKも導入してみる。</p>
<h1 id="導入手順">導入手順</h1>
<p>導入手順はとても簡単で、とりあえず <a href="info:skk#AZIK">info:skk#AZIK</a> を読めばことたりる。 が、まぁ</p>
<h2 id="1. AZIKを有効にする">1. AZIKを有効にする</h2>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(setq skk-use-azik t)
</code></pre>
</div>
<p>を <code>/.skk.el</code> に書き込む。</p>
<h2 id="2. DDSKKを再起動する">2. DDSKKを再起動する</h2>
<p>変数を設定しただけでは反映されないようなので、 <code>skk-restart</code> (help:skk-restart) で再起動をかける。</p>
<h1 id="使ってみた感想">使ってみた感想</h1>
<p>導入してから1日ほど使ってみた。 主な用途はテキストファイルの記述、この記事と+3000文字くらい書いたくらい。</p>
<p>使い始めた最初は結構戸惑った。というか今もそう。</p>
<p>慣れたら便利そうだなとは感じた。 慣れるまでやっぱり時間がかかる。特に、「っ」の入力と「ん」の入力で詰まる。</p>
<p>例えば</p>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>使って
</code></pre>
</div>
<p>と打ちたい場合、今の自分のDDSKK+AZIK環境では</p>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>TukaXtute 
</code></pre>
</div>
<p>と打つのだが、従来通り</p>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>Tukatte
</code></pre>
</div>
<p>と打ってしまうことがある。(ちなみにそうすると <code>つかたちえ</code> となる)</p>
<h2 id="良い所">良い所</h2>
<p>AZIKを使い込んでの評価はまだ出来無いが、 とりあえず始めるにあたっての評価ということで。</p>
<ol>
<li><p>基本の配列が変わらない</p>
<p>まず、「基本は普段通りの配列」であることは本当に嬉しい。 これのお影で、普通にAZIKにしたまま普段使いが出来る。</p>
<p>そうじゃなかったら長期休暇でもない限り試そうと思えんて…</p>
<p>特に、キー配列すら大体JIS配列のみみたいな現代では、 あまり異なりすぎるインプットメゾットに切り替えることが難しい。 他の環境を使い辛くなるからだ。</p>
<p>このAZIKくらいなら、まぁ他の環境での作業の時もそこまで作業に支障が出ないだろうと思える。</p></li>
<li><p>少しづつ試せる</p>
<p>基本の配列が変わらないことにも影響されるが、少しずつ機能を試すことが出来る。 一気に覚えようとすると結構タフなのでありがたい。</p>
<p>今は「;」による「っ」の入力と、「◯ん」の入力(kzで「かん」とか) を試している</p></li>
<li><p>意外とそれなりに情報がある</p>
<p>意外とインターネットには情報がある。少し調べると色んなブログがまぁあるし、 そもそも公式ページが詳しいのでそれで事足りる。今の所。</p></li>
</ol>
<h2 id="困った所">困った所</h2>
<p>今少し試してみていて、気になる部分をば。幾つかは解決策があるし幾つかはない。</p>
<ol>
<li><p><code>shi</code> で「し」が打てない</p>
<p>これは私の困った日本語入力のクセみたいな所がある。 私は何故か分からないが「し」の入力だけ「shi」と打ってきていた。 が、AZIKではこの入力では「すうい」となってしまう。</p>
<p>ちなみにこの文章で出てくる「し」も大体最初「すうい」と入力してしまって書き直している。 今の「してしまって」とか地獄だ。ぴぇ。</p>
<p>まぁ、これは「si」で打てた方がどちらにせよ短いし慣らそうと思う。</p></li>
<li><p><code>sticky-shift</code> の設定をしてると変換のタイミングで「っ」を素直に打てない</p>
<p>AZIKでは、「;」で「っ」を入力する。 しかし、DDSKKでは</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(setq skk-sticky-key &quot;;&quot;)
</code></pre>
</div>
<p>とかしているとDDSKKの変換モード中で送り仮名入力に移ってしまう。 (そして初心者だった頃にこれを設定していた私は気付かずに暫く苦労した)</p>
<p>なので、DDSKK+AZIKにしたい民は</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(setq skk-sticky-key nil)
</code></pre>
</div>
<p>とかして無効化するか、他のキーに割り当てしなおす必要がある。</p>
<p>ちなみに私は今の今まで存在に気付いておらず使われてなかったので素直に消した。</p></li>
<li><p>かな入力モードの状態で <code>+</code> が打てない</p>
<p>恐らく、ハード的にはJIS配列・内部的にはUS配列とかいう 特殊なキーボードの使い方をしているのが原因だろうけど、 かなモードで <code>+</code> を打つと、変換モードになって「っ」が入力されてしまう。</p>
<p>これはSKKのみの時には見られなかった挙動で、試しに <code>skk-use-azik</code> を <code>nil</code> にして みると無くなるのでAZIKのせいなのは確定だろう。</p>
<p>実装を追ってみると、どうやら help:skk-azik-keyboard-type が <code>jp106</code> 若しくは <code>jp-pc98</code> の際には help:skk-set-henkan-point-key に <code>?+</code> が 追加されるらしい。(<a href="https://github.com/skk-dev/ddskk/blob/master/skk-azik.el#L540-L549">skk-dev/ddskk – skk-azik.el#L540-L549</a>)</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>((eq skk-azik-keyboard-type &#39;jp106)
      (setq skk-set-henkan-point-key
            (append &#39;(?+) skk-set-henkan-point-key))
      (setq skk-downcase-alist
            (append &#39;((?+ . ?\;)) skk-downcase-alist))
      (setq skk-azik-keyboard-specific-additional-rom-kana-rule-list
            &#39;((&quot;@&quot; nil skk-toggle-characters)
              (&quot;x@&quot; nil skk-today)
              (&quot;`&quot; nil skk-set-henkan-point-subr)
              (&quot;:&quot; nil &quot;ー&quot;))))
</code></pre>
</div>
<p>help:skk-azik-keyboard-type はデフォルトでは <code>jp106</code> 、今確認しても手元のは <code>jp106</code> なので、このコードは実行されているはずで、 <code>?+</code> が help:skk-set-henkan-point-key に入っているはずなので確認してみる。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(seq-find (lambda (x) (eq ?+ x)) skk-set-henkan-point-key)
</code></pre>
</div>
<p>入ってるのがわかる。 これを削除してみると</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(setq skk-set-henkan-point-key (seq-remove (lambda (x) (eq ?+ x)) skk-set-henkan-point-key))
</code></pre>
</div>
<p>困った挙動が無くなった。</p>
<p>しかし他の設定も見ると上手く自分の環境に適応する <code>skk-azik-keyboard-type</code> が ないため、ここは後で自分で少し書き換えようかと思う。</p></li>
</ol>
<h1 id="その他Tips">その他Tips</h1>
<h2 id="DDSKKの何かと機能が競合して使い辛い!">DDSKKの何かと機能が競合して使い辛い!</h2>
<p>まず何の機能が競合しているのかを把握する必要がある。 当たり前だけど。</p>
<p>その際、 help:describe-key を使ってもあまり上手くいかない (全て help:skk-insert と言われてしまう)。</p>
<p><code>info</code> を引く人ならば <a href="info:skk#キー索引">info:skk#キー索引</a> を使うのが良い。</p>
    </div>
  </div>
  

</div>
]]></summary>
</entry>

</feed>
