<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/tag/Ixed.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/tag/Ixed.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2021-05-19T00:00:00Z</updated>
    <entry>
    <title>HaskellのIxedインスタンスを自作型につける</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-05-14-haskell-make-Ixed-instance.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-05-14-haskell-make-Ixed-instance.html</id>
    <published>2021-05-19T00:00:00Z</published>
    <updated>2021-05-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>HaskellのIxedインスタンスを自作型につける</h1>
  <div class="ui list">
    <div class="item">Posted on May 19, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on May 19, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;Haskell&#39;." href="/tags/Haskell.html" class="ui tag label">Haskell</a><a title="All pages tagged &#39;Ixed&#39;." href="/tags/Ixed.html" class="ui tag label">Ixed</a>
  
</div>

<p>数学的解説はわかりませんごめんなさい。誰か補足があれば <a href="https://github.com/Cj-bc/blog">blogのレポジトリ</a> にissueでも残してください() Haskellなのでとりあえず hoogleを参照します。 <code>Ixed</code> の定義は以下の通りです</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Ixed</span> m <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  <span class="co">-- |</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  <span class="co">-- /NB:/ Setting the value of this &#39;Traversal&#39; will only set the value in</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>  <span class="co">-- &#39;at&#39; if it is already present.</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>  <span class="co">-- If you want to be able to insert /missing/ values, you want &#39;at&#39;.</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [a,b,c,d] &amp; ix 2 %~ f</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>  <span class="co">-- fromList [a,b,f c,d]</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [a,b,c,d] &amp; ix 2 .~ e</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>  <span class="co">-- fromList [a,b,e,d]</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [a,b,c,d] ^? ix 2</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>  <span class="co">-- Just c</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>  <span class="co">--</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>  <span class="co">-- &gt;&gt;&gt; Seq.fromList [] ^? ix 2</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>  <span class="co">-- Nothing</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a><span class="ot">  ix ::</span> <span class="dt">Index</span> m <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> m (<span class="dt">IxValue</span> m)</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a>  default<span class="ot"> ix ::</span> <span class="dt">At</span> m <span class="ot">=&gt;</span> <span class="dt">Index</span> m <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> m (<span class="dt">IxValue</span> m)</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>  ix <span class="ot">=</span> ixAt</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>  <span class="ot">{-# INLINE ix #-}</span></span></code></pre></div>
</div>
<p><code>Ixed</code> は <code>Lens</code> の提供する型の一つで、 <code>Map</code> のような型の値に対して 値を <code>traverse</code> するシンプルな <code>Traversal</code> を提供するものです。</p>
<p>簡潔に言うと、 <strong>リスト等の要素にLensでアクセスできるようにするやつ</strong> みたいなざっくりとした理解をしています。</p>
<p>また、これに関連するオープンな型ファミリーとして <code>Index</code> と <code>IxValue</code> があります</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Index</span> (<span class="ot">s ::</span> <span class="op">*</span>)<span class="ot"> ::</span> <span class="op">*</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="co">-- | This provides a common notion of a value at an index that is shared by both &#39;Ixed&#39; and &#39;At&#39;.</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">IxValue</span> (<span class="ot">m ::</span> <span class="op">*</span>)<span class="ot"> ::</span> <span class="op">*</span></span></code></pre></div>
</div>
<p><code>Ixed</code> において、 <code>Index</code> はインデックスの型、 <code>IxValue</code> はそこに格納されている 値の型です。</p>
<p>作る</p>
<p>とりあえず作り始めます。</p>
<p>前提として、今回~Ixed~のインスタンスを作るのは以下の型です。 元のファイルは <a href="https://github.com/Cj-bc/playground/blob/0fb982f28f7ab0444ffd2ad59eacc3cd904b99ba/haskell/hit-n-blow/src/HitNBlow/Type.hs#L15-20">Cj-bc/playground – hit-n-blow</a> で使われているものです。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">-- | Represents each Pin</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Pin</span> <span class="ot">=</span> <span class="dt">Red</span> <span class="op">|</span> <span class="dt">Blue</span> <span class="op">|</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">White</span> <span class="op">|</span> <span class="dt">Purple</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co">-- | One Set of Pins that user will guess </span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Lane</span> <span class="ot">=</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div>
</div>
<p><code>Ixed</code> の定義に特に制限がかかれていないので、 <code>ix</code> を定義することにします。 そのために、 <code>ix</code> で使用される <code>Index</code> と <code>IxValue</code> を定義することにします。</p>
<h1 id="Index">Index</h1>
<p><code>Index</code> はあまり説明がありませんが、型の情報からすると恐らく「添字に使う型」 の定義であろうと推測が出来ます。 (名前が <code>Index</code> であること、 <code>ix</code> において最初に取ること等。又、 既にあるインスタンスを確認するのも良い方法だと思います。)</p>
<p><code>Lane</code> において添字は <code>Int</code> です。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Index</span> <span class="dt">Lane</span> <span class="ot">=</span> <span class="dt">Int</span></span></code></pre></div>
</div>
<h1 id="IxValue">IxValue</h1>
<p>同様ですが、今度はそれぞれの中身の型を定義します。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">IxValue</span> <span class="dt">Lane</span> <span class="ot">=</span> <span class="dt">Maybe</span> <span class="dt">Pin</span></span></code></pre></div>
</div>
<h1 id="Ixed">Ixed</h1>
<p><code>Ixed</code> 本体に行きます!!</p>
<p><code>ix</code> の型は</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Index</span> m <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> m (<span class="dt">IxValue</span> m)</span></code></pre></div>
</div>
<p>で、今回は <code>m</code> が <code>Lane</code> なので具体的な型にすると</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Traversal&#39;</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span></code></pre></div>
</div>
<p>ということになります。</p>
<p>で、 <code>Lens</code> 少ししか分からんので一つ疑問が浮かびます</p>
<p><strong>&gt;&gt;&gt;&gt;&gt; <code>Traversal'</code> ってナニよ!!!!! &lt;&lt;&lt;&lt;&lt;</strong></p>
<h1 id="Traversal&#39; ってナニよ!">Traversal' ってナニよ!</h1>
<p>はい。名前は知ってるけど使い方良く分からずに放置してた子ですね。 定義によると</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Traversal&#39;</span> s a <span class="ot">=</span> <span class="dt">Traversal</span> s s a a</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Traversal</span> s t a b <span class="ot">=</span> <span class="kw">forall</span> f<span class="op">.</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> f t</span></code></pre></div>
</div>
<p>ついでなので <a href="https://hackage.haskell.org/package/lens-5.0.1/docs/Control-Lens-Type.html#t:Traversal"><code>Traversal</code></a> の定義も載せておきました。 <code>Lens</code> と同じように、実体はただの関数ですね。</p>
<p><code>Lens</code> よりも制限の緩い型で <code>Traversable</code> の型関数である <code>traverse</code> の一般化らしいです。 しっかりと理解はしていないが、まぁ型を考えれば作れてしまうのでとりあえずは ふんわりと掴んだ状態で作ってみます。</p>
<p>あ、ちなみに <code>Traversal'</code> は単純に、値の更新等した時に型が変化しないものですね。</p>
<p>参考:</p>
<ul>
<li><a href="https://fumieval.hatenablog.com/entry/2015/07/14/223329">lensパッケージのオプティクス(弱い順) – モナドとわたしとコモナド</a></li>
</ul>
<h1 id="ix を作る"><code>ix</code> を作る</h1>
<p>さて、 <code>Traversal'</code> がわかったので <code>ix</code> を作れ(る気がし)ます。 <code>Traversal'</code> を置き換えてみると:</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Traversa&#39;</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Traversal</span> <span class="dt">Lane</span> <span class="dt">Lane</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span>) (<span class="dt">Maybe</span> <span class="dt">Pin</span>)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a><span class="ot">ix ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="kw">forall</span> f<span class="op">.</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (<span class="dt">Maybe</span> <span class="dt">Pin</span> <span class="ot">-&gt;</span> f (<span class="dt">Maybe</span> <span class="dt">Pin</span>) <span class="ot">-&gt;</span> <span class="dt">Lane</span> <span class="ot">-&gt;</span> f <span class="dt">Lane</span></span></code></pre></div>
</div>
<p>となります(forallの位置は少し自信がないけど多分あってる)</p>
<p><code>Int</code> は元々 <code>Index m</code> だった部分なので、今興味のあるインデックス(に該当する数字)が来るのがわかります。</p>
<p>又、元の <code>Traversal'</code> の部分も要は「中身( <code>Maybe Pin</code> )に作用する関数を受け取り、作用させた 結果を返す」わけなので、その通りに実装します。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Ixed</span> <span class="dt">Lane</span> <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>  ix <span class="dv">1</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> <span class="op">&lt;$&gt;</span> g a <span class="op">&lt;*&gt;</span> b <span class="op">&lt;*&gt;</span> c <span class="op">&lt;*&gt;</span> d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>  ix <span class="dv">2</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a <span class="op">&lt;$&gt;</span> g b <span class="op">&lt;*&gt;</span> c <span class="op">&lt;*&gt;</span> d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>  ix <span class="dv">3</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a b <span class="op">&lt;$&gt;</span> g c <span class="op">&lt;*&gt;</span> d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>  ix <span class="dv">4</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a b c <span class="op">&lt;$&gt;</span> g d <span class="op">&lt;*&gt;</span> e</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>  ix <span class="dv">5</span> <span class="ot">=</span> \g l<span class="op">@</span>(<span class="dt">Lane</span> a b c d e) <span class="ot">-&gt;</span> <span class="dt">Lane</span> a b c d <span class="op">&lt;$&gt;</span> g e</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>  ix _ <span class="ot">=</span> \_ l <span class="ot">-&gt;</span> <span class="fu">pure</span> l</span></code></pre></div>
</div>
<p>多分動いた!!</p>
]]></summary>
</entry>

</feed>
