<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/tag/latex.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/tag/latex.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2024-01-26T00:00:00Z</updated>
    <entry>
    <title>2024-01-26-emacs-embed-typst-code-instead-of-latex</title>
    <link href="https://cj-bc.github.io/blog/posts/2024-01-26-emacs-embed-typst-code-instead-of-latex.html" />
    <id>https://cj-bc.github.io/blog/posts/2024-01-26-emacs-embed-typst-code-instead-of-latex.html</id>
    <published>2024-01-26T00:00:00Z</published>
    <updated>2024-01-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>Org modeで埋め込みLaTeXの代わりにtypstを使う</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on January 26, 2024</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on January 30, 2024
	</div>

	

	
	<a title="All pages tagged &#39;org-mode&#39;." href="/tags/org-mode.html" class="ui tag label">org-mode</a><a title="All pages tagged &#39;emacs&#39;." href="/tags/emacs.html" class="ui tag label">emacs</a>
	
      </div>

    <div class="description">
      <p><a href="https://typst.app">typst</a>、便利ですよね。 <span
class="math inline"><em>L</em><sup><em>A</em></sup><em>T</em><sub><em>E</em></sub><em>X</em></span>
の代わりのPDF生成手段として、とても
使いやすいです。さて、そんなtypstをOrg modeの組込み <span
class="math inline"><em>L</em><sup><em>A</em></sup><em>T</em><sub><em>E</em></sub><em>X</em></span>
の代わ
りに使いたいな~と思ったこと、ありませんか？私は大いにあります。</p>
<p>ということで、 <u>手軽に</u> 埋め込み <span
class="math inline"><em>L</em><sup><em>A</em></sup><em>T</em><sub><em>E</em></sub><em>X</em></span>
をtypstに入れ替える方法を 書き記しておこうと思います。</p>
<h1 id="概要">概要</h1>
<p>既存の埋め込みLaTeXの文法の一部を用いたまま、LaTeXとして解釈される所を
typstとして扱うように実装に手を加えます。</p>
<p>インライン埋め込みでは <code>$y = ax^2 + bx + c$</code>
みたいな書き方を、ブロッ クとして埋め込むには <code>\begin{...}</code>
で囲んで以下のような書き方をする必 要があります。</p>
<div class="ui segment">
<div class="ui top right attached label">
org
</div>
<div class="sourceCode" id="cb1"><pre
class="sourceCode org SourceCode"><code class="sourceCode orgmode"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>\begin{align}</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>$ y = ax^2 + bx + c $</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>\end{align}</span></code></pre></div>
</div>
<p>埋め込みLaTeXでは <code>\( y = x \)</code> や
<code>\[ y = x \]</code> といった書き方も用意
されていますが、これらはきちんと数式として描画されないので気をつけてく
ださい。(<code>\( $y = x$ \)</code>
とすれば可能ですが、余計な括弧もそのまま描画 されます)</p>
<h1 id="注意事項">注意事項</h1>
<p>ブロックの場合 <code>\begin{...}</code>
で囲む必要があるなど、typstの埋め込みとし
ては適切な実装ではありません。あくまでも最小限の手数で実装するための記
事です。</p>
<p>尚、もし適切に実装をしたい場合はorg-element.elから手を加えるのがよさそ
うです(今は時間ないのでやりませんが、いつかやっておきたい。)</p>
<h1 id="実装">実装</h1>
<h2 id="1. org-create-formula-imageの置き換え">1.
org-create-formula-imageの置き換え</h2>
<p><code>org-create-formula-image</code> が、
<code>PROCESSING-TYPE</code> として <code>typst</code> シン
ボルを受け取った際はtypstとして処理をするように分岐させます。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(defun org-typst-embed/advice-func (oldfunc &amp;rest args)
  &quot;Advice function to enable using typst as LaTeX fragment.&quot;

  ;; 見易さのため、 help:org-create-formula-image の本来の引数に名前を付けているだけ
  (let ((string (nth 0 args))
        (processing-type (nth 4 args))
        (tofile (nth 1 args)))
    (if (eq processing-type &#39;typst)
        (progn
          ;; Block typeであった場合、それを取り除く
          (when (string-prefix-p &quot;\\begin{&quot; string)
            (setq string (with-temp-buffer
                           (insert string)
                           (let ((beg (progn (goto-char (point-min))
                                             (forward-line) (point)))
                                 (end (progn (goto-char (point-max))
                                             (forward-line -2) (end-of-line) (point))))
                             (buffer-substring beg end)))))
          (ob-typst/create-image string tofile))
      (apply oldfunc args))))

(advice-add &#39;org-create-formula-image :around #&#39;org-typst-embed/advice-func)
</code></pre>
</div>
<p>typstとして処理する部分は、自分の環境では自作の <a
href="https://github.com/Cj-bc/ob-typst">Cj-bc/ob-typst</a>で提供さ
れている <a
href="https://github.com/Cj-bc/ob-typst/blob/main/ob-typst.el#L92-L127">ob-typst/create-image</a>
を使っています。もし、インストールした
くない場合は以下のように定義して、 <code>ob-typst/create-image</code>
を使用して
いる場所と差し替えてあげるとよいと思います(ob-typstではいくつか
customize variableがあるので、それをハードコードした形になります。)</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(defun org-typst-embed/create-image (string tofile)
  &quot;Create an image from typst source using external process.

The Typst STRING is saved to a temporary Typst file, then
converted to an image file by &#39;typst compiler&#39; command.

The generated image file is eventually moved to TOFILE.

Generated file format is determined by TOFILE file
extension. Supported file formats are: .png, .pdf, .svg
&quot;
  (if (condition-case nil
          (progn (call-process &quot;typst&quot; nil nil nil &quot;--help&quot;) t)
        (file-missing nil))
      (let* ((tmpfile (make-temp-file &quot;ob-typst&quot;))
             (ext (file-name-extension tofile))
             (log-buf (get-buffer-create &quot;*Org Preview typst Output*&quot;)))
        (with-temp-file tmpfile
          (insert default-rules-str &quot;\n&quot; string))
        (copy-file (org-compile-file tmpfile
                                     (list (format &quot;typst compile --format %s --root %%o %%f&quot; ext))
                                     ext &quot;&quot; log-buf)
                   tofile &#39;replace))
    (display-warning &#39;org-typst-embed &quot;typst command not found&quot;)))
</code></pre>
</div>
<h2 id="2. org-preview-latex-process-alist の設定">2.
<code>org-preview-latex-process-alist</code> の設定</h2>
<p><code>org-preview-latex-process-alist</code> に含まれるシンボル以外
は~org-format-latex~ (内部処理で使われている関数)がエラーとして処理し
てしまい、画像の生成が出来ません。又、ここで指定する
<code>:image-output-type</code>
によって最終的な出力のファイル形式が決定します。 これは指定しないと
<code>png</code> となり、透過等が使えません。個人的には背景は
透過させたいので、svgに指定しています(<code>:image-output-type</code>
を指定する か否かは好みで良いです)</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(push &#39;(typst :image-output-type &quot;svg&quot;) org-preview-latex-process-alist)
</code></pre>
</div>
<h2 id="3. org-preview-latex-default-process の設定">3.
<code>org-preview-latex-default-process</code> の設定</h2>
<p>これは <code>'typst</code>
を指定するだけで良いです。これをすることで、
<code>org--latex-preview-region</code> が適切に動くようになります。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(setq org-preview-latex-default-process &#39;typst)
</code></pre>
</div>
<h1 id="使い方">使い方</h1>
<p>実装にかかれたコードを全て実行した後、普通にLaTeX fragmentとしてtypst
を書き <code>org-latex-preview</code> を呼び出せばよいです。</p>
<h1 id="実装メモ">実装メモ</h1>
<p>ここからは実際の実装に至るまでのメモを公開しておきます。
より深掘りする際の参考等にしてください</p>
<h2 id="関連する変数">関連する変数</h2>
<ul>
<li>help:org-preview-latex-process-alist
<ul>
<li>help:org-format-latex が処理してくれるようにするために必要</li>
</ul></li>
<li>help:org-preview-latex-default-process
<ul>
<li>help:org–latex-preview-region が <code>org-format-latex</code>
に渡す <code>PROCESSING-TYPE</code> になる</li>
</ul></li>
</ul>
<h2 id="関連する関数">関連する関数</h2>
<ul>
<li>help:org-latex-preview
<ul>
<li>help:org–latex-preview-region
<ul>
<li>help:org-format-latex
<ul>
<li>help:org-create-formula-image
<ul>
<li>内部でハードコードされたLaTeXプリアンブルを書き込んだりしてくるので、入れ替える必要がある</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<ol>
<li><p>LaTeXフラグメント識別用</p>
<ul>
<li>help:org-inside-LaTeX-fragment-p</li>
</ul></li>
</ol>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2024-01-17-libskk-what-is-kuten</title>
    <link href="https://cj-bc.github.io/blog/posts/2024-01-17-libskk-what-is-kuten.html" />
    <id>https://cj-bc.github.io/blog/posts/2024-01-17-libskk-what-is-kuten.html</id>
    <published>2024-01-17T00:00:00Z</published>
    <updated>2024-01-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>SKKにある「Kuten」とは何なんだろう？</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on January 17, 2024</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on January 27, 2024
	</div>

	

	
	<a title="All pages tagged &#39;skk&#39;." href="/tags/skk.html" class="ui tag label">skk</a>
	
      </div>

    <div class="description">
      <p>SKKを使っている時に <code>Kuten([MM]KKTT)</code>
という表示が出てきたことはないで
しょうか？私はたまに見掛け、なんだろう…と思っていたのですがやっと理
解したのでメモしておきます。</p>
<p>ちなみに、keymapで <code>"kuten"</code>
を指定することで呼び出すことが出来、デフォ ルトの状態だと <code>\</code>
で起動します。
<code>/usr/share/libskk/rules/default/keymap/default.json</code>
では以下のように 定義されています。</p>
<div class="ui segment">
<div class="ui top right attached label">
json
</div>
<div class="sourceCode" id="cb1"><pre
class="sourceCode json SourceCode"><code class="sourceCode json"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;define&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;keymap&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>            <span class="er">...</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            <span class="dt">&quot;</span><span class="ch">\\</span><span class="dt">&quot;</span><span class="fu">:</span> <span class="st">&quot;kuten&quot;</span><span class="fu">,</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            <span class="er">...</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="fu">}</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">}</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
</div>
<h1 id="結論: Kuten は EUC-jp のコード直接入力だった">結論: Kuten は
EUC-jp のコード直接入力だった</h1>
<p>コードを完全には読み切っていないので若干の推論を含みますが、どうやら
EUC-jpの文字コードを直接入力するモードなようです。
EUC-jpの文字コード表を <a
href="http://charset.7jp.net/euc.html">文字コード表 日本語EUC(euc-jp) –
charset.7jp.net</a>
を参考にして入力してみると、表の通りに入力出来ていそうでした。</p>
<p>表に「区」「点」の表示があったので、恐らくその由来なのでしょう。</p>
<p>… <code>K</code> と <code>T</code> は理解したけど <code>[MM]</code>
って何なんだろ。</p>
<h1 id="経緯">経緯</h1>
<p>最初は<a
href="https://github.com/fcitx/fcitx5-skk">fcitx/fcitx5-skk</a>の何かなのかな？と思い、そのレポジトリで"Kuten"
を検索したのですが見付からず。<a
href="https://github.com/ueno/libskk">ueno/libskk</a>を調べてみると、 <a
href="https://github.com/ueno/libskk/blob/5f5e5c2d3facfec9f577fb66032e6f1994ed5d44/libskk/state.vala#L611-L693">KutenStateHandler</a>という実装を見つけました。</p>
<p>(Vala読めないので雰囲気で読んでいますが)コンストラクターを見てみると、
EUC-JPのコンバーターを使っているようなので、なんとなくEUC-JPを調べて
入力してみた所動作した、という感じです。</p>
<div class="ui segment">
<div class="ui top right attached label">
vala
</div>
<pre class="vala SourceCode"><code>internal KutenStateHandler () {
    try {
        // use EUC-JP to get JISX0208 characters by code
        // point, this works because EUC-JP maps JISX0208
        // characters to equivalent bytes.  See:
        // https://en.wikipedia.org/wiki/EUC-JP
        // this is generally a wrong approach though
        converter = new EncodingConverter (&quot;EUC-JP&quot;);
    } catch (GLib.Error e) {
        converter = null;
        assert_not_reached ();
    }
}
</code></pre>
</div>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2023-12-22-yozakura-mia-asakatu-handdrawing</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-12-22-yozakura-mia-asakatu-handdrawing.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-12-22-yozakura-mia-asakatu-handdrawing.html</id>
    <published>2023-12-22T00:00:00Z</published>
    <updated>2023-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>夜桜みあ朝活サムネ手描きしがち説</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on December 22, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on December 23, 2023
	</div>

	

	
	<a title="All pages tagged &#39;夜桜みあ&#39;." href="/tags/%E5%A4%9C%E6%A1%9C%E3%81%BF%E3%81%82.html" class="ui tag label">夜桜みあ</a>
	
      </div>

    <div class="description">
      <p>今日開かれていたTwitter(現X) Spaceにて、</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>「朝活サムネ手書きしがち説」</p>
</blockquote>
</div>
<p><span class="spurious-link"
target=" https://x.com/Cj_bc_sd/status/173812926022382814"><em>てな話が上がってた</em></span>ので検証してみました。</p>
<h1 id="朝活配信">朝活配信</h1>
<p>まずは朝活配信のリストアップをします。対象は現在のYouTubeチャンネルの
み(IRIAM等はアーカイブがない&amp;サムネがないので対象外)。「朝活」判定は、
タイトルに「朝」と入っていることとしました。</p>
<p>合計数は4件となりました。</p>
<table id="morning_streams" class="ui celled table">
<thead>
<tr class="header">
<th>配信日時</th>
<th>タイトル</th>
<th>URL</th>
<th>サムネ</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>[2020-04-23 Thu]</td>
<td>【Vtuber】とっても珍しい朝はいしん！☀【Splatoon2】</td>
<td><a
href="https://www.youtube.com/watch?v=oHuly4uRyBk">https://www.youtube.com/watch?v=oHuly4uRyBk</a></td>
<td><a
href="https://i.ytimg.com/vi/oHuly4uRyBk/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg%3D%3D&amp;rs=AOn4CLCj4_jZJauKeQlV6lYYgO86t4-qYA">https://i.ytimg.com/vi/oHuly4uRyBk/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg%3D%3D&amp;rs=AOn4CLCj4_jZJauKeQlV6lYYgO86t4-qYA</a></td>
</tr>
<tr class="even">
<td>[2020-12-27 Sun]</td>
<td>【I am
Bread】ニチアサ🍳みんなの朝ごはんを用意するよ！【Vtuber】</td>
<td><a
href="https://www.youtube.com/watch?v=FSUaDkbtsH0">https://www.youtube.com/watch?v=FSUaDkbtsH0</a></td>
<td><a
href="https://i.ytimg.com/vi/FSUaDkbtsH0/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDfSHGGs4TnV71my72HEO0yF48p7g">https://i.ytimg.com/vi/FSUaDkbtsH0/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDfSHGGs4TnV71my72HEO0yF48p7g</a></td>
</tr>
<tr class="odd">
<td>[2022-05-02 Mon]</td>
<td>GW企画！朝だし運動でもしてみますか…うっ【リングフィット
アドベンチャー】【Vtuber】</td>
<td><a
href="https://www.youtube.com/watch?v=r68fm6CCVJs">https://www.youtube.com/watch?v=r68fm6CCVJs</a></td>
<td><a
href="https://i.ytimg.com/vi/r68fm6CCVJs/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg%3D%3D&amp;rs=AOn4CLDjKGLzczeH6MHJMWwDZ-MxsidJYA">https://i.ytimg.com/vi/r68fm6CCVJs/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg%3D%3D&amp;rs=AOn4CLDjKGLzczeH6MHJMWwDZ-MxsidJYA</a></td>
</tr>
<tr class="even">
<td>[2022-05-06 Fri]</td>
<td>GW企画！朝の運動はよきよき！！！いっぱいやっちゃうよ！【リングフィット
アドベンチャー】【Vtuber】</td>
<td><a
href="https://www.youtube.com/watch?v=mk9mbDyCeqE">https://www.youtube.com/watch?v=mk9mbDyCeqE</a></td>
<td><a
href="https://i.ytimg.com/vi/mk9mbDyCeqE/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBQVx0kBO2zWL1mIGjXwoH-xI01hw">https://i.ytimg.com/vi/mk9mbDyCeqE/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBQVx0kBO2zWL1mIGjXwoH-xI01hw</a></td>
</tr>
</tbody>
</table>
<h1 id="手描きかどうか？">手描きかどうか？</h1>
<h2
id="【Vtuber】とっても珍しい朝はいしん！☀【Splatoon2】">【Vtuber】とっても珍しい朝はいしん！☀【Splatoon2】</h2>
<p>朝からすぷらちゅん! 多分「おはようSplatoon!」は手描き？</p>
<h2
id="【I am Bread】ニチアサ🍳みんなの朝ごはんを用意するよ！【Vtuber】">【I
am Bread】ニチアサ🍳みんなの朝ごはんを用意するよ！【Vtuber】</h2>
<p>きょ~のごはんはパン~~!!</p>
<p>間違いなく手描きイラストですね。かわいいね。</p>
<h2
id="GW企画！朝だし運動でもしてみますか…うっ【リングフィット アドベンチャー】【Vtuber】">GW企画！朝だし運動でもしてみますか…うっ【リングフィット
アドベンチャー】【Vtuber】</h2>
<p>朝から運動しようとしてたんですね。えらすぎか…??</p>
<p>"Good Morning" の文字列だけは手描きな可能性がありそうな気はする。</p>
<h2
id="GW企画！朝の運動はよきよき！！！いっぱいやっちゃうよ！【リングフィット アドベンチャー】【Vtuber】">GW企画！朝の運動はよきよき！！！いっぱいやっちゃうよ！【リングフィット
アドベンチャー】【Vtuber】</h2>
<p>2日も出来たんですか!？えらすぎか!？!？</p>
<p>同じく "Good Morning"
の文字列だけは手描きな可能性がありそうな気はする。</p>
<h1 id="まとめ">まとめ</h1>
<p>4つあったうち、</p>
<table class="ui celled table">
<tbody>
<tr class="odd">
<td>手描きイラスト</td>
<td>1</td>
</tr>
<tr class="even">
<td>手描き文字ぽい</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>なので、 <u>意外と手描きサムネじゃない</u> ようですね。</p>
<p><strong>いかがでしたか？</strong></p>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2023-12-12-resonite-virtual-keyboard-tips</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-12-12-resonite-virtual-keyboard-tips.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-12-12-resonite-virtual-keyboard-tips.html</id>
    <published>2023-12-12T00:00:00Z</published>
    <updated>2023-12-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>Resoniteでバーチャルキーボードを作る際のTips</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on December 12, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on December 24, 2023
	</div>

	

	
	<a title="All pages tagged &#39;tips&#39;." href="/tags/tips.html" class="ui tag label">tips</a>
	
      </div>

    <div class="description">
      <p>この記事は<a href="https://adventar.org/calendars/9005">その2
Resonite Advent Calendar 2023 - Adventar</a>の12/12の記事
です。12/11はtonbyさんの<a
href="https://note.com/tonby_oxide/n/ne6f928980cee">アバターのクロスプラットフォーム管理法｜tonby</a>
でした。</p>
<p>私はちまちまとResoniteのキーボードを0から(=既存のキーボードをベースに
せず)自作しているのですが、そこで結構文章化されていないような小tipsが
あったので共有したいと思います。本来は、自分の制作中のキーボードの使い
方等を解説しようと思っていたのですが、ドキュメントの整備にてこずってお
り間に合わなさそうなのでまた次の機会に…</p>
<p>興味があれば、<a
href="https://www.youtube.com/playlist?list=PLthVjqwIzS2FSxFiiJeFI-GMTxj0bJLK9">YouTubeの再生リスト</a>にある程度動画が載っているので覗いて
みていただけると嬉しいです。「キーを押さずコントローラーの入力で操作出
来るキーボード」を作っています。</p>
<h1 id="Tips1: Userspaceについて認識しておこう">Tips1:
Userspaceについて認識しておこう</h1>
<p>userspaceとは、Resoniteにおいて各プレイヤー個人個人が持つプライベート
なワールドのようなものです。普通のワールドに重なる感じで存在する別レイ
ヤーのようなものと捉えると良さそうです。多分。(というのも、公式のドキュ
メントを知らないため…)</p>
<p>とはいっても大分身近なもので、dashやカメラ、キーボード等などのプライベー
トUIがuserspaceに存在します。なので、キーボードを作成したい場合は切っ
ても切れない存在になります。</p>
<h2 id="特徴1: 普通のワールドからはアクセス出来ない">特徴1:
普通のワールドからはアクセス出来ない</h2>
<p>普通のインスペクターではusespaceにあるものは表示されず、Protofluxやコ
ンポーネントからもアクセスする事はできません（多分。もし知ってれば教え
てください）。</p>
<p>そのため、開発時のデバッグがものすごくやりづらいです。というか、アイテ
ムをインベントリに保存する前にデバッグ用のノードを追加しておき、毎度イ
ンベントリに保存してキーボード入れ替えて出力を見てまた元のワールドで修
正してまたインベントリに保存して…という面倒な工程を繰り返す必要が出
てきます。</p>
<p>しかし実態は普段扱っているワールドと同じようにSlotとコンポーネントで構
成されているため、後述するLocal Inspectorを使うことで圧倒的に作業がし
やすくなります。</p>
<h2 id="特徴2: アバターがデフォルトのアバターになっている">特徴2:
アバターがデフォルトのアバターになっている</h2>
<p>UsespaceにもユーザーのSlotはあるのですが、ユーザーが個々人で着ているア
バターとは異なりResoniteデフォルトのアバターが適用されています。そのた
め、自分のアバターのSlot構造に依存する実装をしていると思った通りに動か
なくて困ったことになります。</p>
<h1
id="Tips2: local inspector を作ろう :: userspaceを見れるインスペクター">Tips2:
local inspector を作ろう :: userspaceを見れるインスペクター</h1>
<p>userspaceを見るためのインスペクターを作成することができます。これは一
般にlocal inspectorと呼ばれているようです。公式でもどこかにあるらしい
と噂で聞きましたが見つけられなかったので、自作しましょう。簡単に作れま
す。</p>
<p>仕組みとしては、「Inspectorをfacetとして取り込むことでuserspaceに出現
させる」という形になります。</p>
<h2 id="必要なもの">必要なもの</h2>
<ul>
<li>自分自身をInspectしたInspector</li>
<li>facet</li>
</ul>
<h2
id="基本的な作り方(facetとProtofluxが分かる人向け)">基本的な作り方(facetとProtofluxが分かる人向け)</h2>
<p>facetに、「自分自身をInspectしているInspector」を含めればいいです。</p>
<ol>
<li>Inspectorを自分自身をInspectし、かつ右上の上下の矢印ボタンを押して自分自身をrootとするようにします</li>
<li>Inspectorをfacetの子にします</li>
<li>facetにButtonを用意します</li>
<li>「facetのButtonが押されたらInspectorを複製・RootSlotの子にする」処理を書きます</li>
<li>後は普通のFacetと同様にDashに追加します</li>
</ol>
<ol>
<li><p>注意点</p>
<ol>
<li><p>最終的にInspectorがFacetの子から出られるようにする</p>
<p>Facetの子にいるInspectorは、Dashの中に取り込まれてしまい上手く操作出来
ません。なので、必ず <code>RootSlot</code> (ないしDash以外のもの)
を親とするよう にしてください。</p></li>
<li><p>Inspectorが「Root」から表示していないようにする</p>
<p>Inspectorの右上にある上下の矢印のボタンを押すことで、左側のSlotの木の
ルートを今Inspectしているものに切り替えることが出来ます。これを行って
おかないと、userspaceに持ち込んだ際に参照先がないので上手く動かせません。</p>
<p><img src="file:///images/inspector-inspecting-self.png"
class="ui rounded image ui rounded image ui rounded image" /></p></li>
</ol></li>
</ol>
<h2 id="TODO チュートリアル(未完成)"><span class="todo TODO">TODO</span>
チュートリアル(未完成)</h2>
<p>動画を作っているのですが、編集が今日中には終わりそうにありません…ま
た出来たら追記します。</p>
<h1 id="Tips3: キーボードがキーボードとして認識される条件">Tips3:
キーボードがキーボードとして認識される条件</h1>
<p>virtualKeyboardコンポーネントのみあれば良いようです。virtualKeyboardコ
ンポーネントを付けても認識されない場合、VirtualKeybaordコンポーネント
が付いているSlotが一番上に来ているかを確認してください。同じSlotに
Grabbableをつけ忘れるなど、子Slotだけ保存されている事があります。</p>
<h1 id="Tips4: VirtualKeyが発火する条件">Tips4:
VirtualKeyが発火する条件</h1>
<p>恐らく、UserspacePointerコンポーネントをもつSlotと接触すると発火するよ
うです。これは、
<code>Root/UserRoot/VR_Globe_Right/Tooltip Anchor/Tooltip
Root/Tooltip Holder/UserspaceTip</code> が所持しています。</p>
<p><img src="file:///images/userspacePointer-location.png"
class="ui rounded image" /></p>
<h1
id="Tips5: キーボードを出してもデフォルトのキーボードが出てきてしまう">Tips5:
キーボードを出してもデフォルトのキーボードが出てきてしまう</h1>
<p>作成したキーボードがシンクされる前に「キーボードとして使う」を押してし
まってる可能性があります。
<strong>必ずシンクが終わってから「キーボードとして
使う」を押してください</strong> 。</p>
<p>注意点として、シンクが完了する前に一度でも「キーボードとして使う」を押
してしまっていると、シンクが終わった後に再度押しても効かなくなるようで
す。(n敗)</p>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2023-11-03-windows-powershell-watch-file-modification-event</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-11-03-windows-powershell-watch-file-modification-event.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-11-03-windows-powershell-watch-file-modification-event.html</id>
    <published>2023-11-03T00:00:00Z</published>
    <updated>2023-11-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>PowerShellでファイルの変更監視</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on November  3, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on November  3, 2023
	</div>

	

	
	
	
      </div>

    <div class="description">
      <p>注:
正直、今回の記事は参考サイトの晴耕雨読さんの内容ほぼ同じです。主に
は自分用のメモとなります。</p>
<p>Linuxでは確立したAPIがなく面倒ですが、Windowsでは <a
href="https://learn.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher?view=net-7.0"><code>System.IO.FileSystemWatcher</code></a>
を用いることで様々なファイルの変更を検知
出来ます。全体的に1つの企業が作っているメリットみたいな所ありますね。
(それが嫌な所でもありますが)</p>
<p>.NETのクラスは <code>New-Object</code>
で作成出来ます。その後、各プロパティを設定します。</p>
<div class="ui segment">
<div class="ui top right attached label">
powershell
</div>
<div class="sourceCode" id="cb1"><pre
class="sourceCode powershell SourceCode"><code class="sourceCode powershell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="va">$watcher</span> <span class="op">=</span> <span class="fu">New-Object</span> System<span class="op">.</span><span class="fu">IO</span><span class="op">.</span><span class="fu">FileSystemWatcher</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="va">$watcher</span><span class="op">.</span><span class="fu">Path</span> <span class="op">=</span> <span class="st">&quot;C:\Users/me\AppData\Local\Temp&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="va">$watcher</span><span class="op">.</span><span class="fu">Filter</span> <span class="op">=</span> <span class="st">&quot;execute.bat&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="va">$watcher</span><span class="op">.</span><span class="fu">IncludeSubdirectories</span> <span class="op">=</span> <span class="va">$true</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="va">$watcher</span><span class="op">.</span><span class="fu">EnableRaisingEvents</span> <span class="op">=</span> <span class="va">$true</span></span></code></pre></div>
</div>
<table class="ui celled table">
<tbody>
<tr class="odd">
<td><code>FileSystemWatcher.Path</code></td>
<td>監視対象のディレクトリ</td>
</tr>
<tr class="even">
<td><code>FileSystemWatcher.Filter</code></td>
<td>Path以下のファイルのうち、一致した名前を持つファイルのみを監視する</td>
</tr>
<tr class="odd">
<td><code>FileSystemWatcher.IncludeSubdirectories</code></td>
<td>サブディレクトリも監視対象にするか否か</td>
</tr>
</tbody>
</table>
<p>そして、 <code>FileSystemWatcher</code>
クラスの各イベントにアクションを登録します。</p>
<p>イベントへの登録は <a
href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/register-objectevent?view=powershell-7.3"><code>Register-ObjectEvent</code></a>
で可能です。イベントに関連す る情報は、 <code>$Event</code>,
<code>$EventSubscriber</code>, <code>$Sender</code>,
<code>$EventArgs</code>, <code>$Args</code>
変数に格納されるので、それを適宜参照することで様々なことが行えます。</p>
<div class="ui segment">
<div class="ui top right attached label">
powershell
</div>
<div class="sourceCode" id="cb2"><pre
class="sourceCode powershell SourceCode"><code class="sourceCode powershell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">Register-ObjectEvent</span> <span class="va">$watcher</span> <span class="st">&quot;Created&quot;</span> <span class="op">-</span>action <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">Write-Host</span> <span class="st">&quot;Created Event is called.&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># 関連処理</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div>
<h1 id="用例: 自動的に消滅するファイルのバックアップをとる">用例:
自動的に消滅するファイルのバックアップをとる</h1>
<p>実際に自分が使用した例です。</p>
<p>Unity HubでUnity Editorをインストールする際、管理者権限で
<code>AppData/Local/Temp/UNKNOWN_HASH/execute.bat</code>
を実行する許可を求められ
ました。中身を確認してから実行したいのでそれを読もうとした所、許可プロ
ンプトの後にはもう削除されていました。</p>
<p>そこで、該当のファイルが生成された時にコピーするようなスクリプトを書きました。</p>
<div class="ui segment">
<div class="ui top right attached label">
powershell
</div>
<div class="sourceCode" id="cb3"><pre
class="sourceCode powershell SourceCode"><code class="sourceCode powershell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="va">$watcher</span> <span class="op">=</span> <span class="fu">New-Object</span> System<span class="op">.</span><span class="fu">IO</span><span class="op">.</span><span class="fu">FileSystemWatcher</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="va">$watcher</span><span class="op">.</span><span class="fu">Path</span> <span class="op">=</span> <span class="st">&quot;C:\Users/me\AppData\Local\Temp&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="va">$watcher</span><span class="op">.</span><span class="fu">Filter</span> <span class="op">=</span> <span class="st">&quot;execute.bat&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="va">$watcher</span><span class="op">.</span><span class="fu">IncludeSubdirectories</span> <span class="op">=</span> <span class="va">$true</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="va">$watcher</span><span class="op">.</span><span class="fu">EnableRaisingEvents</span> <span class="op">=</span> <span class="va">$true</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="fu">Register-ObjectEvent</span> <span class="va">$watcher</span> <span class="st">&quot;Created&quot;</span> <span class="op">-</span>action <span class="op">{</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">Write-Host</span> <span class="st">&quot;Created Event is called.&quot;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">$targetDir</span> <span class="op">=</span> <span class="fu">Split-Path</span> <span class="op">-</span>Parent <span class="va">$Event</span><span class="op">.</span><span class="fu">SourceEventArgs</span><span class="op">.</span><span class="fu">FullPath</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">Write-Host</span> <span class="st">&quot;target directory: $targetDir&quot;</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">$saveTo</span> <span class="op">=</span> <span class="fu">Join-Path</span> <span class="op">-</span>Path <span class="op">(</span><span class="fu">Split-Path</span> <span class="op">-</span>Parent <span class="va">$targetDir</span><span class="op">)</span> <span class="op">-</span>ChildPath <span class="st">&quot;saved-by-watchandcopy&quot;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  <span class="fu">Write-Host</span> <span class="st">&quot;Save to: $saveTo&quot;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="fu">Copy-Item</span> <span class="va">$targetDir</span> <span class="va">$saveTo</span> <span class="op">-</span>Recurse</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div>
<h1 id="参考サイト">参考サイト</h1>
<ul>
<li><a
href="https://tex2e.github.io/blog/powershell/Register-ObjectEvent">PowerShellでファイルの更新を監視する
| 晴耕雨読</a></li>
<li><a
href="https://learn.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher?view=net-7.0">FileSystemWatcher
Class (System.IO) | Microsoft Learn</a></li>
<li><a
href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/register-objectevent?view=powershell-7.3">Register-ObjectEvent
(Microsoft.PowerShell.Utility) - PowerShell | Microsoft Learn</a></li>
</ul>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2023-09-26-unity-xrinteractiontoolkit-textmeshpro-get-character-at-raycast-interactor</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-09-26-unity-xrinteractiontoolkit-textmeshpro-get-character-at-raycast-interactor.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-09-26-unity-xrinteractiontoolkit-textmeshpro-get-character-at-raycast-interactor.html</id>
    <published>2023-09-26T00:00:00Z</published>
    <updated>2023-09-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>XR ray Interactorの先にあるTMPText上の文字を取得する</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on September 26, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on September 27, 2023
	</div>

	

	
	<a title="All pages tagged &#39;unity&#39;." href="/tags/unity.html" class="ui tag label">unity</a>
	
      </div>

    <div class="description">
      <p>TextMeshProの機能を使うと実は簡単に作れます。</p>
<h1 id="Tl;Dr">Tl;Dr</h1>
<ol>
<li>テキストを<a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TMP_Text.html">TextMeshPro.TMP<sub>Text</sub></a>の派生クラスを用いて作成する</li>
<li>1.のgameObjectに<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.EventTrigger.html">EventTrigger</a>を追加し、
<code>Pointer Click</code> イベント用のハンドラを書く
<ol>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.PointerEventData.html#UnityEngine_EventSystems_PointerEventData_worldPosition">PointerEventData.worldPosition</a>を<a
href="https://docs.unity3d.com/ScriptReference/Camera.WorldToScreenPoint.html">Camera.WorldToScreenPoint</a>を用いてスクリーン座標へ変換する</li>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingCharacter_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_System_Boolean_">TMP<sub>TextUtilities</sub>.FindIntersectingCharacter</a>で文字のインデックスを取得する</li>
<li>インデックスを元に、<a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TMP_Text.html#TMPro_TMP_Text_text">TMP<sub>Text</sub>.text</a>から取得する</li>
</ol></li>
</ol>
<h1 id="バージョン情報">バージョン情報</h1>
<table class="ui celled table">
<thead>
<tr class="header">
<th>パッケージ等</th>
<th>バージョン</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Unity</td>
<td>2022.1.24f1</td>
</tr>
<tr class="even">
<td>TextMeshPro</td>
<td>3.0.6</td>
</tr>
<tr class="odd">
<td>XR Interaction Toolkit</td>
<td>2.0.4</td>
</tr>
<tr class="even">
<td>UnityUI</td>
<td>1.0.0</td>
</tr>
</tbody>
</table>
<h1 id="工程">工程</h1>
<p>最初2工程は前回の記事と同じ内容になります。簡単のためこちらにも記載しています。</p>
<h2 id="テキストメッシュを作成する">テキストメッシュを作成する</h2>
<p>XR Interaction Toolkit対応のCanvasを作り、その子供に<a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TextMeshProUGUI.html">TextMeshProUGUI</a>を
作成します。便宜上、このgameObjectを「テキストメッシュ」と呼ぶことにし
ます。</p>
<h2
id="テキストメッシュがXR Ray Interactorのイベントに反応出来るようにする">テキストメッシュがXR
Ray Interactorのイベントに反応出来るようにする</h2>
<p>テキストメッシュは、デフォルトではEventSystemのイベントに反応しません。
そこで、<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.EventSystems.EventTrigger.html">EventTrigger</a>を用いてXR
Ray Interactorのイベントに反応出来るよ うにします。</p>
<p>!写真</p>
<p>テキストメッシュにEventTriggerコンポーネントを追加し、
<code>Pointer Click</code> イベントを追加します。</p>
<p>そのコールバック関数として、 <code>BaseEventData</code> を受け取って
<code>void</code> を返 す関数を作成します。ここでは、
<code>pointerClick</code> として定義しておくことに します。(写真では
<code>BufferUI.pointerClick</code> となっています)</p>
<div class="ui segment">
<div class="ui top right attached label">
csharp
</div>
<div class="sourceCode" id="cb1"><pre
class="sourceCode csharp SourceCode"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">.</span><span class="fu">EventSystems</span><span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> TMPro<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> PointerClickExample <span class="op">{</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// 作成したテキストメッシュへの参照</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> TMP_Text m_text<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">pointerClick</span><span class="op">(</span>BaseEventData d<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">var</span> pointerEv <span class="op">=</span> d <span class="kw">as</span> PointerEventData<span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>pointerEv <span class="op">==</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span><span class="op">;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div>
<h2
id="交差点がどの文字上にあるのかを取得する">交差点がどの文字上にあるのかを取得する</h2>
<p><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingCharacter_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_System_Boolean_">TMPro.TMP<sub>TextUtilities</sub>.FindIntersectingCharacter</a>を用いると、与えた点
と交わっている文字を取得することが出来ます。</p>
<p>しかし、その際与える座標は ワールド座標系 <u>ではありません</u> 。
<code>camera</code>
引数で与えたカメラのスクリーン座標系である必要があるようです。</p>
<p>"あるようです"というのは、ドキュメント上には記載がなく自分で試した時に
上手くいったのがそれだったからです。又、インターネットで調べた所
<code>Input.mousePosition</code>
を用いているものが多くあり、それもスクリーン座標
系であるからという推測でもあります。</p>
<ol>
<li><p>イベントの発生したカメラのスクリーン座標系の座標を取得する</p>
<p>pointerClickイベントが発生した時のRaycastとの交差点は、 <a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.PointerEventData.html#UnityEngine_EventSystems_PointerEventData_pressPosition">PointerEventData.pressPosition</a>で取得出来ます。これは
<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.PointerEventData.html#UnityEngine_EventSystems_PointerEventData_pressEventCamera">PointerEventData.pressEventCamera</a>のカメラのスクリーン座標系の座標となっ
ています。</p>
<ol>
<li><p>(おまけ)
<code>PointerEventData.pointerPressRaycast.worldPosition</code>
からの取得</p>
<p>カメラのワールドToスクリーン座標変換関数を用いると、これからも取得する
ことが出来ます。</p>
<div class="ui segment">
<div class="ui top right attached label">
csharp
</div>
<div class="sourceCode" id="cb2"><pre
class="sourceCode csharp SourceCode"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>pointerEv<span class="op">.</span><span class="fu">pressEventCamera</span><span class="op">.</span><span class="fu">WorldToScreenPoint</span><span class="op">(</span>pointerEv<span class="op">.</span><span class="fu">pointerPressRaycast</span><span class="op">.</span><span class="fu">worldPosition</span><span class="op">)</span></span></code></pre></div>
</div></li>
</ol></li>
<li><p>文字インデックスから文字を取得する</p>
<p><code>FindIntersectingCharacter</code> を用いて、
<code>TMP_Text.text</code> のインデックス
を取得することが出来ます。そのインデックスを用いることで、文字を取得す
ることが出来ます。</p>
<p>文字が見付からなかった際は -1
を返すようなので、そこで条件分岐が必要で す。</p>
<div class="ui segment">
<div class="ui top right attached label">
csharp
</div>
<div class="sourceCode" id="cb3"><pre
class="sourceCode csharp SourceCode"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">.</span><span class="fu">EventSystems</span><span class="op">;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> TMPro<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> PointerClickExample <span class="op">{</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// 作成したテキストメッシュへの参照</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> TMP_Text m_text<span class="op">;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">pointerClick</span><span class="op">(</span>BaseEventData d<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">var</span> pointerEv <span class="op">=</span> d <span class="kw">as</span> PointerEventData<span class="op">;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>pointerEv <span class="op">==</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span><span class="op">;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        <span class="dt">var</span> pos <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>pointerEv<span class="op">.</span><span class="fu">pressPosition</span><span class="op">.</span><span class="fu">x</span><span class="op">,</span> pointerEv<span class="op">.</span><span class="fu">pressPosition</span><span class="op">.</span><span class="fu">y</span><span class="op">,</span> 0f<span class="op">);</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        <span class="dt">var</span> idx <span class="op">=</span> TMP_TextUtilities<span class="op">.</span><span class="fu">FindIntersectingCharacter</span><span class="op">(</span>m_text<span class="op">,</span> pos<span class="op">,</span> pointerEv<span class="op">.</span><span class="fu">pressEventCamera</span><span class="op">,</span> <span class="kw">false</span><span class="op">);</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>idx <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>            Debug<span class="op">.</span><span class="fu">Log</span><span class="op">(</span><span class="st">&quot;文字が見付かりませんでした&quot;</span><span class="op">);</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="kw">else</span> <span class="op">{</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>            Debug<span class="op">.</span><span class="fu">Log</span><span class="op">(</span>$<span class="st">&quot;index: {idx}, 選択された文字: {m_text.text[idx]}&quot;</span><span class="op">);</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div></li>
</ol>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2023-09-26-unity-xrinteractiontoolkit-retrive-ugui-event</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-09-26-unity-xrinteractiontoolkit-retrive-ugui-event.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-09-26-unity-xrinteractiontoolkit-retrive-ugui-event.html</id>
    <published>2023-09-26T00:00:00Z</published>
    <updated>2023-09-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>XR Interaction Toolkit からuGUIイベントに反応する</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on September 26, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on September 27, 2023
	</div>

	

	
	
	
      </div>

    <div class="description">
      <p>uGUI上に表示した文字列へのイベントを取りたかったです。最初は
Interactable として扱うのかなと色々試しましたが、実際の所マウスイベン
トとして扱ってよいということがわかりました。</p>
<h1 id="Tl;Dr">Tl;Dr</h1>
<ul>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.5/api/UnityEngine.XR.Interaction.Toolkit.IXRInteractable.html">IXRInteractable</a>等の
Interactableは <u>関係ない</u></li>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.5/manual/ui-setup.html">UI
interaction setup | XR Interaction Toolkit | 2.5.1</a> に従えばよい</li>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/manual/script-EventTrigger.html">EventTrigger</a>を用いる際は、Rayでの選択は
<code>Pointer Click</code> として扱える</li>
</ul>
<h1 id="やること">やること</h1>
<h2 id="XR Interaction Toolkit 対応のCanvasを作成する">XR Interaction
Toolkit 対応のCanvasを作成する</h2>
<p>XR Interaction
Toolkitを導入している状態であれば、ヒエラルキービューか ら
<code>XR&gt;UI Canvas</code> で作成することが出来ます。</p>
<p>EventSystemが作成されない場合は、同様に
<code>XR&gt;UI EventSystem</code> を追加して ください。</p>
<h2
id="(おまけ) 任意のイベントを受け取るためには EventTrigger を追加する">(おまけ)
任意のイベントを受け取るためには <code>EventTrigger</code>
を追加する</h2>
<p>ボタン等は <code>OnClick</code>
イベントを受け取ることが出来ますが、それ以外のコ ンポーネント(<a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TextMeshProUGUI.html">TMPro.TextMeshProUGUI</a>など)でも受け取りたい場合、
<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/manual/script-EventTrigger.html">EventTrigger</a>を使用出来ます。</p>
<p>uGUI上でコントローラーのトリガー入力を受け取りたい場合は<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.EventTrigger.html#UnityEngine_EventSystems_EventTrigger_OnPointerClick_UnityEngine_EventSystems_PointerEventData_">PointerClick</a>を
使用出来ます。コールバックは<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.PointerEventData.html">PointerEventData</a>型の引数を取りますが、実際
に <code>EventTrigger</code> に設定する際は<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.BaseEventData.html">BaseEventData</a>型の引数を受け取って自分
でキャストする必要があります。</p>
<p>具体的には以下のような形となるかと思います。参考までに <a
href="https://github.com/Cj-bc/TextObjectsVR/blob/000720cab35d0ed1da84187bbf33bce77682d21a/Assets/Scripts/Buffer/BufferUI.cs#L36-L53">TextObjectsVRでの具体的な使用例</a>も置いておきます。</p>
<div class="ui segment">
<div class="ui top right attached label">
csharp
</div>
<div class="sourceCode" id="cb1"><pre
class="sourceCode csharp SourceCode"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">void</span> <span class="fu">pointerClick</span><span class="op">(</span>BaseEventData d<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">var</span> pointerEv <span class="op">=</span> d <span class="kw">as</span> PointerEventData<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> <span class="op">(</span>pointerEv <span class="op">==</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span><span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// イベントに対応するスクリプト</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2023-08-30-unity-textmeshpro-detect-char-under-cursor</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-08-30-unity-textmeshpro-detect-char-under-cursor.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-08-30-unity-textmeshpro-detect-char-under-cursor.html</id>
    <published>2023-08-30T00:00:00Z</published>
    <updated>2023-08-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>Text Mesh Proでカーソル下の文字を取得する</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on August 30, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on September 27, 2023
	</div>

	

	
	<a title="All pages tagged &#39;unity&#39;." href="/tags/unity.html" class="ui tag label">unity</a>
	
      </div>

    <div class="description">
      <p>実は公式の機能で出来ることを知ったのでメモ。</p>
<p><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingCharacter_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_System_Boolean_">TMPro.TMP<sub>TextUtilities</sub>.FindIntersectingCharacter</a>を用いればよい。
実際の使用例はExtras &amp;
Examplesの中に仕舞われているので参照するとよい。</p>
<p>個人的にはVRで使いたいので、実装してみたらまた記事を書く。</p>
<p>尚、他にもあるので下記リンクを参照:</p>
<ul>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingLine_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_">FindIntersectingLine</a></li>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingLink_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_">FindIntersectingLink</a></li>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingWord_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_">FindIntersectingWord</a></li>
</ul>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2023-08-30-tcpip-why-use-ip-along-with-mac-address</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-08-30-tcpip-why-use-ip-along-with-mac-address.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-08-30-tcpip-why-use-ip-along-with-mac-address.html</id>
    <published>2023-08-30T00:00:00Z</published>
    <updated>2023-08-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>何故MACアドレスだけでなくIPアドレスを使用するのか？</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on August 30, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on September 27, 2023
	</div>

	

	
	
	
      </div>

    <div class="description">
      <p>Twitter(現X)にて</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>MACアドレスが世界中でユニークなんだったら、IPアドレスを使わずにMACアド
レスだけで通信できるのでは？」という質問があって</p>
</blockquote>
</div>
<p>という<a
href="https://twitter.com/yuhkun/status/1696525100651274472">Tweet</a>(現Post)があり、
<u>自分の理解をもう一度確認するために</u> 自分なり
の説明を書いておこうと思います。</p>
<p><strong>敢えて何も(引用したTweetのリプすらも)確認せず書いているので、参考にはしないでください。</strong></p>
<p>そして間違いがあればマサカリを投げて下さい (<a
href="https://twitter.com/mihe_himari">twitter@mihe<sub>himari</sub></a>,
<a
href="https://misskey.io/@cj_bc_sd">@cj<sub>bcsd</sub>@misskey.io</a>,
<a
href="https://misskey.neos.love/@cj_bc_sd">@cj<sub>bcsd</sub>@misskey.neos.love</a>)。</p>
<p>後にマスタリングTCP/IP等を参考にしつつ添削記事も出そうと思います。</p>
<h1 id="理由1: MACアドレスのユニークさは保証されていない">理由1:
MACアドレスのユニークさは保証されていない</h1>
<p>MACアドレス、というか物理アドレスはリンク内でユニークになる必要がある
ものの、グローバルにユニークである必要はありません。
そのため、根本的に一意に特定出来ることが保証されていません。</p>
<h1 id="理由2: ルーティングが難しい">理由2: ルーティングが難しい</h1>
<p>MACアドレスはベンダーIDとベンダー内での識別子とから構成されています。
製品の識別を行うことは出来ますが、物理的なネットワーク内の位置の特定に
は用いることが出来ません。</p>
<h2
id="MACアドレスのみを用いたルーティングの試行と問題点">MACアドレスのみを用いたルーティングの試行と問題点</h2>
<p>MACアドレスのみを用いてルーティングすることを考えてみます。どのノード
に目的のノードが繋がっているかが分からないため、繋がっている全てのノード
へパケットを送信し、自分自身が宛先であれば受け取り、そうでなければ周り
の全てのノードへ転送する…といった方法で配達することしか出来ません。</p>
<ol>
<li><p>問題点</p>
<p>これは単純に負荷が無駄に多いのは勿論、同じパケットが同じノードを何度も
通ってしまう問題が出てきます。これはTTL(Time to Live)を設定するなどし
て制限することが出来ますが、そうすると今度は物理的に遠くにあるノードへ
到達しない可能性が出てきてしまいます。</p>
<p>ネットワーク内でどのノードがどのノードに繋がっているのかが把握出来ない
と、通信をする経路を決定するためのルートを組むことが難しいです。</p></li>
</ol>
<h2 id="IPアドレスが解決する方法">IPアドレスが解決する方法</h2>
<p><strong>[NOTE]</strong>
全ての論理アドレスについて同じであるか自信がなかったのでIPアドレスに限
定した話をします。又、TCP/IPにおけるルーティングはIPプロトコルのみで行
われるのではないですが、論理アドレスの必要性の話に留めるので詳しくは書
きません。</p>
<p>IPアドレスは、アドレスの階層化によってルーティングの問題を解決します。
アドレスはネットワーク部とホスト部に分かれており、同一リンク内ではネッ
トワーク部を共有しています(はず)。これにより、リンク内のノードを識別す
ることが出来るようになります。</p>
<p>又、ネットワーク部の存在によりノードがどのネットワークに所属するかが分
かるため、周辺のノードがどのネットワークに接続しているのかを記録してお
けば「ネットワークAに所属するノードへのパケットはノードXに送ればいい」
「ネットワークBに所属するノードへのパケットはノードYに送ればいい」といっ
たように転送先を狭めることが出来ます。</p>
<h1 id="理由3: 複数種類のリンクを跨ぐ可能性がある">理由3:
複数種類のリンクを跨ぐ可能性がある</h1>
<p>これは書いている間にキーワードを見てしまい思い出したので、ちょっと忘れ
ていた項目ではあります。</p>
<p>勉強する上では「物理アドレス=MACアドレス」というように思いがちですが
(私もまぁ意識してなくて忘れてたわけですが)、実際は物理アドレスはリンク
によって異なっており、互換性は担保されていません。</p>
<p>WiFiはEthernetと同じくMACアドレスを使用しているため問題なく扱うことが
出来ますが、他のリンクを用いるとなるとMACアドレスでは通信が出来なくなっ
てしまいます。</p>
<p>そのため、複数種類のリンクを越えて使えるアドレスとして、論理アドレスが
必要となっています。</p>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2023-08-16-emacs-move-from-lsp-mode-to-eglot</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-08-16-emacs-move-from-lsp-mode-to-eglot.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-08-16-emacs-move-from-lsp-mode-to-eglot.html</id>
    <published>2023-08-16T00:00:00Z</published>
    <updated>2023-08-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>lsp-modeからEglotへ乗り換える</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on August 16, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on August 17, 2023
	</div>

	

	
	<a title="All pages tagged &#39;emacs&#39;." href="/tags/emacs.html" class="ui tag label">emacs</a>
	
      </div>

    <div class="description">
      <p>Emacs29.1から、LSPクライアントとしてEglotが標準搭載されるようになりま
した。今迄は<a
href="https://github.com/emacs-lsp/lsp-mode/">lsp-mode</a>を使っていたのですが、そもそもあまりきちんと使えて
いなかったのでこの機に一旦eglotに移ってみようと思います。</p>
<h1 id="前提">前提</h1>
<ul>
<li>筆者自身、普段そこまでLSPサーバーの機能を使用せずにコーディングしています</li>
<li>複雑な設定等の移行の参考にはならない可能性があります</li>
</ul>
<h1 id="現在のlsp-modeの設定">現在のlsp-modeの設定</h1>
<p>私はパッケージマネージャーとして<a
href="https://github.com/conao3/leaf.el">conao3/leaf.el</a>を使用しているので、その設定を載せます。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(leaf lsp-mode
  :commands lsp
  :ensure t
  :hook
  (sh-mode-hook . lsp)
  (haskell-mode-hook . lsp)
  (kotlin-mode-hook . lsp)
  (c++-mode . lsp)
  :custom
  (lsp-keymap-prefix .  &quot;M-l&quot;)
  :bind
  (&quot;M-l&quot;. nil)
  )
</code></pre>
</div>
<p>割とシンプル。いくつかのmodeでlspコマンドを実行するのと、lspで用いる
prefix keyを"M-l"にしているだけです。これをEglot用に写していきます。</p>
<h1 id="lsp-modeの無効化">lsp-modeの無効化</h1>
<p>lsp-modeを完全に消してしまってもいいのですが、一旦eglotの使い勝手を見
るという意味でlsp-modeも無効にしつつ置いておくことにします。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(remove-hook &#39;sh-mode-hook &#39;lsp)
(remove-hook &#39;sh-mode-hook lsp)
(remove-hook &#39;haskell-mode-hook lsp)
(remove-hook &#39;kotlin-mode-hook lsp)
(remove-hook &#39;c++-mode lsp)
</code></pre>
</div>
<h1 id="Eglotの設定">Eglotの設定</h1>
<p>まずはhookを設定して…後は特にすることなし!!!…え???</p>
<p>EglotはLSPクライアントとしての機能を提供するために、独自のコマンドでは
なく「Emacsで良く使われている他のパッケージ」を用いるので、lsp-modeと
同じキー配置にしたいのでなければキーマップの設定もほぼ要らないと思いま
す。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(leaf eglot
  :hook
  (sh-mode-hook . eglot)
  (haskell-mode-hook . eglot)
  (kotlin-mode-hook . eglot)
  (c++-mode . eglot)
  )
</code></pre>
</div>
<h1 id="lsp-modeのコマンドとの対応">lsp-modeのコマンドとの対応</h1>
<p>正直に言うと私自身あまりきちんとlsp-modeを使っていないのですが、代替コ
マンド(と思われる)の一覧を残しておきます。</p>
<p>尚この表は<a
href="https://emacs-lsp.github.io/lsp-mode/page/keybindings/">lsp-modeのkeybindingsドキュメント</a>で扱われているもののうち、
外部パッケージとの連携を必要としないもののみに絞っています。</p>
<table class="ui celled table">
<thead>
<tr class="header">
<th>Description</th>
<th>lsp-modeコマンド</th>
<th>eglotコマンド</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Start server</td>
<td>lsp</td>
<td><code>eglot</code></td>
</tr>
<tr class="even">
<td>Restart server</td>
<td>lsp-workspace-restart</td>
<td><code>eglot-reconnect</code></td>
</tr>
<tr class="odd">
<td>Shutdown server</td>
<td>lsp-workspace-shutdown</td>
<td><code>eglot-shutdown</code></td>
</tr>
<tr class="even">
<td>Describes current session</td>
<td>lsp-describe-session</td>
<td></td>
</tr>
<tr class="odd">
<td>Disconnect the buffer from the language server keeping the server
running.</td>
<td>lsp-disconnect</td>
<td>-</td>
</tr>
<tr class="even">
<td>format this document.</td>
<td>lsp-format-buffer</td>
<td><code>eglot-format-buffer</code>, <code>eglot-format</code> with no
region</td>
</tr>
<tr class="odd">
<td>format the region, or if none is selected, the current line.</td>
<td>lsp-format-region</td>
<td><code>eglot-format</code></td>
</tr>
<tr class="even">
<td>Add new project root to the list of workspace folders.</td>
<td>lsp-workspace-folders-add</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Remove project root from the list of workspace folders.</td>
<td>lsp-workspace-folders-remove</td>
<td>-</td>
</tr>
<tr class="even">
<td>Remove project root from the workspace blacklist.</td>
<td>lsp-workspace-blacklist-remove</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Toggle code-lens overlays.</td>
<td>lsp-lens-mode</td>
<td>-</td>
</tr>
<tr class="even">
<td>Toggle client-server protocol logging.</td>
<td>lsp-toggle-trace-io</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Toggle symbol highlighting.</td>
<td>lsp-toggle-symbol-highlight</td>
<td>-</td>
</tr>
<tr class="even">
<td>Toggle minor mode for showing information for current line in
sideline. (requires <code class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-sideline-mode</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Toggle minor mode for showing hover information in child frame.
(requires <code class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-doc-mode</td>
<td>-</td>
</tr>
<tr class="even">
<td>Toggle signature auto activate.</td>
<td>nil</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Toggle on type formatting.</td>
<td>nil</td>
<td>-</td>
</tr>
<tr class="even">
<td>Find definitions of the symbol under point.</td>
<td>lsp-find-definition</td>
<td><code>xref-find-definitions</code></td>
</tr>
<tr class="odd">
<td>Find references of the symbol under point.</td>
<td>lsp-find-references</td>
<td><code>xref-find-references</code></td>
</tr>
<tr class="even">
<td>Find implementations of the symbol under point.</td>
<td>lsp-find-implementation</td>
<td><code>xref-find-references</code>,
<code>eglot-find-implementation</code></td>
</tr>
<tr class="odd">
<td>Find type definitions of the symbol under point.</td>
<td>lsp-find-type-definition</td>
<td><code>xref-find-references</code>,
<code>eglot-find-typeDefinition</code></td>
</tr>
<tr class="even">
<td>Find declarations of the symbol under point.</td>
<td>lsp-find-declaration</td>
<td><code>xref-find-references</code>,
<code>eglot-find-declaration</code></td>
</tr>
<tr class="odd">
<td>Find all meaningful symbols that match pattern.</td>
<td>xref-find-apropos</td>
<td>-</td>
</tr>
<tr class="even">
<td>Display the type signature and documentation of the thing at
point.</td>
<td>lsp-describe-thing-at-point</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Activate signature help.</td>
<td>lsp-signature</td>
<td>-</td>
</tr>
<tr class="even">
<td>Trigger display hover information popup and hide it on next
typing.</td>
<td>lsp-ui-doc-glance</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Rename the symbol (and all references to it).</td>
<td>lsp-rename</td>
<td><code>eglot-rename</code></td>
</tr>
<tr class="even">
<td>Perform the source.organizeImports code action, if available.</td>
<td>lsp-organize-imports</td>
<td><code>eglot-code-action-organize-imports</code></td>
</tr>
<tr class="odd">
<td>Execute code action.</td>
<td>lsp-execute-code-action</td>
<td><code>eglot-code-actions</code></td>
</tr>
<tr class="even">
<td>Highlight symbol at point.</td>
<td>lsp-document-highlight</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Peek definitions to the identifier at point. (requires <code
class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-peek-find-definitions</td>
<td>-</td>
</tr>
<tr class="even">
<td>Peek references to the identifier at point. (requires <code
class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-peek-find-references</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Peek implementation locations of the symbol at point. (requires
<code class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-peek-find-implementation</td>
<td>-</td>
</tr>
<tr class="even">
<td>Peek symbols in the workspace. (requires <code
class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-peek-find-workspace-symbol</td>
<td>-</td>
</tr>
</tbody>
</table>
    </div>
  </div>
  

</div>
]]></summary>
</entry>

</feed>
