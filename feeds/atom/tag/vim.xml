<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/tag/vim.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/tag/vim.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2021-03-02T00:00:00Z</updated>
    <entry>
    <title>vim9scriptで気をつけること</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-03-02-vim-vim9script-struggling-memo-v8.2_1-2560.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-03-02-vim-vim9script-struggling-memo-v8.2_1-2560.html</id>
    <published>2021-03-02T00:00:00Z</published>
    <updated>2021-03-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>vim9scriptで気をつけること</h1>
  <div class="ui list">
    <div class="item">Posted on March  2, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on March  2, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;vim&#39;." href="/tags/vim.html" class="ui tag label">vim</a><a title="All pages tagged &#39;vim script&#39;." href="/tags/vim%20script.html" class="ui tag label">vim script</a><a title="All pages tagged &#39;vim9&#39;." href="/tags/vim9.html" class="ui tag label">vim9</a>
  
</div>

<p><a href="https://vim-jp.org/vimdoc-ja/usr_46.html">vim9script</a>は、新しく実装が進められているvim用のスクリプト言語で、 型を取り入れたりモジュールの概念を取り入れたりなど「モダンな言語」の機能をふんだんに取り入れています。</p>
<p><strong>現在はまだ開発中であり不安定である</strong> ためプラグインの作成などには向かないようですが、あくまでも自己責任ということで使ってみたくなったので <a href="https://github.com/Cj-bc/dotfiles/tree/master/dotfiles/vim">自分のvimrc</a> の新しく書く部分に少し使ってみたりしています。</p>
<p>が、如何せん開発中のものなのでバグが多かったり、ドキュメントが不足していたり。。。</p>
<p>取り急ぎ、自分で把握したものはメモしていきます。</p>
<p>なお当方のvimは現時点でのgitのマスターブランチから <code>make</code> コマンドのみによってコンパイルされたもので、</p>
<p>バージョンは <code>8.2 (2019 Dec 12, compiled Mar 2 2021 10:43:55) patch 1-2560</code> です。</p>
<p>又、コードの実行には <a href="https://github.com/thinca/vim-quickrun">thinca/vim-quickrun</a> を使用させていただいております。</p>
<h1 id="文字列連結は&#39;..&#39;。&#39;.&#39;ではない。">文字列連結は'..'。'.'ではない。</h1>
<p>これは明確に「変更点」としては見当たらなかったのですが、恐らく変更されているところです。 <code>.</code> を使って連結しようとしてみたところ、 <code>E15: 無効な式です</code> と言われてしまいました。</p>
<p>&lt;画像入れる&gt;</p>
<p>これを <code>..</code> に変えたところすんなり動きました。</p>
<h1 id="&#39;map()&#39;と&#39;mapnew()&#39;を使い分ける">'map()'と'mapnew()'を使い分ける</h1>
<p><code>map()</code> は、リストや辞書型のオブジェクトの要素ひとつひとつに対して関数を適用してくれる関数です。</p>
<p>Haskellとかやってると馴染みが深いですが、その分注意する必要がある点があります。</p>
<p><code>map()</code> 関数、実は <strong>与えられたリストや辞書型のオブジェクトをそのまま更新</strong> します。 つまり <strong>新しいオブジェクトを作って返すわけではない</strong> のです。</p>
<p>今まではこれで良かったのですが、=vim9script= になると違います。 使用する関数を気をつけないと、 <strong>型の不一致でコンパイルエラー</strong> を受けます。</p>
<p>例えば、</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>var ret = [1, 2, 3]
map(ret, (n) =&gt; n + 1)
</code></pre>
</div>
<p>は <code>a -&gt; a</code> な関数を渡しているので動きますが、</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>var ret = [1, 2, 3]
map(ret, (n) =&gt; n .. &quot;th&quot;)
</code></pre>
</div>
<p>は~a -&gt; b~ (<code>number -&gt; string</code>) な関数を渡しているのでコンパイルエラーになります。</p>
<p>この場合、*新しいオブジェクトを作って返す* バージョンである <code>mapnew()</code> を使用して回避できます。</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>var ret = mapnew([1,2,3], (n) =&gt; n .. &quot;th&quot;)
</code></pre>
</div>
]]></summary>
</entry>
<entry>
    <title>TERMをtmux-256colorにする</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-02-16-terminal-set-TERM-to-tmux-256color.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-02-16-terminal-set-TERM-to-tmux-256color.html</id>
    <published>2021-02-15T00:00:00Z</published>
    <updated>2021-02-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>TERMをtmux-256colorにする</h1>
  <div class="ui list">
    <div class="item">Posted on February 15, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on February 16, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;tmux&#39;." href="/tags/tmux.html" class="ui tag label">tmux</a><a title="All pages tagged &#39;terminal&#39;." href="/tags/terminal.html" class="ui tag label">terminal</a><a title="All pages tagged &#39;vim&#39;." href="/tags/vim.html" class="ui tag label">vim</a>
  
</div>

<h1 id="なぜやるのか">なぜやるのか</h1>
<p>かねてよりmacOSが重くなることに困っていて、 <a href="https://github.com/tmux/tmux/issues/353#issuecomment-202726966">macでtmuxとvimを使うとvimがすごく重くなる</a> を見つけました。</p>
<p>結果論としては「これがパフォーマンスをよくする」というわけではなさそうでしたが、 とりあえずtmuxを使っているので、揃えることにしました。</p>
<h1 id="前提知識">前提知識</h1>
<h2 id="そもそもTERM環境変数とは何か">そもそもTERM環境変数とは何か</h2>
<p><code>$TERM</code> は、ncursesなどが使っている <strong>terminfoライブラリ</strong> の動作に影響する環境変数です。 この変数で「なんの端末を使っているか」を設定し、terminfoライブラリがそれに応じて出力を変えているため、 cursesを使用する開発者は端末の差をあまり考えずに様々な端末に対応したソフトウェアを書くことができるのです。 (エスケープシーケンスとか決めている)</p>
<p>実は端末エミュレーター(とそもそもの端末)には色々な種類があります。有名どころだと <code>xterm</code>, <code>cygwin</code>, <code>guru</code>, <code>vtシリーズ</code> などでしょうか</p>
<p>筆者もそこまで詳しくないですが、途方もない数の仕様の端末が存在しています。 それらを共通のインターフェースで扱えるようにするのが <code>terminfo</code>, そして「今使っている端末」を設定するのが <code>TERM</code> 環境変数、ということです。</p>
<p>ちなみに余談ですが、=terminfo= で使用されるデータはmacの場合、 <code>/usr/share/terminfo</code> に格納されています。</p>
<h2 id="terminfoエントリ">terminfoエントリ</h2>
<p>terminfoエントリは、</p>
<p><a href="info:terminfo">info:terminfo</a></p>
<h1 id="手順">手順</h1>
<ul>
<li><a href="#tmux.confで、tmux内でのTERMを設定する">tmux.confで、tmux内でのTERMを設定する</a></li>
<li><a href="#terminfoエントリーを追加する">(terminfoのエラーが出る場合) terminfoエントリーを追加する</a></li>
</ul>
<h2 id="tmux.confで、tmux内でのTERMを設定する">tmux.confで、tmux内でのTERMを設定する</h2>
<p><a href="https://github.com/tmux/tmux/issues/353#issuecomment-202726966">前出のリンク</a>で説明されているように、 以下を <code>~/. tmux.conf</code> (または使っているtmux.confファイル)に追加します</p>
<div class="ui segment">
<div class="ui top right attached label">
tmux
</div>
<pre class="tmux SourceCode"><code>set -g default-terminal &quot;xterm-256color&quot;
</code></pre>
</div>
<h2 id="terminfoエントリーを追加する">terminfoエントリーを追加する</h2>
<p>筆者の環境(macOS+homebrew)では、terminfoエントリーがないと怒られてしまいエスケープシーケンスが全く使えなくなりました。</p>
<p>しかし、実はhomebrewもきちんとterminfoエントリーを作成してくれています。 <code>/usr/local/opt/ncurses/bin/infocmp</code> には作成されたエントリーが保存されているのですが、ここは残念ながら参照されません。</p>
<p>そこで、<a href="https://github.com/tmux/tmux/issues/1257#issuecomment-581378716">tmuxのissueにあった方法</a> で <code>/usr/bin/infocmp</code> に追加します</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>$ <span class="ex">brew</span> install ncurses</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>$ <span class="ex">/usr/local/opt/ncurses/bin/infocmp</span> tmux-256color <span class="op">&gt;</span> ~/tmux-256color.info</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>$ <span class="ex">tic</span> -xe tmux-256color tmux-256color.info</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co"># This creates a complied entry in ~/.terminfo</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>$ <span class="ex">infocmp</span> tmux-256color <span class="kw">|</span> <span class="fu">head</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="co">#       Reconstructed via infocmp from file:</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co">#       /Users/libin/.terminfo/74/tmux-256color</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="ex">tmux-256color</span><span class="kw">|</span><span class="ex">tmux</span> with 256 colors,</span></code></pre></div>
</div>
<h1 id="参考リンク">参考リンク</h1>
<ul>
<li><a href="https://github.com/tmux/tmux/issues/353#issuecomment-202726966">https://github.com/tmux/tmux/issues/353#issuecomment-202726966</a></li>
<li><a href="https://chakku.hatenablog.com/entry/2018/07/22/040129">tmux上でtmux-256colorを使用する(mac) – ちゃっくのメモ帳</a></li>
<li><a href="https://github.com/tmux/tmux/issues/1257#issuecomment-581378716">https://github.com/tmux/tmux/issues/1257#issuecomment-581378716</a></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>fzf.vimでカレントディレクトリ以外のGitファイルを検索</title>
    <link href="https://cj-bc.github.io/blog/posts/2021-01-13-GFiles-more-careful-with-fzf.html" />
    <id>https://cj-bc.github.io/blog/posts/2021-01-13-GFiles-more-careful-with-fzf.html</id>
    <published>2021-01-14T00:00:00Z</published>
    <updated>2021-01-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>fzf.vimでカレントディレクトリ以外のGitファイルを検索</h1>
  <div class="ui list">
    <div class="item">Posted on January 14, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on January 14, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;fzf.vim&#39;." href="/tags/fzf.vim.html" class="ui tag label">fzf.vim</a><a title="All pages tagged &#39;fzf&#39;." href="/tags/fzf.html" class="ui tag label">fzf</a><a title="All pages tagged &#39;vim&#39;." href="/tags/vim.html" class="ui tag label">vim</a>
  
</div>

<h1 id="GFilesは便利"><code>GFiles</code>は便利</h1>
<p><code>GFiles</code>は、カレントディレクトリにgitレポジトリがあると仮定して、そのレポジトリに認識されるファイル(=一度はコミットされているファイル) の一覧を作り出します。</p>
<p>しかし、場合によっては「カレントディレクトリ以外のgitレポジトリにあるファイルを参照したい」ことがあると思います。</p>
<p>例えば、私は普段プロジェクトに取り組んでいる最中にブログを書いたりするのですが、まさにその時などです。 カレントディレクトリはプロジェクトディレクトリのままで、ブログのレポジトリに対して<code>GFiles</code>を使いたいのです。</p>
<p>これは公式の方法が(多分)ないので直接書き換えます。</p>
<p><code>~/.vim/bundle/fzf.vim/autoload/fzf/vim.vim</code>の<code>s:get_git_root()</code>がgitレポジトリを見つけるためのコードなので、ここにfugitiveが使う<code>b:git_dir</code>変数の中身を適用するように編集します。</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>function! s:get_git_root()
  let root = split(system(&#39;git rev-parse --show-toplevel&#39;), &#39;\n&#39;)[0]
  return v:shell_error ? &#39;&#39; : root
endfunction</code></pre>
</div>
<p>こうだったのが</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>function! s:get_git_root()
  let root = split(system(&#39;git rev-parse --show-toplevel&#39;), &#39;\n&#39;)[0]
  let root_ = root ? root : b:git_dir
  return v:shell_error ? &#39;&#39; : root_
endfunction</code></pre>
</div>
<p>こうすることにより、<code>git_dir</code>も有効に検索されるようになりました。</p>
]]></summary>
</entry>
<entry>
    <title>vim-pandoc-syntaxでurlを非表示にしたい</title>
    <link href="https://cj-bc.github.io/blog/posts/2020-11-13-pandoc-vim-conceal-url-by-default.html" />
    <id>https://cj-bc.github.io/blog/posts/2020-11-13-pandoc-vim-conceal-url-by-default.html</id>
    <published>2020-11-13T00:00:00Z</published>
    <updated>2020-11-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>vim-pandoc-syntaxでurlを非表示にしたい</h1>
  <div class="ui list">
    <div class="item">Posted on November 13, 2020</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November 13, 2020
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;vim&#39;." href="/tags/vim.html" class="ui tag label">vim</a><a title="All pages tagged &#39;pandoc&#39;." href="/tags/pandoc.html" class="ui tag label">pandoc</a>
  
</div>

<h1 id="vimwikiのハイライトが欲しい">vimwikiのハイライトが欲しい</h1>
<h1 id="markdown/vimwiki/pandocのsyntaxハイライト">markdown/vimwiki/pandocのsyntaxハイライト</h1>
<p>vimwikiのsyntaxでは、以下のようなリンクは</p>
<div class="ui segment">
<div class="ui top right attached label">
markdown
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode markdown SourceCode"><code class="sourceCode markdown"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">[</span><span class="ot">説明</span><span class="co">](url)</span></span></code></pre></div>
</div>
<p>このように表示されます(<code>+conceal</code>オプションが有効な場合)</p>
<p><a href="url">説明</a></p>
<p>これがあると、長いURLを持つドキュメントでの可読性がグンと上がります</p>
<p>例えば、<a href="https://cj-bc.github.io/blog/posts/2020-08-19-blender-data-blocks.html">blender data blocks</a>の記事は<code>markdown</code>/<code>vimwiki</code>/<code>pandoc</code>それぞれのsyntaxで 以下のように見えます。</p>
<p><img src="/images/difference_md-vimwiki-pandoc.png" class="ui rounded image" alt="markdown, vimwiki, pandocのハイライトの違い" /></p>
<p>さて、これを普段使いの<code>pandoc</code>syntaxでも使いたいというのが今回の希望です。</p>
<h1 id="結論: デフォルトの変数を設定しろ">結論: デフォルトの変数を設定しろ</h1>
<p>もうこれが答えでした！<br />
ドキュメントよもうね！！！！</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>let g:pandoc#syntax#conceal#urls = 1</code></pre>
</div>
<p>これだけでURLの<code>conceal</code>が有効になり、vimwikiと同じような見た目になります</p>
<p><img src="/images/pandoc-with-conceal.png" class="ui rounded image" alt="設定後のpandoc" /></p>
<h1 id="おまけ">おまけ</h1>
<p>ちなみに該当のコードは<a href="https://github.com/vim-pandoc/vim-pandoc-syntax/blob/2521e2e9b99a3550e1a20f24e09fa46679cbbbc7/syntax/pandoc.vim#L300-L304">300-304行目</a>にありました。</p>
<div class="ui segment">
<div class="ui top right attached label">
vim
</div>
<pre class="vim SourceCode"><code>if g:pandoc#syntax#conceal#urls == 1
    syn region pandocReferenceURL matchgroup=pandocOperator start=/\]\@1&lt;=(/ end=/)/ keepend conceal
else
    syn region pandocReferenceURL matchgroup=pandocOperator start=/\]\@1&lt;=(/ end=/)/ keepend
endif</code></pre>
</div>
]]></summary>
</entry>

</feed>
