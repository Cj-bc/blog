<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/tag/streaming.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/tag/streaming.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>2023-03-28T00:00:00Z</updated>
    <entry>
    <title>2023-03-28-music-zdbuhltodezdbuuso-nanawoakari</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-03-28-music-zdbuhltodezdbuuso-nanawoakari.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-03-28-music-zdbuhltodezdbuuso-nanawoakari.html</id>
    <published>2023-03-28T00:00:00Z</published>
    <updated>2023-03-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>全部ホントで全部ウソ / ナナヲアカリ – の感想文</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on March 28, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on March 28, 2023
	</div>

	

	
	
	
      </div>

    <div class="description">
      <p>中々ない、「感情がそのまま文字を書きたがった曲」だからメモを残しておく。尚今回はガチのメモなので、全 然整理はされていない。</p>
<p>曲: <a href="https://www.youtube.com/watch?v=SlBmv7w1VqY">全部ホントで全部ウソ / ナナヲアカリ - YouTube</a></p>
<p>歌詞的には自分とは真逆な人生を歩んでいる人達の曲だけど、だから自分とは相容れないけれど、何か心にひっ かかるものがある曲だった。そういった生き方をしている人達にとっては素敵な曲だろうな、と思うような曲だった。</p>
<p>実際、人生日替わりコーデな生き方をしている人達の方が多いんだろうし、自分のとても仲の良い(と勝手に思っ ている)人もそういう人だから全然その生き方に対して批判的であることはない。そういった生き方をしている 動機は勿論人にもよるんだろうけど、自分自身が傷付かないように、だったり他の人が傷付かないように、だっ たり他の人にプラスなものを与えるように、だったりすると思うから、それが一概に悪いことだとは思っていな い。(「一概に」と表記したのは、多分だけど悪用する人達も一定数はいるだろうから、そこを排除するため)</p>
<p>ただ、そういった生き方をしている事で悩んでいる事もあるみたいなのは観測した事があるから、それに対して 「このままでいいのだ」「ぶっちゃけ世の中大半は皆同士」っていってくれるのはきっと救われる人達多いだろ うなぁ、などと。「どれが本当の自分か分からない」みたいなね。</p>
<p>こういう、なんか明るそうに見える曲なのに「正直自分のこともよくわかんない」って言っているの、何も考え ずに「このままでいいや!」って言っているわけじゃないってのが伝わってきて、色々悩んだ上でのってのが伝 わってきて、すきだよ。独自解釈だけど。</p>
<p>私は極端に「自分自身が嘘をつくこと」が嫌いで、嘘も方便という言葉を真と考えつつも自分には適用出来無い タイプの人間。や、少なくとも自分はそう思っている。え、そんな嘘あんま付いてないと思っているけどついて たらゴメン…(あでもネットリテラシー的に自分の個人情報はある程度カモフラージュはしているよ、そこは流 石に色々まずいので。嘘は書いていないが。)</p>
<p>外面コーデも壊滅的だが内面コーデは最早選択肢を持っていないというレベルでセットがない。なので一戸建て にずっと住んでる安心感？はすごいあるが必要な環境変化への適応力はない。</p>
<p>なんかどーーでもいいことや嘘を付いた方が得かつ誰も損しない時でも嘘を付くのが気持ち悪く感じてしまう。 テストの採点が間違っていて点数が不正に高くなってしまった時にそれを言いにいかないと気がすまなかったり。 最近はあんまり嘘かなきゃいけないような場面に出会っていないのでそんなに事例が思い付かないな… いうたらツイッターに全部書き込んでしまうのもそう。他の場所でツイートをすることを「嘘をついている」と いう風に感じてしまう。自分自身がね。他の人がどこでツイートしようが別に嘘つきとは思わないし、なんなら それが普通の使い方だと思っている。アカウント分けるのが普通だと。まぁなので気にしていない(気にはなる かもしれんが)。私がちょっと頑固なだけ。</p>
<p>正直自分の方がかっこわるいし普通に不便だし他人への不快感は高い人生をしているだろうな。多分頭が堅いと も言う。また違った生き辛さがある気はする。協調性のかけらもないとも言うので、真似はしない方が良い。</p>
<p>でも私は「かっこよくなること」とか「人に好かれること」を完全に放棄しているのであまり悩んでいないんだ と思う。その割には寂しそうなことあるって？そりゃあるわ。でもある程度諦めと解決方法が他にあるってだけ。 あというたら偶に向こうから話し掛けてくれて話しをしてくれる人がいるのでそれで十分みたいな所ある。後は 推しの存在には大分助けられている…本当に…でも大分依存しすぎだから気をつけなきゃいけないけど。</p>
<p>まぁ細かに自分の事書くエントリでもないか。</p>
<p>ぶっちゃけいっつも"ぶってる"あんたたちの方がかっこいいな、と思うときも沢山あるよ。中々ストレスかかる じゃん。どこでどういう顔をしていたかとか、どんな話し方してたとか、どんな性格してたとか覚えてないとい けないし、毎回それで対応しないといけない。正味私はそれが出来る気はしないから、そうやって他の人のこと 考えたりすることから逃げてるとも言える。それに、いうなれば私の生き方は「周りを気にしない」みたいなも ので正直一番良くない自覚があるよ。だから、だからこそ、そうやって悪い意味ではなく全部ホントで全部ウソ な人生を生きている人達がこうやって「これで、このままでもいいのだ」って思えると良いなってとっても思っ た。</p>
<p>私はこの曲を名取の2023年のお誕生日ライブから聞いて、かつ推しの夜桜みあの同時視聴枠で見たから余計に色々 考えてしまった。あんまりこの表現はすきではないからボカしてかくが、ようするに彼等彼女等は一種「全部ホ ントで全部ウソ」なわけで。そんな存在でこれを歌うって色々と考えることがあると思うんだ。表現者として 「ステージ」を作っている名取自身は特にね。夜桜みあは(これは勝手に思っている事なので間違っている可能 性も大分ある)大分感性が強いし他の人のことも考える人なので、名取が色々考えているのを色々想像したりと か、普段から活動していて色々と考える部分があるんじゃないかなぁと勝手に思っている。全く分からん妄想だ けどさ。</p>
<p>あと名取に関して言えば、この若干「メタ」に触れるような意味にも取れる楽曲を選んだのってそれなりな覚悟 があったんやないかなぁって気持ちを抱いた。や、そもそも今回のライブのテーマ的にも凄くピッタリなんだけど も、ダブルミーニング的になっていると思うんだよね。そもそもの一人の人間(バーチャルだとしても)としての 名取さな自身のこと(ライブテーマ)と、そして"Vとしての名取"と"サナトリウムにいる名取"という関係性のこ とっていう双方に於いて、「全部ホントで全部ウソ」っていう。まぁある意味で「メタ要素」とも取れる患者姿 の事にライブの流れとして触れたので、それ自体ももうステージの一部に取り込まれているんだけど、大分覚悟 を決めての構成じゃないかなぁってにわかながらに思っていた。</p>
<p>と、いうことで、久々に色々文字が浮かんでくる楽曲に出会えたので名取に感謝、そしてそのキッカケをくれた みあちゃんに感謝、といった所。しかも自分と正反対な存在に関しての歌でなるのは珍しい経験だった。</p>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2023-03-23-elisp-substitute-keymap-and-remap</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-03-23-elisp-substitute-keymap-and-remap.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-03-23-elisp-substitute-keymap-and-remap.html</id>
    <published>2023-03-23T00:00:00Z</published>
    <updated>2023-03-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>既存のキーバインドを置き換える(remap, substitute-key-definition)</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on March 23, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on March 23, 2023
	</div>

	

	
	<a title="All pages tagged &#39;emacs&#39;." href="/tags/emacs.html" class="ui tag label">emacs</a><a title="All pages tagged &#39;elisp&#39;." href="/tags/elisp.html" class="ui tag label">elisp</a>
	
      </div>

    <div class="description">
      <p>既存のコマンドを置き換えるコマンドを自作した際、新しいキーバインドを作るのではなくそのコマンドで古い コマンドを置き換えたい時があります。その際、具体的に「元々どこにバインドされていたか」を調べずに置き 換えることが可能なのでメモを残しておきます。</p>
<h1 id="アクティブなキーマップ上のコマンドを置き換えたい: remapキーイベント + define-key">アクティブなキーマップ上のコマンドを置き換えたい: remapキーイベント + <code>define-key</code></h1>
<p><code>remap</code> キーイベントを使うと、新たにremapを行うキーバインドを作成出来ます。注意点として、 <u>実際に置き換えるのではなく「アクティブなキーマップ上のコマンドを置き換えるキーバインド」を新たに作成 する</u> 形になっています。そのため、指定したキーマップから参照されている Prefix keymap中にあるものは置 き換わりません。</p>
<p>つまり、以下のようなキーマップの構成を考えた時、 <code>remap</code> を使って置き換えようとすると、 <code>outer-map</code> に存在する <code>func</code> は <code>new-func</code> で置き換えられますが <code>inner-map</code> に存在する <code>func</code> はそのまま残りま す:</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(let* ((func &#39;(lambda () (interactive) (message &quot;inner-map default&quot;)))
      (new-func &#39;(lambda () (interactive) (message &quot;replaced&quot;)))
      (inner-map &#39;(keymap (?1 . func)))
      (outer-map `(keymap (?a . func) (?b . ,inner-map))))
  (define-key outer-map [remap func] &#39;new-func)
  (describe-keymap outer-map)
  )
</code></pre>
</div>
<h1 id="指定のキーマップから参照される Prefix keymap 内でも変更したい: substitute-key-definition">指定のキーマップから参照される Prefix keymap 内でも変更したい: <code>substitute-key-definition</code></h1>
<p>elisp:substitute-key-definition は、「既存のコマンド」「新しいコマンド」「対象のキーマップ」の3つを 必須の引数として受け取り、「対象のキーマップ」の中にある「既存のコマンド」を「新しいコマンド」で置き 換えるように作用します。</p>
<p>例えば、以下の例ではglobal keymap中の <code>count-words-region</code> を自作のコマンド <code>org-count-words/subtree-if-no-region</code> で置き換えます。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(substitute-key-definition &#39;count-words-region &#39;org-count-words/subtree-if-no-region (current-global-map))
</code></pre>
</div>
<p>(ちなみに <code>org-count-words/subtree-if-no-region</code> は<a href="https://github.com/Cj-bc/dotfiles/blob/0e2e604eaf05ec27a21af04b4e8060dd085f6118/dotfiles/emacs/emacs.d/lib/org-count-words.el#L6-L12">私のdotfiles</a>にあります)</p>
<p><code>substitute-key-definition</code> は、指定したキーマップだけでなく Prefixキーマップ内にあるキーバインドも 置き換えます。つまり、</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(let* ((func &#39;(lambda () (interactive) (message &quot;inner-map default&quot;)))
      (new-func &#39;(lambda () (interactive) (message &quot;replaced&quot;)))
      (inner-map &#39;(keymap (?1 . func)))
      (outer-map `(keymap (?a . func) (?b . ,inner-map))))
  (substitute-key-definition &#39;func &#39;new-func outer-map)
  (describe-keymap outer-map)
  )
</code></pre>
</div>
<p>は以下のような表示が出るはずです</p>
<div class="line-block">key binding<br />
— ——-<br />
<br />
a		new-func<br />
b		Prefix Command<br />
<br />
b 1		new-func</div>
<h1 id="「既存のコマンドを置き換えるキーマップを作りたい」: substitute-key-definition (2)">「既存のコマンドを置き換えるキーマップを作りたい」: <code>substitute-key-definition</code> (2)</h1>
<p><code>substitute-key-definition</code> に <code>OLDMAP</code> 引数も加えてあげると、「 <code>OLDMAP</code> 上の「既存のコマンド」のキー バインド」を参考にして「対象のキーマップ」を更新します。つまり、先程の例を元に以下のようにすると:</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(substitute-key-definition &#39;count-words-region &#39;org-count-words/subtree-if-no-region (current-local-map) (current-global-map))
</code></pre>
</div>
<p>現在の global keymap 中の <code>count-words-region</code> (デフォルトでは <code>\M-=</code> )を置き換える代わりに、 local keymap の同じキーバインド(デフォルトなら <code>\M-=</code>)に <code>count-words-region</code> を設定します。</p>
<h1 id="参考資料">参考資料</h1>
<ul>
<li><a href="info:elisp#Changing Key Bindings">elisp#Changing Key Bindings</a></li>
<li><a href="info:elisp#Remapping Commands">elisp#Remapping Commands</a></li>
</ul>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2023-03-16-yozakura-mia-kawaii</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-03-16-yozakura-mia-kawaii.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-03-16-yozakura-mia-kawaii.html</id>
    <published>2023-03-16T00:00:00Z</published>
    <updated>2023-03-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>夜桜みあのかわいさについて</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on March 16, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on March 16, 2023
	</div>

	

	
	<a title="All pages tagged &#39;夜桜みあ&#39;." href="/tags/%E5%A4%9C%E6%A1%9C%E3%81%BF%E3%81%82.html" class="ui tag label">夜桜みあ</a>
	
      </div>

    <div class="description">
      <p>これ書きながら思ったんですけど、夜桜みあの魅力の中から「かわいさ」だけを抽出するのって難しいんですよね。なので一部 他の魅力について語るオタクが出てくると思うんですけど目を瞑ってもらえると嬉しいです。では。</p>
<h1 id="経緯">経緯</h1>
<p>今日のみあちゃんの配信にてかわいさに関してのレシート(長文マシュマロのこと、基本嫌われる)書くか~~？？みたいなノリになり、試しに 書き出してみた所全然文字数オーバーすることが分かったのでどうせならブログに残しておくことにしました。</p>
<h1 id="夜桜みあちゃんのリンク系">夜桜みあちゃんのリンク系</h1>
<ul>
<li><a href="https://twitter.com/yozakura_mia">Twitter</a></li>
<li><a href="https://www.youtube.com/channel/UCH3tRsAvHSsTi1LDC7l_PDA">YouTube</a></li>
</ul>
<h1 id="注意事項">注意事項</h1>
<ul>
<li>一度も推敲していないです</li>
<li>ですます調の統一を今回は大分サボりました</li>
<li>ただのオタクの怪文書です</li>
<li>今思いつく限りしか載っていないので抜けはあるかも</li>
</ul>
<h1 id="声">声</h1>
<p>まずそもそも声がかわいいね。や、これは本当に沢山ある中での一要素でしかないんですけど、やっぱり夜桜みあに興味を持った 最初のキッカケも声だったし誰もが分かるかわいさっていう面でまず第一に持ってきたいところです。 声はねぇ…ほんとうに…ほんっっとうにかわいいんですよ。夜桜みあの声は(両声類とか程ではなくとも)結構バリーエションが あると思っていて、かわいさに分類されない「かっこよさ」みたいなのもありつつかわいさの魅力もガンガンあるんですよね。 あ、「かっこよさ」とかも正直めちゃくちゃすきなポイントなんですけど今回は「かわいい所」なので一旦パスで。</p>
<p>あとこれはある程度の時間推させて頂いているからこそ分かる所なんですけど、大分声がお姉さんへ成長しましたね。 正直に言うと昔の方がもっとロリっぽかったように思っていまして、昔でいうとロリ100%だった所をロリ70お姉さん30くらいに なっているように思います。でもたまにロリ100%に戻ったりするんで、あなたもしかしてある程度コントロールできる…!?み たいな気持ちでいます。まぁ出来るか。…あざとくない…?? (ここに関して、ちょっと配信に慣れたりして声のトーンが下がったりもしたのかなぁ、と思ったりもしていますが、それはそ れで嬉しくて良い。正味どんな声でもすき。かわいいジャンルとは違うけど、お友達の方々と喋ってたりゲームやって煽ってた りする時のような通常時ぽい声もめちゃすきなんよね。頑張ったけど出なかった大蛇丸とかもね。喉潰さんようにね)</p>
<p>完全にロリ意識してるだろって時の声は本当にとにかく甘い。とにかく甘くてかわいい。は？？なんですか？？？かわいいんで すけど…でも甘いのになんだろ、嫌な感じがないというか。ただただ甘いチョコレートだと沢山食べると「もう今はちょっと いいかな…チョコだけに」ってなるんですが夜桜みあの場合はこう、いくらでも食べれる甘いチョコレートみたいな所があり ます。これは個人の好み的なものもあるのかもしれないですが、私には丁度良い塩梅でした。 あと多分私がそれまで甘いかわいさみたいなの触れてこなかったのもあって、大分落とされましたね。</p>
<p>普通にしている時？でもスタンダードにかわいいですよね。何？？多分そこまでかわいさ意識して喋ってないと(勝手に)思って いるんですけど、とてもかわいいんですよね。でもこれは甘さとはちょっと違うかもしれない。単純に私がすきな周波数帯とマッ チしているだけ説はあります。</p>
<h1 id="仕草">仕草</h1>
<p>次!やっと次だよちなみにここまでで1000文字くらいあるぽいですね。え…? 次は仕草です。夜桜みあの仕草。これは例えばウインクであったり、歌いながらめちゃノリノリだったり、そういうところを指 しています。頑張ってウインクしてるのかわいくない？？配信の最後に毎回ウインクしてるの、かわいくてとても良いよね。 まぁ頑張ってって言ってもみあちゃんはウインク得意だから実際そんなに頑張っているわけじゃないんだろうけど、でもこう…ウ インクした後ドヤッ…ってしてるの、毎回「頑張ったでしょ!」「上手く出来たでしょ!」って自慢されている気がしてとても かわいいなぁと思っています。まぁこれはまた後ほど。</p>
<p>ノリノリなのかわいいのはそれはとてもそうじゃん。それももうそのままじゃん。だって…ねぇ？そこで夜桜みあがめちゃ動 いているんだよ？？もう動いているだけでかわいくない？？？それを言ったら存在自体のかわいさ的な話になるので一旦置いて おくことにします。一旦置いておくことが出来る猫です。おあずけ。簡単に言うと「ノリノリで楽しそうな状態」っていうのが かわいいよねっていう話です。</p>
<h1 id="反応">反応</h1>
<p>何かしらのイベントが起こった時の反応の仕方がかわいいと私の中で話題に。何かへの反応として出る声だとか、驚き方とか、 そういった所です。実は結構細かい所で沢山あるんだけれど、逆にいうと細かい所すぎてあまりしっかりと覚えていないみたい な所があります…オタクくんさぁ…?? 何か考えている間に言葉に出ちゃったりするのもかわいいよね。コメントにしろ自身の行動の結果にしろゲームからのイベント にしろ…喋りながらさらっと物真似になっていたり、さらっと歌い出していたり、さらっとだじゃれを言うてたりとか。例が 雑だって？そんなことないが…?そんなこと言うのは君か？</p>
<p>なんか知らんけどやたら楽観的な反応をしている所もかわいいな…って思ってたりはします。親不知の話の時に本人めちゃピ ンピンしていた話とかね。</p>
<p>「歌詞歌詞歌詞歌詞歌詞…くしくし、僕ハム太郎なのだ!ヘケッ」とか。おうた中に歌詞が抜けた時、あわてつつもメロディラ インには載せながら色々話しているのもすき。</p>
<p>でもここはあれかも、かわいいもそうなんだけど「反応の豊富さ・面白さ」みたいな独立した魅力でもあるから「かわいいも の」って限定して考えるのはあまり向いていないかもしれない。</p>
<h1 id="態度変化">態度変化</h1>
<p>す~~ぐイキる所とかね。それでいてまたすぐフラグ回収して泣きべそかいたり…んでまたす~~ぐイキったり。 なんか上手くいった時とかにめちゃめちゃドヤっているのもかわいいねぇ…って目を細めてしまいます。おじいちゃんなので。 自慢気になってるのもかわいいね…沢山褒めてあげようねぇ…ってなる。 あれですね、感情がよく動いていてかわいいんかなぁと思っています。</p>
<p>実はこの分野、上の「反応」「仕草」あたりと近しい部分でもあって、大分個人的には色々魅力の詰まっている項目だと思って いるけど上手く言葉に出てこなかったので一旦は区切ろうかなと思います。</p>
<h1 id="エピソード">エピソード</h1>
<p>数々のエピソード、色々聞いているけどかわいいなぁ…ってなるのがチラホラある。</p>
<p>だきまくらくん抱いて寝てた話あったじゃないですか、あれめちゃかわいいな…って思いながら聞いてたりしました。夜桜み あの抱き枕くんあんた幸せものな自覚持って…?みあちゃんをよろしく頼むな…側にいてやってくれな…</p>
<p>オタクなエピソードはめちゃくちゃかわいいよね。そもそもこう…「かわいい」が「かわいい」を推しているって時点でかわ いさしかないんですよ。百合とかとも同じだけどかわいいxかわいい=かわいい理論。(これは苦手な場合もあると思うので明言 しておくけど、百合はすきだけどこれに関しては「かわいいものを推している推しがかわいい」という話であって百合として見 てるとかではないので安心してほしい。) そもそも何かに夢中になっている人って人間として魅力的だなと思っていて、夜桜みあの場合夢中になってて楽しそうにしてい るその姿がとってもかわいいな…ってなっています。</p>
<h1 id="御姿">御姿</h1>
<p>ん!あまりにも当たり前すぎて忘れていた事があります。御姿ですね!バリかわいい…かわいくない…?マジで… おようふくもかわいいしお顔もかわいい。足とかすきだったりはするけどそれは「かわいい」とはベクトルが違うので一旦おあ ずけ。</p>
<p>これは初期衣装では思ってなかったんですけど、第二衣装(って勝手に呼んでいる猫耳生える方のやつ)ではめちゃ綺麗なお姉さ んファッションみたいにまとめてきているのにクマちゃんヘアピンはしっかり受け継いでいる所とかかわいいですよね。第二衣 装は「綺麗なお姉さん」っていうのに大分力を入れたデザインをしていると思っているんですよね。腕がスラッとするようなシャ ツだとか、襟元が出来たりだとか、胸元のリボンを小さめにしたりとか、綺麗なおあしが出ていたりとか、お洒落なブーツ履い てたりとか。や、みあちゃんがそこまで考えてたかは分かんないけど個人的な解釈としてね。でも、正直クマちゃんヘアピンっ て「綺麗なお姉さん」っていうイメージとは違うと思うんですよ。なんとなくね。「綺麗なお姉さん」コンセプトだったら外さ れちゃってもっとスマートなヘアピンになったりもしたと思うんです。それなのにクマちゃんヘアピンは生き残った。今迄の思 い出の入ったクマちゃんヘアピンをそのまま外せずに持ってきたのかな…とか、無意識のうちにそれは付けちゃったのかな…と か考えるととってもかわいですよね。</p>
<p>…ん？ここまで書いてて気付いたけどこれはただのオタクの妄想では…??</p>
<h1 id="最後に">最後に</h1>
<p>結構あれだね、「かわいさ」っていう所だけにフォーカスすると書けない事も多いですね…かわいさだけじゃないので夜桜み あの取り柄は。マジで。寧ろかわいさ(特に声のかわいさ)はまだ入口でしかなくってそこから先へ進むと凄く沢山の魅力がある 人だなぁと思っています。ただそこはこの記事の範囲外なので一旦置いておきます。というか書ききれないよ普通に。 夜桜みあだいすきだぞ~!!</p>
<p>大分雑に書いた(しかも推敲をしていない)文なのですが読んでくれた人はありがとう!当方ただのオタク!!! 夜桜みあちゃんのチャンネル登録とTwitterのフォロー、よろしくお願いしますね。</p>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2023-03-02-windows-install-and-setup-containerd-on-wsl2</title>
    <link href="https://cj-bc.github.io/blog/posts/2023-03-02-windows-install-and-setup-containerd-on-wsl2.html" />
    <id>https://cj-bc.github.io/blog/posts/2023-03-02-windows-install-and-setup-containerd-on-wsl2.html</id>
    <published>2023-03-02T00:00:00Z</published>
    <updated>2023-03-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>Windows WSL2上にcontainerdとnerdctlをインストールする</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on March  2, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on March 16, 2023
	</div>

	

	
	<a title="All pages tagged &#39;windows&#39;." href="/tags/windows.html" class="ui tag label">windows</a><a title="All pages tagged &#39;環境構築&#39;." href="/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89.html" class="ui tag label">環境構築</a>
	
      </div>

    <div class="description">
      <p>別段Docker for Windowsでも良いが、良い機会なので新しいものを試してみることとした。 nerdctlはWindowsではまだexperimentalであるため、今回はWSL2上で使用することとする。</p>
<h1 id="WSL2のセットアップ">WSL2のセットアップ</h1>
<h2 id="インストール">インストール</h2>
<p>これは簡単。Windows Terminalをおもむろに開き、</p>
<div class="ui segment">
<div class="ui top right attached label">
powershell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode powershell SourceCode"><code class="sourceCode powershell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>wsl <span class="op">--</span>install <span class="op">-</span>d ubuntu</span></code></pre></div>
</div>
<p>でインストールする。本当はnixOS or archlinuxにしたい所だが、まぁ今回は これを常用するわけではないので一番楽そうなubuntuにしておく。インストー ルが終わったら再起動する。</p>
<h2 id="Systemdを有効化する">Systemdを有効化する</h2>
<p>containerdはsystemdを利用するため、そのセットアップをしてあげる必要がある。 デフォルトでは無効化されているが、<a href="https://learn.microsoft.com/ja-jp/windows/wsl/wsl-config#systemd-support">learn.microsoft.comのドキュメント</a>の 通りにするとすぐに有効化出来る。具体的には、WLS2環境から <code>/etc/wsl.conf</code> に以下を書き込んでWSL2を再起動すれば良い。</p>
<div class="ui segment">
<div class="ui top right attached label">
toml
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode toml SourceCode"><code class="sourceCode toml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">[</span><span class="dt">boot</span><span class="kw">]</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">systemd</span><span class="op">=</span><span class="cn">true</span></span></code></pre></div>
</div>
<p>WSL2の再起動は、powershell等から <code>wsl --shutdown</code> で落として <code>wsl</code> で 起動しなおすことで行える。</p>
<h1 id="nerdctlのインストール">nerdctlのインストール</h1>
<p>apt等では配付されておらず、パッケージマネージャーとしてはlinuxbrewが唯 一の選択肢となる。しかし、 <del>ちょっとインストーラー読むのが面倒だったので</del> これのためだけにパッケージマネージャーを増やすのが少し嫌だったため、バ イナリを持ってくることにした。又この際、イメージのビルド等も行えるよう にしたかったので <code>nerdctl-full</code> のtarファイルを持ってきている。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb3" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> wget https://github.com/containerd/nerdctl/releases/download/v1.2.1/nerdctl-full-1.2.1-linux-amd64.tar.gz</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> tar zxf nerdctl-full-1.2.1-linux-amd64.tar.gz</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> sudo mv bin/<span class="pp">*</span> /usr/local/bin</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> sudo mv lib/<span class="pp">*</span> /usr/local/lib</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> sudo mv libexec /usr/local/libexec</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> sudo mv share/<span class="pp">*</span> /usr/local/share</span></code></pre></div>
</div>
<h2 id="newuidmapのインストール">newuidmapのインストール</h2>
<p>nerdctlはコンテナをrootlessで実行することが出来る。そのためには rootlesskitというソフトウェアが必要になる。それを走らせるために <a href="https://github.com/rootless-containers/rootlesskit#subuid"><code>newuidmap</code> というツールが必要になる</a>ので、インストールする。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb4" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> sudo apt install uidmap</span></code></pre></div>
</div>
<h2 id="rootlessで起動する">rootlessで起動する</h2>
<p>これもまぁそのままドキュメントの指示に従う</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb5" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> containerd-rootless-setuptool.sh install</span></code></pre></div>
</div>
<h2 id="buildkitをインストールする">buildkitをインストールする</h2>
<p>最初は気付かなかったが、どうやら <code>nerdctl build .</code> とかしようとすると buildkitのインストールが必要となるらしい(インストールされているとばか り思っていたが、上記のではダメらしい)。</p>
<p>(一度 <code>nerdctl build .</code> して怒られた)</p>
<p>そこで、言われた通りにコマンドを実行しておく</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb6" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> containerd-rootless-setuptool.sh install-buildkit</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> containerd-rootless-setuptool.sh install-buildkit-containerd</span></code></pre></div>
</div>
<h1 id="トラブルシューティング">トラブルシューティング</h1>
<h2 id="イメージをpullしようとするとタイムアウトする">イメージをpullしようとするとタイムアウトする</h2>
<p>どうやら既知の問題らしい。<a href="https://github.com/containerd/nerdctl/issues/677">containerd/nerdctl #677</a>のコメントにあるように、 <code>containerd-rootless-setuptool.sh nsenter bash</code> でrootlesskitの名前空 間に入った後、 <code>/etc/resolv.conf</code> のnameserverを8.8.8.8にしたら疎通す るようになった。</p>
<h2 id="CGroup v2の対応方法">CGroup v2の対応方法</h2>
<p>containerdをrootlessで使っている場合、一部の機能が制限されてしまう。 それを避けたい場合CGroup v2に対応する必要があるが、<a href="https://rootlesscontaine.rs/getting-started/common/cgroup2/">公式で示されている 方法</a>はgrubの設定を書き換える必要があり、Grubが使用されていないWSL2環境 では行うことが出来ない。そこで、<a href="https://learn.microsoft.com/ja-jp/windows/wsl/wsl-config#configuration-setting-for-wslconfig">.wslconfig</a>を設定してあげる必要がある。</p>
<h1 id="Rootlessにするべきなのか否か？">Rootlessにするべきなのか否か？</h1>
<p>まぁ基本的にはRoot権限を用いない方が良いというのはそうなのだが、ならば デフォルトでそう設定されているはず。デフォルトでRootを必要とするという ことは、何らかしらのトレードオフが存在していると考えて良い。ということ で、Rootlessにする場合のメリット・デメリットをすこし軽く調べてみた</p>
<ul>
<li><a href="https://medium.com/nttlabs/accelerating-rootless-container-network-29d0e908dda4">インターンレポート: RootlessコンテナのTCP/IP高速化 | by 松本直樹 | nttlabs | Medium</a></li>
</ul>
<h1 id="[補足] Containerdのインストール">[補足] Containerdのインストール</h1>
<p>今回はnerdctlと共に導入したのでこれは結局アンインストールしたが、 containerdのみをインストールするのも先にやっていたのでメモとして残して おく。</p>
<p>containerdはaptで配付されているが、独自のレポジトリを追加してあげる必 要がある。これは<a href="https://github.com/containerd/containerd/blob/main/docs/getting-started.md#option-2-from-apt-get-or-dnf">containerdプロジェクトではなくdockerからの提供となって いる</a>ので注意。ということで、<a href="https://docs.docker.com/engine/install/ubuntu/">Dockerのドキュメントにある手順</a>を元にして Dockerに関する部分を省きつつインストールする。具体的には、大体はそのま まだが <code>apt-get</code> で一部分のみをインストールすることにする。 ちなみにこれで足りているのかはわからん。</p>
<div class="ui segment">
<div class="ui top right attached label">
diff
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode diff SourceCode"><code class="sourceCode diff"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="st">- sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="va">+ sudo apt-get install containerd.io</span></span></code></pre></div>
</div>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-11-30-elisp-how-to-call-interactive-function-with-prefix-argunments-from-elisp</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-11-30-elisp-how-to-call-interactive-function-with-prefix-argunments-from-elisp.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-11-30-elisp-how-to-call-interactive-function-with-prefix-argunments-from-elisp.html</id>
    <published>2022-11-30T00:00:00Z</published>
    <updated>2022-11-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>Interactiveな関数をElispからPrefix Arguments付きで呼ぶ</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on November 30, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on November 30, 2022
	</div>

	

	
	<a title="All pages tagged &#39;elisp&#39;." href="/tags/elisp.html" class="ui tag label">elisp</a>
	
      </div>

    <div class="description">
      <h1 id="やりたいこと">やりたいこと</h1>
<p>Org modeで「現在時刻を即時入力したい」時、インタラクティブな編集ではhelp:org-time-stamp-inactive を Prefix Argument 2つで呼び出すことで実現出来ます。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>C-u C-u M-x org-time-stamp-inactive
; =&gt; [2022-11-30 Wed 09:51]
</code></pre>
</div>
<p>で、これをElispからも行いたいというのが今回の目的です。</p>
<h1 id="結論">結論</h1>
<p>Prefix Argumentの代わりに <code>'(4)</code> のような <code>raw prefix argument</code> を指定します。 冒頭の回答は以下:</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(org-time-stamp-inactive &#39;(16))
</code></pre>
</div>
<p>詳しくは<a href="info:elisp#Prefix Command Arguments">elisp#Prefix Command Arguments</a>を参照して下さい。</p>
<h2 id="Raw Prefix Argumentとは？">Raw Prefix Argumentとは？</h2>
<p>Prefix Argumentsには2種類の表現方法(representation)があり、その一つが "Raw" です。ちなみにもう一つは"numeric"。内部的にはこの "raw prefix argument" とし て使っていますが、コマンドからはどちらの表現でも用いることが出来ます。実際に Interactiveなコマンドが動作する際には、 <code>(interactive)</code> の引数に応じて"raw" 若しくは"numeric"な値が最初の引数として与えられるようです。</p>
<p>Raw prefix argumentは、その与え方によって値が変化します。</p>
<div id="Prefix argumentの指定方法とRaw prefix argumentの値">
<table class="ui celled table">
<thead>
<tr class="header">
<th>Prefix argument</th>
<th>Raw prefix argumentの値</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>何もなし</td>
<td><code>nil</code></td>
</tr>
<tr class="even">
<td><code>C-u &lt;数字&gt;</code></td>
<td><code>&lt;数字&gt;</code></td>
</tr>
<tr class="odd">
<td><code>C-u</code></td>
<td><code>(4)</code></td>
</tr>
<tr class="even">
<td><code>C-u C-u</code></td>
<td><code>(16)</code></td>
</tr>
<tr class="odd">
<td><code>C-u C-u C-u</code></td>
<td><code>(64)</code></td>
</tr>
<tr class="even">
<td><code>M--~/~C-u -</code></td>
<td><code>-</code></td>
</tr>
<tr class="odd">
<td><code>C-u -&lt;数字&gt;</code></td>
<td><code>-&lt;数字&gt;</code></td>
</tr>
</tbody>
</table>
</div>
<p>数字なしで <code>C-u</code> が呼ばれる際は、リストとして渡されるようです。複数の <code>C-u</code> が与えられた場合は、4倍ずつされていくようです。</p>
<h1 id="出来そうで上手くいかなかったもの">出来そうで上手くいかなかったもの</h1>
<p>help:universal-argument, help:digit-argument, help:negative-argument みたいなものは存在するがどうやって使うのか？がわかりません…oh… どうやら <code>C-u</code> 等にバインドされているらしいので、Elispから使う用では ないみたい？</p>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-11-04-st-read-source-code-of-st-suckless-terminal</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-11-04-st-read-source-code-of-st-suckless-terminal.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-11-04-st-read-source-code-of-st-suckless-terminal.html</id>
    <published>2022-11-04T00:00:00Z</published>
    <updated>2022-11-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>st (Suckless Terminal)のソースコードリーディング</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on November  4, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on November 30, 2022
	</div>

	

	
	<a title="All pages tagged &#39;st&#39;." href="/tags/st.html" class="ui tag label">st</a><a title="All pages tagged &#39;code-reading&#39;." href="/tags/code-reading.html" class="ui tag label">code-reading</a>
	
      </div>

    <div class="description">
      <p><a href="https://st.suckless.org/">st</a>はC言語で書かれた、とてもシンプルなX用ターミナル実装です。 (<a href="https://wiki.archlinux.jp/index.php/St">archlinux wikiのページ</a>)</p>
<p>コンフィグの設定は <code>config.h</code> を編集する、機能拡張にはパッチを適用 するなどといった(コードベース的に)徹底的なシンプルさを持ちます。 そのため、ターミナル実装の作り方を知るためには一番良い教材になりそうだと感じ たのでコードを読んでみることとします。</p>
<h1 id="使用するコードのバージョン">使用するコードのバージョン</h1>
<p>[2022-11-04 Fri 20:24] 現在の<a href="https://git.suckless.org/st/commit/e5e959835b195c023d1f685ef4dbbcfc3b5120b2.html">最新のコミット</a>を使用します。</p>
<ul>
<li>hash: <code>e5e959835b195c023d1f685ef4dbbcfc3b5120b2</code></li>
</ul>
<h1 id="この記事の構成について">この記事の構成について</h1>
<p>この記事では、ソースコードが <code>MIT/X</code> ライセンスであるため 実際のコードを引用してきて、各関数・型毎にコメントを書いていきます。 (ライセンスは</p>
<p>又、全体の処理の流れ等は分かり次第別のヘディングに分割して 記載する予定です。</p>
<h1 id="コードリーディング">コードリーディング</h1>
<h2 id="st.h"><code>st.h</code></h2>
<p>ヘッダファイル内でのみ定義されているものについてのみ解説し、 <code>st.c</code> のシグネチャは省く。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define MIN(a, b)		((a) &lt; (b) ? (a) : (b))</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define MAX(a, b)		((a) &lt; (b) ? (b) : (a))</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define LEN(a)			(sizeof(a) / sizeof(a)[0])</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define BETWEEN(x, a, b)	((a) &lt;= (x) &amp;&amp; (x) &lt;= (b))</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define DIVCEIL(n, d)		(((n) + ((d) - 1)) / (d))</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define DEFAULT(a, b)		(a) = (a) ? (a) : (b)</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define LIMIT(x, a, b)		(x) = (x) &lt; (a) ? (a) : (x) &gt; (b) ? (b) : (x)</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb8"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define ATTRCMP(a, b)		((a).mode != (b).mode || (a).fg != (b).fg || \</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="pp">                                (a).bg != (b).bg)</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb9"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define TIMEDIFF(t1, t2)	((t1.tv_sec-t2.tv_sec)*1000 + \</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="pp">                                (t1.tv_nsec-t2.tv_nsec)/1E6)</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb10"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define MODBIT(x, set, bit)	((set) ? ((x) |= (bit)) : ((x) &amp;= ~(bit)))</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb11"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define TRUECOLOR(r,g,b)	(1 &lt;&lt; 24 | (r) &lt;&lt; 16 | (g) &lt;&lt; 8 | (b))</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb12"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define IS_TRUECOL(x)		(1 &lt;&lt; 24 &amp; (x))</span></span></code></pre></div>
</div>
<ol>
<li><p><code>glyph_attribute</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb13"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> glyph_attribute <span class="op">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>        ATTR_NULL       <span class="op">=</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>        ATTR_BOLD       <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>        ATTR_FAINT      <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>        ATTR_ITALIC     <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">2</span><span class="op">,</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>        ATTR_UNDERLINE  <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">3</span><span class="op">,</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>        ATTR_BLINK      <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">4</span><span class="op">,</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>        ATTR_REVERSE    <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">5</span><span class="op">,</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>        ATTR_INVISIBLE  <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">6</span><span class="op">,</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>        ATTR_STRUCK     <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">7</span><span class="op">,</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>        ATTR_WRAP       <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">8</span><span class="op">,</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>        ATTR_WIDE       <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">9</span><span class="op">,</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>        ATTR_WDUMMY     <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">10</span><span class="op">,</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>        ATTR_BOLD_FAINT <span class="op">=</span> ATTR_BOLD <span class="op">|</span> ATTR_FAINT<span class="op">,</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
</div></li>
<li><p><code>selection_mode</code></p>
<ul>
<li><code>SEL_IDLE</code>
<ul>
<li>セレクションを初期化した時</li>
<li>セレクションを消した時</li>
<li>セレクションの移動が終わった時</li>
</ul></li>
</ul>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb14"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> selection_mode <span class="op">{</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>        SEL_IDLE <span class="op">=</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>        SEL_EMPTY <span class="op">=</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>        SEL_READY <span class="op">=</span> <span class="dv">2</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
</div></li>
<li><p><code>selection_type</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb15"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> selection_type <span class="op">{</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>        SEL_REGULAR <span class="op">=</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>        SEL_RECTANGULAR <span class="op">=</span> <span class="dv">2</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
</div></li>
<li><p><code>selection_snap</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb16"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> selection_snap <span class="op">{</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>        SNAP_WORD <span class="op">=</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>        SNAP_LINE <span class="op">=</span> <span class="dv">2</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
</div></li>
<li><p><code>uchar</code>, <code>uint</code>, <code>ulong</code>, <code>ushort</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb17"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">char</span> uchar<span class="op">;</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">int</span> uint<span class="op">;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> ulong<span class="op">;</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">short</span> ushort<span class="op">;</span></span></code></pre></div>
</div></li>
<li><p><code>Rune</code></p>
<p>1文字のキャラクターコードを示す (<span class="spurious-link" target="*~Glyph~, ~Glyph_~"><em>Glyph</em></span>のコメントより)</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb18"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">uint_least32_t</span> Rune<span class="op">;</span></span></code></pre></div>
</div></li>
<li><p><code>Glyph</code>, <code>Glyph_</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb19"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define Glyph Glyph_</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>        Rune u<span class="op">;</span>           <span class="co">/* character code */</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>        ushort mode<span class="op">;</span>      <span class="co">/* attribute flags */</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">uint32_t</span> fg<span class="op">;</span>      <span class="co">/* foreground  */</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">uint32_t</span> bg<span class="op">;</span>      <span class="co">/* background  */</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> Glyph<span class="op">;</span></span></code></pre></div>
</div></li>
<li><p><code>Line</code></p>
<p><span class="spurious-link" target="*~Glyph"><em>Glyph</em></span>の横並び=一列。 ポインタで可変長配列、という感じ？ メモリ管理をきちんとしないと死にそう。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb20"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> Glyph <span class="op">*</span>Line<span class="op">;</span></span></code></pre></div>
</div></li>
<li><p><code>Arg</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb21"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">union</span> <span class="op">{</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i<span class="op">;</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>        uint ui<span class="op">;</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> f<span class="op">;</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">const</span> <span class="dt">void</span> <span class="op">*</span>v<span class="op">;</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>s<span class="op">;</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> Arg<span class="op">;</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a><span class="co">/* config.h globals */</span></span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">char</span> <span class="op">*</span>utmp<span class="op">;</span></span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">char</span> <span class="op">*</span>scroll<span class="op">;</span></span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">char</span> <span class="op">*</span>stty_args<span class="op">;</span></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">char</span> <span class="op">*</span>vtiden<span class="op">;</span></span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">wchar_t</span> <span class="op">*</span>worddelimiters<span class="op">;</span></span>
<span id="cb21-16"><a href="#cb21-16" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> allowaltscreen<span class="op">;</span></span>
<span id="cb21-17"><a href="#cb21-17" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> allowwindowops<span class="op">;</span></span>
<span id="cb21-18"><a href="#cb21-18" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">char</span> <span class="op">*</span>termname<span class="op">;</span></span>
<span id="cb21-19"><a href="#cb21-19" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">unsigned</span> <span class="dt">int</span> tabspaces<span class="op">;</span></span>
<span id="cb21-20"><a href="#cb21-20" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">unsigned</span> <span class="dt">int</span> defaultfg<span class="op">;</span></span>
<span id="cb21-21"><a href="#cb21-21" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">unsigned</span> <span class="dt">int</span> defaultbg<span class="op">;</span></span>
<span id="cb21-22"><a href="#cb21-22" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">unsigned</span> <span class="dt">int</span> defaultcs<span class="op">;</span></span></code></pre></div>
</div></li>
</ol>
<h2 id="st.c"><code>st.c</code></h2>
<ol>
<li><p>ヘッダー</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb22"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* See LICENSE for license details. */</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;ctype.h&gt;</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;errno.h&gt;</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;fcntl.h&gt;</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;limits.h&gt;</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;pwd.h&gt;</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdarg.h&gt;</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdlib.h&gt;</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string.h&gt;</span></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;signal.h&gt;</span></span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/ioctl.h&gt;</span></span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/select.h&gt;</span></span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/types.h&gt;</span></span>
<span id="cb22-15"><a href="#cb22-15" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/wait.h&gt;</span></span>
<span id="cb22-16"><a href="#cb22-16" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;termios.h&gt;</span></span>
<span id="cb22-17"><a href="#cb22-17" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;unistd.h&gt;</span></span>
<span id="cb22-18"><a href="#cb22-18" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;wchar.h&gt;</span></span>
<span id="cb22-19"><a href="#cb22-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-20"><a href="#cb22-20" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;st.h&quot;</span></span>
<span id="cb22-21"><a href="#cb22-21" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;win.h&quot;</span></span>
<span id="cb22-22"><a href="#cb22-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-23"><a href="#cb22-23" aria-hidden="true" tabindex="-1"></a><span class="pp">#if   defined(__linux)</span></span>
<span id="cb22-24"><a href="#cb22-24" aria-hidden="true" tabindex="-1"></a> <span class="pp">#include </span><span class="im">&lt;pty.h&gt;</span></span>
<span id="cb22-25"><a href="#cb22-25" aria-hidden="true" tabindex="-1"></a><span class="pp">#elif defined(__OpenBSD__) || defined(__NetBSD__) || defined(__APPLE__)</span></span>
<span id="cb22-26"><a href="#cb22-26" aria-hidden="true" tabindex="-1"></a> <span class="pp">#include </span><span class="im">&lt;util.h&gt;</span></span>
<span id="cb22-27"><a href="#cb22-27" aria-hidden="true" tabindex="-1"></a><span class="pp">#elif defined(__FreeBSD__) || defined(__DragonFly__)</span></span>
<span id="cb22-28"><a href="#cb22-28" aria-hidden="true" tabindex="-1"></a> <span class="pp">#include </span><span class="im">&lt;libutil.h&gt;</span></span>
<span id="cb22-29"><a href="#cb22-29" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb22-30"><a href="#cb22-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-31"><a href="#cb22-31" aria-hidden="true" tabindex="-1"></a><span class="co">/* Arbitrary sizes */</span></span>
<span id="cb22-32"><a href="#cb22-32" aria-hidden="true" tabindex="-1"></a><span class="pp">#define UTF_INVALID   0xFFFD</span></span>
<span id="cb22-33"><a href="#cb22-33" aria-hidden="true" tabindex="-1"></a><span class="pp">#define UTF_SIZ       4</span></span>
<span id="cb22-34"><a href="#cb22-34" aria-hidden="true" tabindex="-1"></a><span class="pp">#define ESC_BUF_SIZ   (128*UTF_SIZ)</span></span>
<span id="cb22-35"><a href="#cb22-35" aria-hidden="true" tabindex="-1"></a><span class="pp">#define ESC_ARG_SIZ   16</span></span>
<span id="cb22-36"><a href="#cb22-36" aria-hidden="true" tabindex="-1"></a><span class="pp">#define STR_BUF_SIZ   ESC_BUF_SIZ</span></span>
<span id="cb22-37"><a href="#cb22-37" aria-hidden="true" tabindex="-1"></a><span class="pp">#define STR_ARG_SIZ   ESC_ARG_SIZ</span></span>
<span id="cb22-38"><a href="#cb22-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-39"><a href="#cb22-39" aria-hidden="true" tabindex="-1"></a><span class="co">/* macros */</span></span>
<span id="cb22-40"><a href="#cb22-40" aria-hidden="true" tabindex="-1"></a><span class="pp">#define IS_SET(flag)		((term.mode &amp; (flag)) != 0)</span></span>
<span id="cb22-41"><a href="#cb22-41" aria-hidden="true" tabindex="-1"></a><span class="pp">#define ISCONTROLC0(c)		(BETWEEN(c, 0, 0x1f) || (c) == 0x7f)</span></span>
<span id="cb22-42"><a href="#cb22-42" aria-hidden="true" tabindex="-1"></a><span class="pp">#define ISCONTROLC1(c)		(BETWEEN(c, 0x80, 0x9f))</span></span>
<span id="cb22-43"><a href="#cb22-43" aria-hidden="true" tabindex="-1"></a><span class="pp">#define ISCONTROL(c)		(ISCONTROLC0(c) || ISCONTROLC1(c))</span></span>
<span id="cb22-44"><a href="#cb22-44" aria-hidden="true" tabindex="-1"></a><span class="pp">#define ISDELIM(u)		(u &amp;&amp; wcschr(worddelimiters, u))</span></span>
<span id="cb22-45"><a href="#cb22-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-46"><a href="#cb22-46" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> term_mode <span class="op">{</span></span>
<span id="cb22-47"><a href="#cb22-47" aria-hidden="true" tabindex="-1"></a>        MODE_WRAP        <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb22-48"><a href="#cb22-48" aria-hidden="true" tabindex="-1"></a>        MODE_INSERT      <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb22-49"><a href="#cb22-49" aria-hidden="true" tabindex="-1"></a>        MODE_ALTSCREEN   <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">2</span><span class="op">,</span></span>
<span id="cb22-50"><a href="#cb22-50" aria-hidden="true" tabindex="-1"></a>        MODE_CRLF        <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">3</span><span class="op">,</span></span>
<span id="cb22-51"><a href="#cb22-51" aria-hidden="true" tabindex="-1"></a>        MODE_ECHO        <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">4</span><span class="op">,</span></span>
<span id="cb22-52"><a href="#cb22-52" aria-hidden="true" tabindex="-1"></a>        MODE_PRINT       <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">5</span><span class="op">,</span></span>
<span id="cb22-53"><a href="#cb22-53" aria-hidden="true" tabindex="-1"></a>        MODE_UTF8        <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">6</span><span class="op">,</span></span>
<span id="cb22-54"><a href="#cb22-54" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb22-55"><a href="#cb22-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-56"><a href="#cb22-56" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> cursor_movement <span class="op">{</span></span>
<span id="cb22-57"><a href="#cb22-57" aria-hidden="true" tabindex="-1"></a>        CURSOR_SAVE<span class="op">,</span></span>
<span id="cb22-58"><a href="#cb22-58" aria-hidden="true" tabindex="-1"></a>        CURSOR_LOAD</span>
<span id="cb22-59"><a href="#cb22-59" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb22-60"><a href="#cb22-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-61"><a href="#cb22-61" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> cursor_state <span class="op">{</span></span>
<span id="cb22-62"><a href="#cb22-62" aria-hidden="true" tabindex="-1"></a>        CURSOR_DEFAULT  <span class="op">=</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb22-63"><a href="#cb22-63" aria-hidden="true" tabindex="-1"></a>        CURSOR_WRAPNEXT <span class="op">=</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb22-64"><a href="#cb22-64" aria-hidden="true" tabindex="-1"></a>        CURSOR_ORIGIN   <span class="op">=</span> <span class="dv">2</span></span>
<span id="cb22-65"><a href="#cb22-65" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb22-66"><a href="#cb22-66" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-67"><a href="#cb22-67" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> charset <span class="op">{</span></span>
<span id="cb22-68"><a href="#cb22-68" aria-hidden="true" tabindex="-1"></a>        CS_GRAPHIC0<span class="op">,</span></span>
<span id="cb22-69"><a href="#cb22-69" aria-hidden="true" tabindex="-1"></a>        CS_GRAPHIC1<span class="op">,</span></span>
<span id="cb22-70"><a href="#cb22-70" aria-hidden="true" tabindex="-1"></a>        CS_UK<span class="op">,</span></span>
<span id="cb22-71"><a href="#cb22-71" aria-hidden="true" tabindex="-1"></a>        CS_USA<span class="op">,</span></span>
<span id="cb22-72"><a href="#cb22-72" aria-hidden="true" tabindex="-1"></a>        CS_MULTI<span class="op">,</span></span>
<span id="cb22-73"><a href="#cb22-73" aria-hidden="true" tabindex="-1"></a>        CS_GER<span class="op">,</span></span>
<span id="cb22-74"><a href="#cb22-74" aria-hidden="true" tabindex="-1"></a>        CS_FIN</span>
<span id="cb22-75"><a href="#cb22-75" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb22-76"><a href="#cb22-76" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-77"><a href="#cb22-77" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> escape_state <span class="op">{</span></span>
<span id="cb22-78"><a href="#cb22-78" aria-hidden="true" tabindex="-1"></a>        ESC_START      <span class="op">=</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb22-79"><a href="#cb22-79" aria-hidden="true" tabindex="-1"></a>        ESC_CSI        <span class="op">=</span> <span class="dv">2</span><span class="op">,</span></span>
<span id="cb22-80"><a href="#cb22-80" aria-hidden="true" tabindex="-1"></a>        ESC_STR        <span class="op">=</span> <span class="dv">4</span><span class="op">,</span>  <span class="co">/* DCS, OSC, PM, APC */</span></span>
<span id="cb22-81"><a href="#cb22-81" aria-hidden="true" tabindex="-1"></a>        ESC_ALTCHARSET <span class="op">=</span> <span class="dv">8</span><span class="op">,</span></span>
<span id="cb22-82"><a href="#cb22-82" aria-hidden="true" tabindex="-1"></a>        ESC_STR_END    <span class="op">=</span> <span class="dv">16</span><span class="op">,</span> <span class="co">/* a final string was encountered */</span></span>
<span id="cb22-83"><a href="#cb22-83" aria-hidden="true" tabindex="-1"></a>        ESC_TEST       <span class="op">=</span> <span class="dv">32</span><span class="op">,</span> <span class="co">/* Enter in test mode */</span></span>
<span id="cb22-84"><a href="#cb22-84" aria-hidden="true" tabindex="-1"></a>        ESC_UTF8       <span class="op">=</span> <span class="dv">64</span><span class="op">,</span></span>
<span id="cb22-85"><a href="#cb22-85" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb22-86"><a href="#cb22-86" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-87"><a href="#cb22-87" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb22-88"><a href="#cb22-88" aria-hidden="true" tabindex="-1"></a>        Glyph attr<span class="op">;</span> <span class="co">/* current char attributes */</span></span>
<span id="cb22-89"><a href="#cb22-89" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> x<span class="op">;</span></span>
<span id="cb22-90"><a href="#cb22-90" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> y<span class="op">;</span></span>
<span id="cb22-91"><a href="#cb22-91" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> state<span class="op">;</span></span>
<span id="cb22-92"><a href="#cb22-92" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> TCursor<span class="op">;</span></span>
<span id="cb22-93"><a href="#cb22-93" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-94"><a href="#cb22-94" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb22-95"><a href="#cb22-95" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> mode<span class="op">;</span></span>
<span id="cb22-96"><a href="#cb22-96" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> type<span class="op">;</span></span>
<span id="cb22-97"><a href="#cb22-97" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> snap<span class="op">;</span></span>
<span id="cb22-98"><a href="#cb22-98" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*</span></span>
<span id="cb22-99"><a href="#cb22-99" aria-hidden="true" tabindex="-1"></a><span class="co">         * Selection variables:</span></span>
<span id="cb22-100"><a href="#cb22-100" aria-hidden="true" tabindex="-1"></a><span class="co">         * nb – normalized coordinates of the beginning of the selection</span></span>
<span id="cb22-101"><a href="#cb22-101" aria-hidden="true" tabindex="-1"></a><span class="co">         * ne – normalized coordinates of the end of the selection</span></span>
<span id="cb22-102"><a href="#cb22-102" aria-hidden="true" tabindex="-1"></a><span class="co">         * ob – original coordinates of the beginning of the selection</span></span>
<span id="cb22-103"><a href="#cb22-103" aria-hidden="true" tabindex="-1"></a><span class="co">         * oe – original coordinates of the end of the selection</span></span>
<span id="cb22-104"><a href="#cb22-104" aria-hidden="true" tabindex="-1"></a><span class="co">         */</span></span>
<span id="cb22-105"><a href="#cb22-105" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb22-106"><a href="#cb22-106" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> x<span class="op">,</span> y<span class="op">;</span></span>
<span id="cb22-107"><a href="#cb22-107" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> nb<span class="op">,</span> ne<span class="op">,</span> ob<span class="op">,</span> oe<span class="op">;</span></span>
<span id="cb22-108"><a href="#cb22-108" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-109"><a href="#cb22-109" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> alt<span class="op">;</span></span>
<span id="cb22-110"><a href="#cb22-110" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> Selection<span class="op">;</span></span>
<span id="cb22-111"><a href="#cb22-111" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-112"><a href="#cb22-112" aria-hidden="true" tabindex="-1"></a><span class="co">/* Internal representation of the screen */</span></span>
<span id="cb22-113"><a href="#cb22-113" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb22-114"><a href="#cb22-114" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> row<span class="op">;</span>      <span class="co">/* nb row */</span></span>
<span id="cb22-115"><a href="#cb22-115" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> col<span class="op">;</span>      <span class="co">/* nb col */</span></span>
<span id="cb22-116"><a href="#cb22-116" aria-hidden="true" tabindex="-1"></a>        Line <span class="op">*</span>line<span class="op">;</span>   <span class="co">/* screen */</span></span>
<span id="cb22-117"><a href="#cb22-117" aria-hidden="true" tabindex="-1"></a>        Line <span class="op">*</span>alt<span class="op">;</span>    <span class="co">/* alternate screen */</span></span>
<span id="cb22-118"><a href="#cb22-118" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> <span class="op">*</span>dirty<span class="op">;</span>   <span class="co">/* dirtyness of lines */</span></span>
<span id="cb22-119"><a href="#cb22-119" aria-hidden="true" tabindex="-1"></a>        TCursor c<span class="op">;</span>    <span class="co">/* cursor */</span></span>
<span id="cb22-120"><a href="#cb22-120" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> ocx<span class="op">;</span>      <span class="co">/* old cursor col */</span></span>
<span id="cb22-121"><a href="#cb22-121" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> ocy<span class="op">;</span>      <span class="co">/* old cursor row */</span></span>
<span id="cb22-122"><a href="#cb22-122" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> top<span class="op">;</span>      <span class="co">/* top    scroll limit */</span></span>
<span id="cb22-123"><a href="#cb22-123" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> bot<span class="op">;</span>      <span class="co">/* bottom scroll limit */</span></span>
<span id="cb22-124"><a href="#cb22-124" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> mode<span class="op">;</span>     <span class="co">/* terminal mode flags */</span></span>
<span id="cb22-125"><a href="#cb22-125" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> esc<span class="op">;</span>      <span class="co">/* escape state flags */</span></span>
<span id="cb22-126"><a href="#cb22-126" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> trantbl<span class="op">[</span><span class="dv">4</span><span class="op">];</span> <span class="co">/* charset table translation */</span></span>
<span id="cb22-127"><a href="#cb22-127" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> charset<span class="op">;</span>  <span class="co">/* current charset */</span></span>
<span id="cb22-128"><a href="#cb22-128" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> icharset<span class="op">;</span> <span class="co">/* selected charset for sequence */</span></span>
<span id="cb22-129"><a href="#cb22-129" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> <span class="op">*</span>tabs<span class="op">;</span></span>
<span id="cb22-130"><a href="#cb22-130" aria-hidden="true" tabindex="-1"></a>        Rune lastc<span class="op">;</span>   <span class="co">/* last printed char outside of sequence, 0 if control */</span></span>
<span id="cb22-131"><a href="#cb22-131" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> Term<span class="op">;</span></span>
<span id="cb22-132"><a href="#cb22-132" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-133"><a href="#cb22-133" aria-hidden="true" tabindex="-1"></a><span class="co">/* CSI Escape sequence structs */</span></span>
<span id="cb22-134"><a href="#cb22-134" aria-hidden="true" tabindex="-1"></a><span class="co">/* ESC &#39;[&#39; [[ [&lt;priv&gt;] &lt;arg&gt; [;]] &lt;mode&gt; [&lt;mode&gt;]] */</span></span>
<span id="cb22-135"><a href="#cb22-135" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb22-136"><a href="#cb22-136" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> buf<span class="op">[</span>ESC_BUF_SIZ<span class="op">];</span> <span class="co">/* raw string */</span></span>
<span id="cb22-137"><a href="#cb22-137" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> len<span class="op">;</span>            <span class="co">/* raw string length */</span></span>
<span id="cb22-138"><a href="#cb22-138" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> priv<span class="op">;</span></span>
<span id="cb22-139"><a href="#cb22-139" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> arg<span class="op">[</span>ESC_ARG_SIZ<span class="op">];</span></span>
<span id="cb22-140"><a href="#cb22-140" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> narg<span class="op">;</span>              <span class="co">/* nb of args */</span></span>
<span id="cb22-141"><a href="#cb22-141" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> mode<span class="op">[</span><span class="dv">2</span><span class="op">];</span></span>
<span id="cb22-142"><a href="#cb22-142" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> CSIEscape<span class="op">;</span></span>
<span id="cb22-143"><a href="#cb22-143" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-144"><a href="#cb22-144" aria-hidden="true" tabindex="-1"></a><span class="co">/* STR Escape sequence structs */</span></span>
<span id="cb22-145"><a href="#cb22-145" aria-hidden="true" tabindex="-1"></a><span class="co">/* ESC type [[ [&lt;priv&gt;] &lt;arg&gt; [;]] &lt;mode&gt;] ESC &#39;\&#39; */</span></span>
<span id="cb22-146"><a href="#cb22-146" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb22-147"><a href="#cb22-147" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> type<span class="op">;</span>             <span class="co">/* ESC type ... */</span></span>
<span id="cb22-148"><a href="#cb22-148" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>buf<span class="op">;</span>             <span class="co">/* allocated raw string */</span></span>
<span id="cb22-149"><a href="#cb22-149" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> siz<span class="op">;</span>            <span class="co">/* allocation size */</span></span>
<span id="cb22-150"><a href="#cb22-150" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> len<span class="op">;</span>            <span class="co">/* raw string length */</span></span>
<span id="cb22-151"><a href="#cb22-151" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>args<span class="op">[</span>STR_ARG_SIZ<span class="op">];</span></span>
<span id="cb22-152"><a href="#cb22-152" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> narg<span class="op">;</span>              <span class="co">/* nb of args */</span></span>
<span id="cb22-153"><a href="#cb22-153" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> STREscape<span class="op">;</span></span>
<span id="cb22-154"><a href="#cb22-154" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-155"><a href="#cb22-155" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> execsh<span class="op">(</span><span class="dt">char</span> <span class="op">*,</span> <span class="dt">char</span> <span class="op">**);</span></span>
<span id="cb22-156"><a href="#cb22-156" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> stty<span class="op">(</span><span class="dt">char</span> <span class="op">**);</span></span>
<span id="cb22-157"><a href="#cb22-157" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> sigchld<span class="op">(</span><span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-158"><a href="#cb22-158" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> ttywriteraw<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*,</span> <span class="dt">size_t</span><span class="op">);</span></span>
<span id="cb22-159"><a href="#cb22-159" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-160"><a href="#cb22-160" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> csidump<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-161"><a href="#cb22-161" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> csihandle<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-162"><a href="#cb22-162" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> csiparse<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-163"><a href="#cb22-163" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> csireset<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-164"><a href="#cb22-164" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> osc_color_response<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-165"><a href="#cb22-165" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> eschandle<span class="op">(</span>uchar<span class="op">);</span></span>
<span id="cb22-166"><a href="#cb22-166" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> strdump<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-167"><a href="#cb22-167" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> strhandle<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-168"><a href="#cb22-168" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> strparse<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-169"><a href="#cb22-169" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> strreset<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-170"><a href="#cb22-170" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-171"><a href="#cb22-171" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tprinter<span class="op">(</span><span class="dt">char</span> <span class="op">*,</span> <span class="dt">size_t</span><span class="op">);</span></span>
<span id="cb22-172"><a href="#cb22-172" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tdumpsel<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-173"><a href="#cb22-173" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tdumpline<span class="op">(</span><span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-174"><a href="#cb22-174" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tdump<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-175"><a href="#cb22-175" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tclearregion<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-176"><a href="#cb22-176" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tcursor<span class="op">(</span><span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-177"><a href="#cb22-177" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tdeletechar<span class="op">(</span><span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-178"><a href="#cb22-178" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tdeleteline<span class="op">(</span><span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-179"><a href="#cb22-179" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tinsertblank<span class="op">(</span><span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-180"><a href="#cb22-180" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tinsertblankline<span class="op">(</span><span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-181"><a href="#cb22-181" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> tlinelen<span class="op">(</span><span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-182"><a href="#cb22-182" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tmoveto<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-183"><a href="#cb22-183" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tmoveato<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-184"><a href="#cb22-184" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tnewline<span class="op">(</span><span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-185"><a href="#cb22-185" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tputtab<span class="op">(</span><span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-186"><a href="#cb22-186" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tputc<span class="op">(</span>Rune<span class="op">);</span></span>
<span id="cb22-187"><a href="#cb22-187" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> treset<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-188"><a href="#cb22-188" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tscrollup<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-189"><a href="#cb22-189" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tscrolldown<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-190"><a href="#cb22-190" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tsetattr<span class="op">(</span><span class="dt">const</span> <span class="dt">int</span> <span class="op">*,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-191"><a href="#cb22-191" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tsetchar<span class="op">(</span>Rune<span class="op">,</span> <span class="dt">const</span> Glyph <span class="op">*,</span> <span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-192"><a href="#cb22-192" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tsetdirt<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-193"><a href="#cb22-193" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tsetscroll<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-194"><a href="#cb22-194" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tswapscreen<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-195"><a href="#cb22-195" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tsetmode<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">,</span> <span class="dt">const</span> <span class="dt">int</span> <span class="op">*,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-196"><a href="#cb22-196" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> twrite<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*,</span> <span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-197"><a href="#cb22-197" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tfulldirt<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-198"><a href="#cb22-198" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tcontrolcode<span class="op">(</span>uchar <span class="op">);</span></span>
<span id="cb22-199"><a href="#cb22-199" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tdectest<span class="op">(</span><span class="dt">char</span> <span class="op">);</span></span>
<span id="cb22-200"><a href="#cb22-200" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tdefutf8<span class="op">(</span><span class="dt">char</span><span class="op">);</span></span>
<span id="cb22-201"><a href="#cb22-201" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int32_t</span> tdefcolor<span class="op">(</span><span class="dt">const</span> <span class="dt">int</span> <span class="op">*,</span> <span class="dt">int</span> <span class="op">*,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-202"><a href="#cb22-202" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tdeftran<span class="op">(</span><span class="dt">char</span><span class="op">);</span></span>
<span id="cb22-203"><a href="#cb22-203" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> tstrsequence<span class="op">(</span>uchar<span class="op">);</span></span>
<span id="cb22-204"><a href="#cb22-204" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-205"><a href="#cb22-205" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> drawregion<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-206"><a href="#cb22-206" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-207"><a href="#cb22-207" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> selnormalize<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb22-208"><a href="#cb22-208" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> selscroll<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-209"><a href="#cb22-209" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> selsnap<span class="op">(</span><span class="dt">int</span> <span class="op">*,</span> <span class="dt">int</span> <span class="op">*,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb22-210"><a href="#cb22-210" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-211"><a href="#cb22-211" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">size_t</span> utf8decode<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*,</span> Rune <span class="op">*,</span> <span class="dt">size_t</span><span class="op">);</span></span>
<span id="cb22-212"><a href="#cb22-212" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> Rune utf8decodebyte<span class="op">(</span><span class="dt">char</span><span class="op">,</span> <span class="dt">size_t</span> <span class="op">*);</span></span>
<span id="cb22-213"><a href="#cb22-213" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">char</span> utf8encodebyte<span class="op">(</span>Rune<span class="op">,</span> <span class="dt">size_t</span><span class="op">);</span></span>
<span id="cb22-214"><a href="#cb22-214" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">size_t</span> utf8validate<span class="op">(</span>Rune <span class="op">*,</span> <span class="dt">size_t</span><span class="op">);</span></span>
<span id="cb22-215"><a href="#cb22-215" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-216"><a href="#cb22-216" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">char</span> <span class="op">*</span>base64dec<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*);</span></span>
<span id="cb22-217"><a href="#cb22-217" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">char</span> base64dec_getc<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">**);</span></span>
<span id="cb22-218"><a href="#cb22-218" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-219"><a href="#cb22-219" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">ssize_t</span> xwrite<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*,</span> <span class="dt">size_t</span><span class="op">);</span></span>
<span id="cb22-220"><a href="#cb22-220" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-221"><a href="#cb22-221" aria-hidden="true" tabindex="-1"></a><span class="co">/* Globals */</span></span>
<span id="cb22-222"><a href="#cb22-222" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> Term term<span class="op">;</span></span>
<span id="cb22-223"><a href="#cb22-223" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> Selection sel<span class="op">;</span></span>
<span id="cb22-224"><a href="#cb22-224" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> CSIEscape csiescseq<span class="op">;</span></span>
<span id="cb22-225"><a href="#cb22-225" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> STREscape strescseq<span class="op">;</span></span>
<span id="cb22-226"><a href="#cb22-226" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> iofd <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb22-227"><a href="#cb22-227" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> cmdfd<span class="op">;</span></span>
<span id="cb22-228"><a href="#cb22-228" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> pid_t pid<span class="op">;</span></span>
<span id="cb22-229"><a href="#cb22-229" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-230"><a href="#cb22-230" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">const</span> uchar utfbyte<span class="op">[</span>UTF_SIZ <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="op">{</span><span class="bn">0x80</span><span class="op">,</span>    <span class="dv">0</span><span class="op">,</span> <span class="bn">0xC0</span><span class="op">,</span> <span class="bn">0xE0</span><span class="op">,</span> <span class="bn">0xF0</span><span class="op">};</span></span>
<span id="cb22-231"><a href="#cb22-231" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">const</span> uchar utfmask<span class="op">[</span>UTF_SIZ <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="op">{</span><span class="bn">0xC0</span><span class="op">,</span> <span class="bn">0x80</span><span class="op">,</span> <span class="bn">0xE0</span><span class="op">,</span> <span class="bn">0xF0</span><span class="op">,</span> <span class="bn">0xF8</span><span class="op">};</span></span>
<span id="cb22-232"><a href="#cb22-232" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">const</span> Rune utfmin<span class="op">[</span>UTF_SIZ <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="op">{</span>       <span class="dv">0</span><span class="op">,</span>    <span class="dv">0</span><span class="op">,</span>  <span class="bn">0x80</span><span class="op">,</span>  <span class="bn">0x800</span><span class="op">,</span>  <span class="bn">0x10000</span><span class="op">};</span></span>
<span id="cb22-233"><a href="#cb22-233" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">const</span> Rune utfmax<span class="op">[</span>UTF_SIZ <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="op">{</span><span class="bn">0x10FFFF</span><span class="op">,</span> <span class="bn">0x7F</span><span class="op">,</span> <span class="bn">0x7FF</span><span class="op">,</span> <span class="bn">0xFFFF</span><span class="op">,</span> <span class="bn">0x10FFFF</span><span class="op">};</span></span>
<span id="cb22-234"><a href="#cb22-234" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>xwrite</code></p>
<p><code>write</code> 関数のラッパーみたいなもの。 <code>write</code> は <code>len</code> で与えた文字数を書き込むわけですが、 必ず全てが書き込まれるわけではありません。 <code>man 2 write</code> によると、</p>
<ul>
<li>ファイルシステムに十分な空き容量が無い時</li>
<li><code>RLIMIT_FSIZE</code> の制限にかかった時</li>
<li>途中でシグナルハンドラに割り込みされた時</li>
</ul>
<p>に、一部のみの書き込みで終わってしまうことがあるようです。</p>
<p>そこで、この関数では全てが書き込まれることを保証するために書き込まれた文字数(<code>r</code>)と 書き込みたい文字数の長さ(<code>len</code>)を比べ、全てが書き込まれるまで <code>write</code> を続けるようです。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb23"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="dt">ssize_t</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>xwrite<span class="op">(</span><span class="dt">int</span> fd<span class="op">,</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>s<span class="op">,</span> <span class="dt">size_t</span> len<span class="op">)</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> aux <span class="op">=</span> len<span class="op">;</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">ssize_t</span> r<span class="op">;</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(</span>len <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>                r <span class="op">=</span> write<span class="op">(</span>fd<span class="op">,</span> s<span class="op">,</span> len<span class="op">);</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>r <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span> r<span class="op">;</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a>                len <span class="op">-=</span> r<span class="op">;</span></span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a>                s <span class="op">+=</span> r<span class="op">;</span></span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> aux<span class="op">;</span></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>xmalloc</code></p>
<p>mallocに失敗したらログを残してアプリケーションを終了させます。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb24"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="op">*</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>xmalloc<span class="op">(</span><span class="dt">size_t</span> len<span class="op">)</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> <span class="op">*</span>p<span class="op">;</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!(</span>p <span class="op">=</span> malloc<span class="op">(</span>len<span class="op">)))</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>                die<span class="op">(</span><span class="st">&quot;malloc: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> p<span class="op">;</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>xrealloc</code></p>
<p>reallocに失敗したらログを残してアプリケーションを終了する</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb25"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="op">*</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>xrealloc<span class="op">(</span><span class="dt">void</span> <span class="op">*</span>p<span class="op">,</span> <span class="dt">size_t</span> len<span class="op">)</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">((</span>p <span class="op">=</span> realloc<span class="op">(</span>p<span class="op">,</span> len<span class="op">))</span> <span class="op">==</span> NULL<span class="op">)</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>                die<span class="op">(</span><span class="st">&quot;realloc: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> p<span class="op">;</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>xstrdup</code></p>
<p>xstrdupに失敗したらログを残してアプリケーションを終了する</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb26"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> <span class="op">*</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>xstrdup<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>s<span class="op">)</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>p<span class="op">;</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">((</span>p <span class="op">=</span> strdup<span class="op">(</span>s<span class="op">))</span> <span class="op">==</span> NULL<span class="op">)</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>                die<span class="op">(</span><span class="st">&quot;strdup: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> p<span class="op">;</span></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>utf8decode</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb27"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="dt">size_t</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>utf8decode<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>c<span class="op">,</span> Rune <span class="op">*</span>u<span class="op">,</span> <span class="dt">size_t</span> clen<span class="op">)</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> i<span class="op">,</span> j<span class="op">,</span> len<span class="op">,</span> type<span class="op">;</span></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>        Rune udecoded<span class="op">;</span></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>u <span class="op">=</span> UTF_INVALID<span class="op">;</span></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>clen<span class="op">)</span></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a>        udecoded <span class="op">=</span> utf8decodebyte<span class="op">(</span>c<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="op">&amp;</span>len<span class="op">);</span></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>BETWEEN<span class="op">(</span>len<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> UTF_SIZ<span class="op">))</span></span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">1</span><span class="op">,</span> j <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;</span> clen <span class="op">&amp;&amp;</span> j <span class="op">&lt;</span> len<span class="op">;</span> <span class="op">++</span>i<span class="op">,</span> <span class="op">++</span>j<span class="op">)</span> <span class="op">{</span></span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a>                udecoded <span class="op">=</span> <span class="op">(</span>udecoded <span class="op">&lt;&lt;</span> <span class="dv">6</span><span class="op">)</span> <span class="op">|</span> utf8decodebyte<span class="op">(</span>c<span class="op">[</span>i<span class="op">],</span> <span class="op">&amp;</span>type<span class="op">);</span></span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>type <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb27-16"><a href="#cb27-16" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span> j<span class="op">;</span></span>
<span id="cb27-17"><a href="#cb27-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb27-18"><a href="#cb27-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>j <span class="op">&lt;</span> len<span class="op">)</span></span>
<span id="cb27-19"><a href="#cb27-19" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb27-20"><a href="#cb27-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>u <span class="op">=</span> udecoded<span class="op">;</span></span>
<span id="cb27-21"><a href="#cb27-21" aria-hidden="true" tabindex="-1"></a>        utf8validate<span class="op">(</span>u<span class="op">,</span> len<span class="op">);</span></span>
<span id="cb27-22"><a href="#cb27-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-23"><a href="#cb27-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> len<span class="op">;</span></span>
<span id="cb27-24"><a href="#cb27-24" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb27-25"><a href="#cb27-25" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>utf8decodebyte</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb28"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a>Rune</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>utf8decodebyte<span class="op">(</span><span class="dt">char</span> c<span class="op">,</span> <span class="dt">size_t</span> <span class="op">*</span>i<span class="op">)</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(*</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> <span class="op">*</span>i <span class="op">&lt;</span> LEN<span class="op">(</span>utfmask<span class="op">);</span> <span class="op">++(*</span>i<span class="op">))</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(((</span>uchar<span class="op">)</span>c <span class="op">&amp;</span> utfmask<span class="op">[*</span>i<span class="op">])</span> <span class="op">==</span> utfbyte<span class="op">[*</span>i<span class="op">])</span></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span> <span class="op">(</span>uchar<span class="op">)</span>c <span class="op">&amp;</span> <span class="op">~</span>utfmask<span class="op">[*</span>i<span class="op">];</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>utf8encode</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb29"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="dt">size_t</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>utf8encode<span class="op">(</span>Rune u<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>c<span class="op">)</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> len<span class="op">,</span> i<span class="op">;</span></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>        len <span class="op">=</span> utf8validate<span class="op">(&amp;</span>u<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>len <span class="op">&gt;</span> UTF_SIZ<span class="op">)</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> len <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">!=</span> <span class="dv">0</span><span class="op">;</span> <span class="op">--</span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true" tabindex="-1"></a>                c<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> utf8encodebyte<span class="op">(</span>u<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true" tabindex="-1"></a>                u <span class="op">&gt;&gt;=</span> <span class="dv">6</span><span class="op">;</span></span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb29-14"><a href="#cb29-14" aria-hidden="true" tabindex="-1"></a>        c<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> utf8encodebyte<span class="op">(</span>u<span class="op">,</span> len<span class="op">);</span></span>
<span id="cb29-15"><a href="#cb29-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-16"><a href="#cb29-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> len<span class="op">;</span></span>
<span id="cb29-17"><a href="#cb29-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb29-18"><a href="#cb29-18" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>utf8encodebyte</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb30"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>utf8encodebyte<span class="op">(</span>Rune u<span class="op">,</span> <span class="dt">size_t</span> i<span class="op">)</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> utfbyte<span class="op">[</span>i<span class="op">]</span> <span class="op">|</span> <span class="op">(</span>u <span class="op">&amp;</span> <span class="op">~</span>utfmask<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>utf8validate</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb31"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="dt">size_t</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>utf8validate<span class="op">(</span>Rune <span class="op">*</span>u<span class="op">,</span> <span class="dt">size_t</span> i<span class="op">)</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>BETWEEN<span class="op">(*</span>u<span class="op">,</span> utfmin<span class="op">[</span>i<span class="op">],</span> utfmax<span class="op">[</span>i<span class="op">])</span> <span class="op">||</span> BETWEEN<span class="op">(*</span>u<span class="op">,</span> <span class="bn">0xD800</span><span class="op">,</span> <span class="bn">0xDFFF</span><span class="op">))</span></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a>                <span class="op">*</span>u <span class="op">=</span> UTF_INVALID<span class="op">;</span></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> <span class="op">*</span>u <span class="op">&gt;</span> utfmax<span class="op">[</span>i<span class="op">];</span> <span class="op">++</span>i<span class="op">)</span></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a>                <span class="op">;</span></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> i<span class="op">;</span></span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>base64dec_getc</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb32"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>base64dec_getc<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">**</span>src<span class="op">)</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(**</span>src <span class="op">&amp;&amp;</span> <span class="op">!</span>isprint<span class="op">((</span><span class="dt">unsigned</span> <span class="dt">char</span><span class="op">)**</span>src<span class="op">))</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a>                <span class="op">(*</span>src<span class="op">)++;</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="op">**</span>src <span class="op">?</span> <span class="op">*((*</span>src<span class="op">)++)</span> <span class="op">:</span> <span class="ch">&#39;=&#39;</span><span class="op">;</span>  <span class="co">/* emulate padding if string ends */</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>base64dec</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb33"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> <span class="op">*</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>base64dec<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>src<span class="op">)</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> in_len <span class="op">=</span> strlen<span class="op">(</span>src<span class="op">);</span></span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>result<span class="op">,</span> <span class="op">*</span>dst<span class="op">;</span></span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">static</span> <span class="dt">const</span> <span class="dt">char</span> base64_digits<span class="op">[</span><span class="dv">256</span><span class="op">]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb33-7"><a href="#cb33-7" aria-hidden="true" tabindex="-1"></a>                <span class="op">[</span><span class="dv">43</span><span class="op">]</span> <span class="op">=</span> <span class="dv">62</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">63</span><span class="op">,</span> <span class="dv">52</span><span class="op">,</span> <span class="dv">53</span><span class="op">,</span> <span class="dv">54</span><span class="op">,</span> <span class="dv">55</span><span class="op">,</span> <span class="dv">56</span><span class="op">,</span> <span class="dv">57</span><span class="op">,</span> <span class="dv">58</span><span class="op">,</span> <span class="dv">59</span><span class="op">,</span> <span class="dv">60</span><span class="op">,</span> <span class="dv">61</span><span class="op">,</span></span>
<span id="cb33-8"><a href="#cb33-8" aria-hidden="true" tabindex="-1"></a>                <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span><span class="op">,</span> <span class="dv">6</span><span class="op">,</span> <span class="dv">7</span><span class="op">,</span> <span class="dv">8</span><span class="op">,</span> <span class="dv">9</span><span class="op">,</span> <span class="dv">10</span><span class="op">,</span> <span class="dv">11</span><span class="op">,</span> <span class="dv">12</span><span class="op">,</span></span>
<span id="cb33-9"><a href="#cb33-9" aria-hidden="true" tabindex="-1"></a>                <span class="dv">13</span><span class="op">,</span> <span class="dv">14</span><span class="op">,</span> <span class="dv">15</span><span class="op">,</span> <span class="dv">16</span><span class="op">,</span> <span class="dv">17</span><span class="op">,</span> <span class="dv">18</span><span class="op">,</span> <span class="dv">19</span><span class="op">,</span> <span class="dv">20</span><span class="op">,</span> <span class="dv">21</span><span class="op">,</span> <span class="dv">22</span><span class="op">,</span> <span class="dv">23</span><span class="op">,</span> <span class="dv">24</span><span class="op">,</span> <span class="dv">25</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb33-10"><a href="#cb33-10" aria-hidden="true" tabindex="-1"></a>                <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">26</span><span class="op">,</span> <span class="dv">27</span><span class="op">,</span> <span class="dv">28</span><span class="op">,</span> <span class="dv">29</span><span class="op">,</span> <span class="dv">30</span><span class="op">,</span> <span class="dv">31</span><span class="op">,</span> <span class="dv">32</span><span class="op">,</span> <span class="dv">33</span><span class="op">,</span> <span class="dv">34</span><span class="op">,</span> <span class="dv">35</span><span class="op">,</span> <span class="dv">36</span><span class="op">,</span> <span class="dv">37</span><span class="op">,</span> <span class="dv">38</span><span class="op">,</span> <span class="dv">39</span><span class="op">,</span></span>
<span id="cb33-11"><a href="#cb33-11" aria-hidden="true" tabindex="-1"></a>                <span class="dv">40</span><span class="op">,</span> <span class="dv">41</span><span class="op">,</span> <span class="dv">42</span><span class="op">,</span> <span class="dv">43</span><span class="op">,</span> <span class="dv">44</span><span class="op">,</span> <span class="dv">45</span><span class="op">,</span> <span class="dv">46</span><span class="op">,</span> <span class="dv">47</span><span class="op">,</span> <span class="dv">48</span><span class="op">,</span> <span class="dv">49</span><span class="op">,</span> <span class="dv">50</span><span class="op">,</span> <span class="dv">51</span></span>
<span id="cb33-12"><a href="#cb33-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb33-13"><a href="#cb33-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-14"><a href="#cb33-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>in_len <span class="op">%</span> <span class="dv">4</span><span class="op">)</span></span>
<span id="cb33-15"><a href="#cb33-15" aria-hidden="true" tabindex="-1"></a>                in_len <span class="op">+=</span> <span class="dv">4</span> <span class="op">-</span> <span class="op">(</span>in_len <span class="op">%</span> <span class="dv">4</span><span class="op">);</span></span>
<span id="cb33-16"><a href="#cb33-16" aria-hidden="true" tabindex="-1"></a>        result <span class="op">=</span> dst <span class="op">=</span> xmalloc<span class="op">(</span>in_len <span class="op">/</span> <span class="dv">4</span> <span class="op">*</span> <span class="dv">3</span> <span class="op">+</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb33-17"><a href="#cb33-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(*</span>src<span class="op">)</span> <span class="op">{</span></span>
<span id="cb33-18"><a href="#cb33-18" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> a <span class="op">=</span> base64_digits<span class="op">[(</span><span class="dt">unsigned</span> <span class="dt">char</span><span class="op">)</span> base64dec_getc<span class="op">(&amp;</span>src<span class="op">)];</span></span>
<span id="cb33-19"><a href="#cb33-19" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> b <span class="op">=</span> base64_digits<span class="op">[(</span><span class="dt">unsigned</span> <span class="dt">char</span><span class="op">)</span> base64dec_getc<span class="op">(&amp;</span>src<span class="op">)];</span></span>
<span id="cb33-20"><a href="#cb33-20" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> c <span class="op">=</span> base64_digits<span class="op">[(</span><span class="dt">unsigned</span> <span class="dt">char</span><span class="op">)</span> base64dec_getc<span class="op">(&amp;</span>src<span class="op">)];</span></span>
<span id="cb33-21"><a href="#cb33-21" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> d <span class="op">=</span> base64_digits<span class="op">[(</span><span class="dt">unsigned</span> <span class="dt">char</span><span class="op">)</span> base64dec_getc<span class="op">(&amp;</span>src<span class="op">)];</span></span>
<span id="cb33-22"><a href="#cb33-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-23"><a href="#cb33-23" aria-hidden="true" tabindex="-1"></a>                <span class="co">/* invalid input. &#39;a&#39; can be -1, e.g. if src is &quot;\n&quot; (c-str) */</span></span>
<span id="cb33-24"><a href="#cb33-24" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>a <span class="op">==</span> <span class="op">-</span><span class="dv">1</span> <span class="op">||</span> b <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb33-25"><a href="#cb33-25" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb33-26"><a href="#cb33-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-27"><a href="#cb33-27" aria-hidden="true" tabindex="-1"></a>                <span class="op">*</span>dst<span class="op">++</span> <span class="op">=</span> <span class="op">(</span>a <span class="op">&lt;&lt;</span> <span class="dv">2</span><span class="op">)</span> <span class="op">|</span> <span class="op">((</span>b <span class="op">&amp;</span> <span class="bn">0x30</span><span class="op">)</span> <span class="op">&gt;&gt;</span> <span class="dv">4</span><span class="op">);</span></span>
<span id="cb33-28"><a href="#cb33-28" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>c <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb33-29"><a href="#cb33-29" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb33-30"><a href="#cb33-30" aria-hidden="true" tabindex="-1"></a>                <span class="op">*</span>dst<span class="op">++</span> <span class="op">=</span> <span class="op">((</span>b <span class="op">&amp;</span> <span class="bn">0x0f</span><span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="dv">4</span><span class="op">)</span> <span class="op">|</span> <span class="op">((</span>c <span class="op">&amp;</span> <span class="bn">0x3c</span><span class="op">)</span> <span class="op">&gt;&gt;</span> <span class="dv">2</span><span class="op">);</span></span>
<span id="cb33-31"><a href="#cb33-31" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>d <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb33-32"><a href="#cb33-32" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb33-33"><a href="#cb33-33" aria-hidden="true" tabindex="-1"></a>                <span class="op">*</span>dst<span class="op">++</span> <span class="op">=</span> <span class="op">((</span>c <span class="op">&amp;</span> <span class="bn">0x03</span><span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="dv">6</span><span class="op">)</span> <span class="op">|</span> d<span class="op">;</span></span>
<span id="cb33-34"><a href="#cb33-34" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb33-35"><a href="#cb33-35" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>dst <span class="op">=</span> <span class="ch">&#39;\0&#39;</span><span class="op">;</span></span>
<span id="cb33-36"><a href="#cb33-36" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> result<span class="op">;</span></span>
<span id="cb33-37"><a href="#cb33-37" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb33-38"><a href="#cb33-38" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>selinit</code></p>
<p>`Selection' 型変数の `sel' 変数を初期化する？</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb34"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a>selinit<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>mode <span class="op">=</span> SEL_IDLE<span class="op">;</span></span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>snap <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>ob<span class="op">.</span>x <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tlinelen</code></p>
<p>与えられた <code>y</code> 行目にある文字数を返す。</p>
<p>iは横幅。最後の文字から順々に見ていき、空白でない文字の indexを返す。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb35"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a>tlinelen<span class="op">(</span><span class="dt">int</span> y<span class="op">)</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i <span class="op">=</span> term<span class="op">.</span>col<span class="op">;</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>i <span class="op">-</span> <span class="dv">1</span><span class="op">].</span>mode <span class="op">&amp;</span> ATTR_WRAP<span class="op">)</span></span>
<span id="cb35-7"><a href="#cb35-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> i<span class="op">;</span></span>
<span id="cb35-8"><a href="#cb35-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-9"><a href="#cb35-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(</span>i <span class="op">&gt;</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>i <span class="op">-</span> <span class="dv">1</span><span class="op">].</span>u <span class="op">==</span> <span class="ch">&#39; &#39;</span><span class="op">)</span></span>
<span id="cb35-10"><a href="#cb35-10" aria-hidden="true" tabindex="-1"></a>                <span class="op">--</span>i<span class="op">;</span></span>
<span id="cb35-11"><a href="#cb35-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-12"><a href="#cb35-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> i<span class="op">;</span></span>
<span id="cb35-13"><a href="#cb35-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div>
<p>つまり、左上の文字を <code>term.line[0][0]</code> と仮定すると、以下の内容のとき:</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb36" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> echo <span class="st">&quot;This is test&quot;</span> <span class="co"># line 0?</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="ex">This</span> is test</span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cat /tmp/foo</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Foo</span> text!</span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> </span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb37"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a>tlinelen<span class="op">(</span><span class="dv">0</span><span class="op">)</span> <span class="co">// -&gt; 31</span></span></code></pre></div>
</div>
<p>ってなる。と思う。</p></li>
<li><p><code>selstart</code></p>
<p>指定した位置にセレクションを初期化する</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb38"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a>selstart<span class="op">(</span><span class="dt">int</span> col<span class="op">,</span> <span class="dt">int</span> row<span class="op">,</span> <span class="dt">int</span> snap<span class="op">)</span></span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a>        selclear<span class="op">();</span></span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>mode <span class="op">=</span> SEL_EMPTY<span class="op">;</span></span>
<span id="cb38-6"><a href="#cb38-6" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>type <span class="op">=</span> SEL_REGULAR<span class="op">;</span></span>
<span id="cb38-7"><a href="#cb38-7" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>alt <span class="op">=</span> IS_SET<span class="op">(</span>MODE_ALTSCREEN<span class="op">);</span></span>
<span id="cb38-8"><a href="#cb38-8" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>snap <span class="op">=</span> snap<span class="op">;</span></span>
<span id="cb38-9"><a href="#cb38-9" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>oe<span class="op">.</span>x <span class="op">=</span> sel<span class="op">.</span>ob<span class="op">.</span>x <span class="op">=</span> col<span class="op">;</span></span>
<span id="cb38-10"><a href="#cb38-10" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>oe<span class="op">.</span>y <span class="op">=</span> sel<span class="op">.</span>ob<span class="op">.</span>y <span class="op">=</span> row<span class="op">;</span></span>
<span id="cb38-11"><a href="#cb38-11" aria-hidden="true" tabindex="-1"></a>        selnormalize<span class="op">();</span></span>
<span id="cb38-12"><a href="#cb38-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-13"><a href="#cb38-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>snap <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb38-14"><a href="#cb38-14" aria-hidden="true" tabindex="-1"></a>                sel<span class="op">.</span>mode <span class="op">=</span> SEL_READY<span class="op">;</span></span>
<span id="cb38-15"><a href="#cb38-15" aria-hidden="true" tabindex="-1"></a>        tsetdirt<span class="op">(</span>sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">,</span> sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb38-16"><a href="#cb38-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb38-17"><a href="#cb38-17" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>selextend</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb39"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a>selextend<span class="op">(</span><span class="dt">int</span> col<span class="op">,</span> <span class="dt">int</span> row<span class="op">,</span> <span class="dt">int</span> type<span class="op">,</span> <span class="dt">int</span> done<span class="op">)</span></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> oldey<span class="op">,</span> oldex<span class="op">,</span> oldsby<span class="op">,</span> oldsey<span class="op">,</span> oldtype<span class="op">;</span></span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>mode <span class="op">==</span> SEL_IDLE<span class="op">)</span></span>
<span id="cb39-7"><a href="#cb39-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb39-8"><a href="#cb39-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>done <span class="op">&amp;&amp;</span> sel<span class="op">.</span>mode <span class="op">==</span> SEL_EMPTY<span class="op">)</span> <span class="op">{</span></span>
<span id="cb39-9"><a href="#cb39-9" aria-hidden="true" tabindex="-1"></a>                selclear<span class="op">();</span></span>
<span id="cb39-10"><a href="#cb39-10" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb39-11"><a href="#cb39-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb39-12"><a href="#cb39-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-13"><a href="#cb39-13" aria-hidden="true" tabindex="-1"></a>        oldey <span class="op">=</span> sel<span class="op">.</span>oe<span class="op">.</span>y<span class="op">;</span></span>
<span id="cb39-14"><a href="#cb39-14" aria-hidden="true" tabindex="-1"></a>        oldex <span class="op">=</span> sel<span class="op">.</span>oe<span class="op">.</span>x<span class="op">;</span></span>
<span id="cb39-15"><a href="#cb39-15" aria-hidden="true" tabindex="-1"></a>        oldsby <span class="op">=</span> sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">;</span></span>
<span id="cb39-16"><a href="#cb39-16" aria-hidden="true" tabindex="-1"></a>        oldsey <span class="op">=</span> sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">;</span></span>
<span id="cb39-17"><a href="#cb39-17" aria-hidden="true" tabindex="-1"></a>        oldtype <span class="op">=</span> sel<span class="op">.</span>type<span class="op">;</span></span>
<span id="cb39-18"><a href="#cb39-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-19"><a href="#cb39-19" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>oe<span class="op">.</span>x <span class="op">=</span> col<span class="op">;</span></span>
<span id="cb39-20"><a href="#cb39-20" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>oe<span class="op">.</span>y <span class="op">=</span> row<span class="op">;</span></span>
<span id="cb39-21"><a href="#cb39-21" aria-hidden="true" tabindex="-1"></a>        selnormalize<span class="op">();</span></span>
<span id="cb39-22"><a href="#cb39-22" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>type <span class="op">=</span> type<span class="op">;</span></span>
<span id="cb39-23"><a href="#cb39-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-24"><a href="#cb39-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>oldey <span class="op">!=</span> sel<span class="op">.</span>oe<span class="op">.</span>y <span class="op">||</span> oldex <span class="op">!=</span> sel<span class="op">.</span>oe<span class="op">.</span>x <span class="op">||</span> oldtype <span class="op">!=</span> sel<span class="op">.</span>type <span class="op">||</span> sel<span class="op">.</span>mode <span class="op">==</span> SEL_EMPTY<span class="op">)</span></span>
<span id="cb39-25"><a href="#cb39-25" aria-hidden="true" tabindex="-1"></a>                tsetdirt<span class="op">(</span>MIN<span class="op">(</span>sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">,</span> oldsby<span class="op">),</span> MAX<span class="op">(</span>sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">,</span> oldsey<span class="op">));</span></span>
<span id="cb39-26"><a href="#cb39-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-27"><a href="#cb39-27" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>mode <span class="op">=</span> done <span class="op">?</span> SEL_IDLE <span class="op">:</span> SEL_READY<span class="op">;</span></span>
<span id="cb39-28"><a href="#cb39-28" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb39-29"><a href="#cb39-29" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>selnormalize</code></p>
<p>選択範囲の正規化を行う。正規化(normalize)と言ってはいるが、0~1の正規化ではなく 「始点」の座標が「終点」よりも前にくるようにする。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb40"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a>selnormalize<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i<span class="op">;</span></span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>type <span class="op">==</span> SEL_REGULAR <span class="op">&amp;&amp;</span> sel<span class="op">.</span>ob<span class="op">.</span>y <span class="op">!=</span> sel<span class="op">.</span>oe<span class="op">.</span>y<span class="op">)</span> <span class="op">{</span></span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true" tabindex="-1"></a>                sel<span class="op">.</span>nb<span class="op">.</span>x <span class="op">=</span> sel<span class="op">.</span>ob<span class="op">.</span>y <span class="op">&lt;</span> sel<span class="op">.</span>oe<span class="op">.</span>y <span class="op">?</span> sel<span class="op">.</span>ob<span class="op">.</span>x <span class="op">:</span> sel<span class="op">.</span>oe<span class="op">.</span>x<span class="op">;</span></span>
<span id="cb40-8"><a href="#cb40-8" aria-hidden="true" tabindex="-1"></a>                sel<span class="op">.</span>ne<span class="op">.</span>x <span class="op">=</span> sel<span class="op">.</span>ob<span class="op">.</span>y <span class="op">&lt;</span> sel<span class="op">.</span>oe<span class="op">.</span>y <span class="op">?</span> sel<span class="op">.</span>oe<span class="op">.</span>x <span class="op">:</span> sel<span class="op">.</span>ob<span class="op">.</span>x<span class="op">;</span></span>
<span id="cb40-9"><a href="#cb40-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb40-10"><a href="#cb40-10" aria-hidden="true" tabindex="-1"></a>                sel<span class="op">.</span>nb<span class="op">.</span>x <span class="op">=</span> MIN<span class="op">(</span>sel<span class="op">.</span>ob<span class="op">.</span>x<span class="op">,</span> sel<span class="op">.</span>oe<span class="op">.</span>x<span class="op">);</span></span>
<span id="cb40-11"><a href="#cb40-11" aria-hidden="true" tabindex="-1"></a>                sel<span class="op">.</span>ne<span class="op">.</span>x <span class="op">=</span> MAX<span class="op">(</span>sel<span class="op">.</span>ob<span class="op">.</span>x<span class="op">,</span> sel<span class="op">.</span>oe<span class="op">.</span>x<span class="op">);</span></span>
<span id="cb40-12"><a href="#cb40-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb40-13"><a href="#cb40-13" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>nb<span class="op">.</span>y <span class="op">=</span> MIN<span class="op">(</span>sel<span class="op">.</span>ob<span class="op">.</span>y<span class="op">,</span> sel<span class="op">.</span>oe<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb40-14"><a href="#cb40-14" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>ne<span class="op">.</span>y <span class="op">=</span> MAX<span class="op">(</span>sel<span class="op">.</span>ob<span class="op">.</span>y<span class="op">,</span> sel<span class="op">.</span>oe<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb40-15"><a href="#cb40-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-16"><a href="#cb40-16" aria-hidden="true" tabindex="-1"></a>        selsnap<span class="op">(&amp;</span>sel<span class="op">.</span>nb<span class="op">.</span>x<span class="op">,</span> <span class="op">&amp;</span>sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb40-17"><a href="#cb40-17" aria-hidden="true" tabindex="-1"></a>        selsnap<span class="op">(&amp;</span>sel<span class="op">.</span>ne<span class="op">.</span>x<span class="op">,</span> <span class="op">&amp;</span>sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">,</span> <span class="op">+</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb40-18"><a href="#cb40-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-19"><a href="#cb40-19" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* expand selection over line breaks */</span></span>
<span id="cb40-20"><a href="#cb40-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>type <span class="op">==</span> SEL_RECTANGULAR<span class="op">)</span></span>
<span id="cb40-21"><a href="#cb40-21" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb40-22"><a href="#cb40-22" aria-hidden="true" tabindex="-1"></a>        i <span class="op">=</span> tlinelen<span class="op">(</span>sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb40-23"><a href="#cb40-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>i <span class="op">&lt;</span> sel<span class="op">.</span>nb<span class="op">.</span>x<span class="op">)</span></span>
<span id="cb40-24"><a href="#cb40-24" aria-hidden="true" tabindex="-1"></a>                sel<span class="op">.</span>nb<span class="op">.</span>x <span class="op">=</span> i<span class="op">;</span></span>
<span id="cb40-25"><a href="#cb40-25" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>tlinelen<span class="op">(</span>sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">)</span> <span class="op">&lt;=</span> sel<span class="op">.</span>ne<span class="op">.</span>x<span class="op">)</span></span>
<span id="cb40-26"><a href="#cb40-26" aria-hidden="true" tabindex="-1"></a>                sel<span class="op">.</span>ne<span class="op">.</span>x <span class="op">=</span> term<span class="op">.</span>col <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb40-27"><a href="#cb40-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb40-28"><a href="#cb40-28" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>selected</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb41"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a>selected<span class="op">(</span><span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">)</span></span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>mode <span class="op">==</span> SEL_EMPTY <span class="op">||</span> sel<span class="op">.</span>ob<span class="op">.</span>x <span class="op">==</span> <span class="op">-</span><span class="dv">1</span> <span class="op">||</span></span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a>                        sel<span class="op">.</span>alt <span class="op">!=</span> IS_SET<span class="op">(</span>MODE_ALTSCREEN<span class="op">))</span></span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>type <span class="op">==</span> SEL_RECTANGULAR<span class="op">)</span></span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> BETWEEN<span class="op">(</span>y<span class="op">,</span> sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">,</span> sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">)</span></span>
<span id="cb41-10"><a href="#cb41-10" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&amp;&amp;</span> BETWEEN<span class="op">(</span>x<span class="op">,</span> sel<span class="op">.</span>nb<span class="op">.</span>x<span class="op">,</span> sel<span class="op">.</span>ne<span class="op">.</span>x<span class="op">);</span></span>
<span id="cb41-11"><a href="#cb41-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-12"><a href="#cb41-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> BETWEEN<span class="op">(</span>y<span class="op">,</span> sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">,</span> sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">)</span></span>
<span id="cb41-13"><a href="#cb41-13" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;&amp;</span> <span class="op">(</span>y <span class="op">!=</span> sel<span class="op">.</span>nb<span class="op">.</span>y <span class="op">||</span> x <span class="op">&gt;=</span> sel<span class="op">.</span>nb<span class="op">.</span>x<span class="op">)</span></span>
<span id="cb41-14"><a href="#cb41-14" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;&amp;</span> <span class="op">(</span>y <span class="op">!=</span> sel<span class="op">.</span>ne<span class="op">.</span>y <span class="op">||</span> x <span class="op">&lt;=</span> sel<span class="op">.</span>ne<span class="op">.</span>x<span class="op">);</span></span>
<span id="cb41-15"><a href="#cb41-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb41-16"><a href="#cb41-16" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>selsnap</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb42"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a>selsnap<span class="op">(</span><span class="dt">int</span> <span class="op">*</span>x<span class="op">,</span> <span class="dt">int</span> <span class="op">*</span>y<span class="op">,</span> <span class="dt">int</span> direction<span class="op">)</span></span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> newx<span class="op">,</span> newy<span class="op">,</span> xt<span class="op">,</span> yt<span class="op">;</span></span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> delim<span class="op">,</span> prevdelim<span class="op">;</span></span>
<span id="cb42-6"><a href="#cb42-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">const</span> Glyph <span class="op">*</span>gp<span class="op">,</span> <span class="op">*</span>prevgp<span class="op">;</span></span>
<span id="cb42-7"><a href="#cb42-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb42-8"><a href="#cb42-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>sel<span class="op">.</span>snap<span class="op">)</span> <span class="op">{</span></span>
<span id="cb42-9"><a href="#cb42-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> SNAP_WORD<span class="op">:</span></span>
<span id="cb42-10"><a href="#cb42-10" aria-hidden="true" tabindex="-1"></a>                <span class="co">/*</span></span>
<span id="cb42-11"><a href="#cb42-11" aria-hidden="true" tabindex="-1"></a><span class="co">                 * Snap around if the word wraps around at the end or</span></span>
<span id="cb42-12"><a href="#cb42-12" aria-hidden="true" tabindex="-1"></a><span class="co">                 * beginning of a line.</span></span>
<span id="cb42-13"><a href="#cb42-13" aria-hidden="true" tabindex="-1"></a><span class="co">                 */</span></span>
<span id="cb42-14"><a href="#cb42-14" aria-hidden="true" tabindex="-1"></a>                prevgp <span class="op">=</span> <span class="op">&amp;</span>term<span class="op">.</span>line<span class="op">[*</span>y<span class="op">][*</span>x<span class="op">];</span></span>
<span id="cb42-15"><a href="#cb42-15" aria-hidden="true" tabindex="-1"></a>                prevdelim <span class="op">=</span> ISDELIM<span class="op">(</span>prevgp<span class="op">-&gt;</span>u<span class="op">);</span></span>
<span id="cb42-16"><a href="#cb42-16" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(;;)</span> <span class="op">{</span></span>
<span id="cb42-17"><a href="#cb42-17" aria-hidden="true" tabindex="-1"></a>                        newx <span class="op">=</span> <span class="op">*</span>x <span class="op">+</span> direction<span class="op">;</span></span>
<span id="cb42-18"><a href="#cb42-18" aria-hidden="true" tabindex="-1"></a>                        newy <span class="op">=</span> <span class="op">*</span>y<span class="op">;</span></span>
<span id="cb42-19"><a href="#cb42-19" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(!</span>BETWEEN<span class="op">(</span>newx<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col <span class="op">-</span> <span class="dv">1</span><span class="op">))</span> <span class="op">{</span></span>
<span id="cb42-20"><a href="#cb42-20" aria-hidden="true" tabindex="-1"></a>                                newy <span class="op">+=</span> direction<span class="op">;</span></span>
<span id="cb42-21"><a href="#cb42-21" aria-hidden="true" tabindex="-1"></a>                                newx <span class="op">=</span> <span class="op">(</span>newx <span class="op">+</span> term<span class="op">.</span>col<span class="op">)</span> <span class="op">%</span> term<span class="op">.</span>col<span class="op">;</span></span>
<span id="cb42-22"><a href="#cb42-22" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(!</span>BETWEEN<span class="op">(</span>newy<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>row <span class="op">-</span> <span class="dv">1</span><span class="op">))</span></span>
<span id="cb42-23"><a href="#cb42-23" aria-hidden="true" tabindex="-1"></a>                                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb42-24"><a href="#cb42-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb42-25"><a href="#cb42-25" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(</span>direction <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb42-26"><a href="#cb42-26" aria-hidden="true" tabindex="-1"></a>                                        yt <span class="op">=</span> <span class="op">*</span>y<span class="op">,</span> xt <span class="op">=</span> <span class="op">*</span>x<span class="op">;</span></span>
<span id="cb42-27"><a href="#cb42-27" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">else</span></span>
<span id="cb42-28"><a href="#cb42-28" aria-hidden="true" tabindex="-1"></a>                                        yt <span class="op">=</span> newy<span class="op">,</span> xt <span class="op">=</span> newx<span class="op">;</span></span>
<span id="cb42-29"><a href="#cb42-29" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(!(</span>term<span class="op">.</span>line<span class="op">[</span>yt<span class="op">][</span>xt<span class="op">].</span>mode <span class="op">&amp;</span> ATTR_WRAP<span class="op">))</span></span>
<span id="cb42-30"><a href="#cb42-30" aria-hidden="true" tabindex="-1"></a>                                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb42-31"><a href="#cb42-31" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb42-32"><a href="#cb42-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb42-33"><a href="#cb42-33" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>newx <span class="op">&gt;=</span> tlinelen<span class="op">(</span>newy<span class="op">))</span></span>
<span id="cb42-34"><a href="#cb42-34" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb42-35"><a href="#cb42-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb42-36"><a href="#cb42-36" aria-hidden="true" tabindex="-1"></a>                        gp <span class="op">=</span> <span class="op">&amp;</span>term<span class="op">.</span>line<span class="op">[</span>newy<span class="op">][</span>newx<span class="op">];</span></span>
<span id="cb42-37"><a href="#cb42-37" aria-hidden="true" tabindex="-1"></a>                        delim <span class="op">=</span> ISDELIM<span class="op">(</span>gp<span class="op">-&gt;</span>u<span class="op">);</span></span>
<span id="cb42-38"><a href="#cb42-38" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(!(</span>gp<span class="op">-&gt;</span>mode <span class="op">&amp;</span> ATTR_WDUMMY<span class="op">)</span> <span class="op">&amp;&amp;</span> <span class="op">(</span>delim <span class="op">!=</span> prevdelim</span>
<span id="cb42-39"><a href="#cb42-39" aria-hidden="true" tabindex="-1"></a>                                        <span class="op">||</span> <span class="op">(</span>delim <span class="op">&amp;&amp;</span> gp<span class="op">-&gt;</span>u <span class="op">!=</span> prevgp<span class="op">-&gt;</span>u<span class="op">)))</span></span>
<span id="cb42-40"><a href="#cb42-40" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb42-41"><a href="#cb42-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb42-42"><a href="#cb42-42" aria-hidden="true" tabindex="-1"></a>                        <span class="op">*</span>x <span class="op">=</span> newx<span class="op">;</span></span>
<span id="cb42-43"><a href="#cb42-43" aria-hidden="true" tabindex="-1"></a>                        <span class="op">*</span>y <span class="op">=</span> newy<span class="op">;</span></span>
<span id="cb42-44"><a href="#cb42-44" aria-hidden="true" tabindex="-1"></a>                        prevgp <span class="op">=</span> gp<span class="op">;</span></span>
<span id="cb42-45"><a href="#cb42-45" aria-hidden="true" tabindex="-1"></a>                        prevdelim <span class="op">=</span> delim<span class="op">;</span></span>
<span id="cb42-46"><a href="#cb42-46" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb42-47"><a href="#cb42-47" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb42-48"><a href="#cb42-48" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> SNAP_LINE<span class="op">:</span></span>
<span id="cb42-49"><a href="#cb42-49" aria-hidden="true" tabindex="-1"></a>                <span class="co">/*</span></span>
<span id="cb42-50"><a href="#cb42-50" aria-hidden="true" tabindex="-1"></a><span class="co">                 * Snap around if the the previous line or the current one</span></span>
<span id="cb42-51"><a href="#cb42-51" aria-hidden="true" tabindex="-1"></a><span class="co">                 * has set ATTR_WRAP at its end. Then the whole next or</span></span>
<span id="cb42-52"><a href="#cb42-52" aria-hidden="true" tabindex="-1"></a><span class="co">                 * previous line will be selected.</span></span>
<span id="cb42-53"><a href="#cb42-53" aria-hidden="true" tabindex="-1"></a><span class="co">                 */</span></span>
<span id="cb42-54"><a href="#cb42-54" aria-hidden="true" tabindex="-1"></a>                <span class="op">*</span>x <span class="op">=</span> <span class="op">(</span>direction <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">?</span> <span class="dv">0</span> <span class="op">:</span> term<span class="op">.</span>col <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb42-55"><a href="#cb42-55" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>direction <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb42-56"><a href="#cb42-56" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">for</span> <span class="op">(;</span> <span class="op">*</span>y <span class="op">&gt;</span> <span class="dv">0</span><span class="op">;</span> <span class="op">*</span>y <span class="op">+=</span> direction<span class="op">)</span> <span class="op">{</span></span>
<span id="cb42-57"><a href="#cb42-57" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(!(</span>term<span class="op">.</span>line<span class="op">[*</span>y<span class="op">-</span><span class="dv">1</span><span class="op">][</span>term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">].</span>mode</span>
<span id="cb42-58"><a href="#cb42-58" aria-hidden="true" tabindex="-1"></a>                                                <span class="op">&amp;</span> ATTR_WRAP<span class="op">))</span> <span class="op">{</span></span>
<span id="cb42-59"><a href="#cb42-59" aria-hidden="true" tabindex="-1"></a>                                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb42-60"><a href="#cb42-60" aria-hidden="true" tabindex="-1"></a>                                <span class="op">}</span></span>
<span id="cb42-61"><a href="#cb42-61" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb42-62"><a href="#cb42-62" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>direction <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb42-63"><a href="#cb42-63" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">for</span> <span class="op">(;</span> <span class="op">*</span>y <span class="op">&lt;</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">;</span> <span class="op">*</span>y <span class="op">+=</span> direction<span class="op">)</span> <span class="op">{</span></span>
<span id="cb42-64"><a href="#cb42-64" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(!(</span>term<span class="op">.</span>line<span class="op">[*</span>y<span class="op">][</span>term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">].</span>mode</span>
<span id="cb42-65"><a href="#cb42-65" aria-hidden="true" tabindex="-1"></a>                                                <span class="op">&amp;</span> ATTR_WRAP<span class="op">))</span> <span class="op">{</span></span>
<span id="cb42-66"><a href="#cb42-66" aria-hidden="true" tabindex="-1"></a>                                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb42-67"><a href="#cb42-67" aria-hidden="true" tabindex="-1"></a>                                <span class="op">}</span></span>
<span id="cb42-68"><a href="#cb42-68" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb42-69"><a href="#cb42-69" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb42-70"><a href="#cb42-70" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb42-71"><a href="#cb42-71" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb42-72"><a href="#cb42-72" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div></li>
<li><p><code>getsel</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb43"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> <span class="op">*</span></span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a>getsel<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>str<span class="op">,</span> <span class="op">*</span>ptr<span class="op">;</span></span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> y<span class="op">,</span> bufsize<span class="op">,</span> lastx<span class="op">,</span> linelen<span class="op">;</span></span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">const</span> Glyph <span class="op">*</span>gp<span class="op">,</span> <span class="op">*</span>last<span class="op">;</span></span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-8"><a href="#cb43-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>ob<span class="op">.</span>x <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb43-9"><a href="#cb43-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> NULL<span class="op">;</span></span>
<span id="cb43-10"><a href="#cb43-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-11"><a href="#cb43-11" aria-hidden="true" tabindex="-1"></a>        bufsize <span class="op">=</span> <span class="op">(</span>term<span class="op">.</span>col<span class="op">+</span><span class="dv">1</span><span class="op">)</span> <span class="op">*</span> <span class="op">(</span>sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">-</span>sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">+</span><span class="dv">1</span><span class="op">)</span> <span class="op">*</span> UTF_SIZ<span class="op">;</span></span>
<span id="cb43-12"><a href="#cb43-12" aria-hidden="true" tabindex="-1"></a>        ptr <span class="op">=</span> str <span class="op">=</span> xmalloc<span class="op">(</span>bufsize<span class="op">);</span></span>
<span id="cb43-13"><a href="#cb43-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-14"><a href="#cb43-14" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* append every set &amp; selected glyph to the selection */</span></span>
<span id="cb43-15"><a href="#cb43-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>y <span class="op">=</span> sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">;</span> y <span class="op">&lt;=</span> sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">;</span> y<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb43-16"><a href="#cb43-16" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">((</span>linelen <span class="op">=</span> tlinelen<span class="op">(</span>y<span class="op">))</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb43-17"><a href="#cb43-17" aria-hidden="true" tabindex="-1"></a>                        <span class="op">*</span>ptr<span class="op">++</span> <span class="op">=</span> <span class="ch">&#39;\n&#39;</span><span class="op">;</span></span>
<span id="cb43-18"><a href="#cb43-18" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb43-19"><a href="#cb43-19" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb43-20"><a href="#cb43-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-21"><a href="#cb43-21" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>type <span class="op">==</span> SEL_RECTANGULAR<span class="op">)</span> <span class="op">{</span></span>
<span id="cb43-22"><a href="#cb43-22" aria-hidden="true" tabindex="-1"></a>                        gp <span class="op">=</span> <span class="op">&amp;</span>term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>sel<span class="op">.</span>nb<span class="op">.</span>x<span class="op">];</span></span>
<span id="cb43-23"><a href="#cb43-23" aria-hidden="true" tabindex="-1"></a>                        lastx <span class="op">=</span> sel<span class="op">.</span>ne<span class="op">.</span>x<span class="op">;</span></span>
<span id="cb43-24"><a href="#cb43-24" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb43-25"><a href="#cb43-25" aria-hidden="true" tabindex="-1"></a>                        gp <span class="op">=</span> <span class="op">&amp;</span>term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>sel<span class="op">.</span>nb<span class="op">.</span>y <span class="op">==</span> y <span class="op">?</span> sel<span class="op">.</span>nb<span class="op">.</span>x <span class="op">:</span> <span class="dv">0</span><span class="op">];</span></span>
<span id="cb43-26"><a href="#cb43-26" aria-hidden="true" tabindex="-1"></a>                        lastx <span class="op">=</span> <span class="op">(</span>sel<span class="op">.</span>ne<span class="op">.</span>y <span class="op">==</span> y<span class="op">)</span> <span class="op">?</span> sel<span class="op">.</span>ne<span class="op">.</span>x <span class="op">:</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb43-27"><a href="#cb43-27" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb43-28"><a href="#cb43-28" aria-hidden="true" tabindex="-1"></a>                last <span class="op">=</span> <span class="op">&amp;</span>term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>MIN<span class="op">(</span>lastx<span class="op">,</span> linelen<span class="op">-</span><span class="dv">1</span><span class="op">)];</span></span>
<span id="cb43-29"><a href="#cb43-29" aria-hidden="true" tabindex="-1"></a>                <span class="cf">while</span> <span class="op">(</span>last <span class="op">&gt;=</span> gp <span class="op">&amp;&amp;</span> last<span class="op">-&gt;</span>u <span class="op">==</span> <span class="ch">&#39; &#39;</span><span class="op">)</span></span>
<span id="cb43-30"><a href="#cb43-30" aria-hidden="true" tabindex="-1"></a>                        <span class="op">--</span>last<span class="op">;</span></span>
<span id="cb43-31"><a href="#cb43-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-32"><a href="#cb43-32" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span> <span class="op">;</span> gp <span class="op">&lt;=</span> last<span class="op">;</span> <span class="op">++</span>gp<span class="op">)</span> <span class="op">{</span></span>
<span id="cb43-33"><a href="#cb43-33" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>gp<span class="op">-&gt;</span>mode <span class="op">&amp;</span> ATTR_WDUMMY<span class="op">)</span></span>
<span id="cb43-34"><a href="#cb43-34" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb43-35"><a href="#cb43-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-36"><a href="#cb43-36" aria-hidden="true" tabindex="-1"></a>                        ptr <span class="op">+=</span> utf8encode<span class="op">(</span>gp<span class="op">-&gt;</span>u<span class="op">,</span> ptr<span class="op">);</span></span>
<span id="cb43-37"><a href="#cb43-37" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb43-38"><a href="#cb43-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-39"><a href="#cb43-39" aria-hidden="true" tabindex="-1"></a>                <span class="co">/*</span></span>
<span id="cb43-40"><a href="#cb43-40" aria-hidden="true" tabindex="-1"></a><span class="co">                 * Copy and pasting of line endings is inconsistent</span></span>
<span id="cb43-41"><a href="#cb43-41" aria-hidden="true" tabindex="-1"></a><span class="co">                 * in the inconsistent terminal and GUI world.</span></span>
<span id="cb43-42"><a href="#cb43-42" aria-hidden="true" tabindex="-1"></a><span class="co">                 * The best solution seems like to produce &#39;\n&#39; when</span></span>
<span id="cb43-43"><a href="#cb43-43" aria-hidden="true" tabindex="-1"></a><span class="co">                 * something is copied from st and convert &#39;\n&#39; to</span></span>
<span id="cb43-44"><a href="#cb43-44" aria-hidden="true" tabindex="-1"></a><span class="co">                 * &#39;\r&#39;, when something to be pasted is received by</span></span>
<span id="cb43-45"><a href="#cb43-45" aria-hidden="true" tabindex="-1"></a><span class="co">                 * st.</span></span>
<span id="cb43-46"><a href="#cb43-46" aria-hidden="true" tabindex="-1"></a><span class="co">                 * </span><span class="al">FIXME</span><span class="co">: Fix the computer world.</span></span>
<span id="cb43-47"><a href="#cb43-47" aria-hidden="true" tabindex="-1"></a><span class="co">                 */</span></span>
<span id="cb43-48"><a href="#cb43-48" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">((</span>y <span class="op">&lt;</span> sel<span class="op">.</span>ne<span class="op">.</span>y <span class="op">||</span> lastx <span class="op">&gt;=</span> linelen<span class="op">)</span> <span class="op">&amp;&amp;</span></span>
<span id="cb43-49"><a href="#cb43-49" aria-hidden="true" tabindex="-1"></a>                    <span class="op">(!(</span>last<span class="op">-&gt;</span>mode <span class="op">&amp;</span> ATTR_WRAP<span class="op">)</span> <span class="op">||</span> sel<span class="op">.</span>type <span class="op">==</span> SEL_RECTANGULAR<span class="op">))</span></span>
<span id="cb43-50"><a href="#cb43-50" aria-hidden="true" tabindex="-1"></a>                        <span class="op">*</span>ptr<span class="op">++</span> <span class="op">=</span> <span class="ch">&#39;\n&#39;</span><span class="op">;</span></span>
<span id="cb43-51"><a href="#cb43-51" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb43-52"><a href="#cb43-52" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>ptr <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb43-53"><a href="#cb43-53" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> str<span class="op">;</span></span>
<span id="cb43-54"><a href="#cb43-54" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb43-55"><a href="#cb43-55" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>selclear</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb44"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a>selclear<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb44-4"><a href="#cb44-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>ob<span class="op">.</span>x <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb44-5"><a href="#cb44-5" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb44-6"><a href="#cb44-6" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>mode <span class="op">=</span> SEL_IDLE<span class="op">;</span></span>
<span id="cb44-7"><a href="#cb44-7" aria-hidden="true" tabindex="-1"></a>        sel<span class="op">.</span>ob<span class="op">.</span>x <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb44-8"><a href="#cb44-8" aria-hidden="true" tabindex="-1"></a>        tsetdirt<span class="op">(</span>sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">,</span> sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb44-9"><a href="#cb44-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb44-10"><a href="#cb44-10" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>die</code></p>
<p>ログを書き残して終了させる</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb45"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true" tabindex="-1"></a>die<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>errstr<span class="op">,</span> <span class="op">...)</span></span>
<span id="cb45-3"><a href="#cb45-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb45-4"><a href="#cb45-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">va_list</span> ap<span class="op">;</span></span>
<span id="cb45-5"><a href="#cb45-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb45-6"><a href="#cb45-6" aria-hidden="true" tabindex="-1"></a>        va_start<span class="op">(</span>ap<span class="op">,</span> errstr<span class="op">);</span></span>
<span id="cb45-7"><a href="#cb45-7" aria-hidden="true" tabindex="-1"></a>        vfprintf<span class="op">(</span>stderr<span class="op">,</span> errstr<span class="op">,</span> ap<span class="op">);</span></span>
<span id="cb45-8"><a href="#cb45-8" aria-hidden="true" tabindex="-1"></a>        va_end<span class="op">(</span>ap<span class="op">);</span></span>
<span id="cb45-9"><a href="#cb45-9" aria-hidden="true" tabindex="-1"></a>        exit<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb45-10"><a href="#cb45-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb45-11"><a href="#cb45-11" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>execsh</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb46"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a>execsh<span class="op">(</span><span class="dt">char</span> <span class="op">*</span>cmd<span class="op">,</span> <span class="dt">char</span> <span class="op">**</span>args<span class="op">)</span></span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>sh<span class="op">,</span> <span class="op">*</span>prog<span class="op">,</span> <span class="op">*</span>arg<span class="op">;</span></span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">const</span> <span class="kw">struct</span> passwd <span class="op">*</span>pw<span class="op">;</span></span>
<span id="cb46-6"><a href="#cb46-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-7"><a href="#cb46-7" aria-hidden="true" tabindex="-1"></a>        errno <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb46-8"><a href="#cb46-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">((</span>pw <span class="op">=</span> getpwuid<span class="op">(</span>getuid<span class="op">()))</span> <span class="op">==</span> NULL<span class="op">)</span> <span class="op">{</span></span>
<span id="cb46-9"><a href="#cb46-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>errno<span class="op">)</span></span>
<span id="cb46-10"><a href="#cb46-10" aria-hidden="true" tabindex="-1"></a>                        die<span class="op">(</span><span class="st">&quot;getpwuid: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb46-11"><a href="#cb46-11" aria-hidden="true" tabindex="-1"></a>                <span class="cf">else</span></span>
<span id="cb46-12"><a href="#cb46-12" aria-hidden="true" tabindex="-1"></a>                        die<span class="op">(</span><span class="st">&quot;who are you?</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb46-13"><a href="#cb46-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb46-14"><a href="#cb46-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-15"><a href="#cb46-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">((</span>sh <span class="op">=</span> getenv<span class="op">(</span><span class="st">&quot;SHELL&quot;</span><span class="op">))</span> <span class="op">==</span> NULL<span class="op">)</span></span>
<span id="cb46-16"><a href="#cb46-16" aria-hidden="true" tabindex="-1"></a>                sh <span class="op">=</span> <span class="op">(</span>pw<span class="op">-&gt;</span>pw_shell<span class="op">[</span><span class="dv">0</span><span class="op">])</span> <span class="op">?</span> pw<span class="op">-&gt;</span>pw_shell <span class="op">:</span> cmd<span class="op">;</span></span>
<span id="cb46-17"><a href="#cb46-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-18"><a href="#cb46-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>args<span class="op">)</span> <span class="op">{</span></span>
<span id="cb46-19"><a href="#cb46-19" aria-hidden="true" tabindex="-1"></a>                prog <span class="op">=</span> args<span class="op">[</span><span class="dv">0</span><span class="op">];</span></span>
<span id="cb46-20"><a href="#cb46-20" aria-hidden="true" tabindex="-1"></a>                arg <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb46-21"><a href="#cb46-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>scroll<span class="op">)</span> <span class="op">{</span></span>
<span id="cb46-22"><a href="#cb46-22" aria-hidden="true" tabindex="-1"></a>                prog <span class="op">=</span> scroll<span class="op">;</span></span>
<span id="cb46-23"><a href="#cb46-23" aria-hidden="true" tabindex="-1"></a>                arg <span class="op">=</span> utmp <span class="op">?</span> utmp <span class="op">:</span> sh<span class="op">;</span></span>
<span id="cb46-24"><a href="#cb46-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>utmp<span class="op">)</span> <span class="op">{</span></span>
<span id="cb46-25"><a href="#cb46-25" aria-hidden="true" tabindex="-1"></a>                prog <span class="op">=</span> utmp<span class="op">;</span></span>
<span id="cb46-26"><a href="#cb46-26" aria-hidden="true" tabindex="-1"></a>                arg <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb46-27"><a href="#cb46-27" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb46-28"><a href="#cb46-28" aria-hidden="true" tabindex="-1"></a>                prog <span class="op">=</span> sh<span class="op">;</span></span>
<span id="cb46-29"><a href="#cb46-29" aria-hidden="true" tabindex="-1"></a>                arg <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb46-30"><a href="#cb46-30" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb46-31"><a href="#cb46-31" aria-hidden="true" tabindex="-1"></a>        DEFAULT<span class="op">(</span>args<span class="op">,</span> <span class="op">((</span><span class="dt">char</span> <span class="op">*[])</span> <span class="op">{</span>prog<span class="op">,</span> arg<span class="op">,</span> NULL<span class="op">}));</span></span>
<span id="cb46-32"><a href="#cb46-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-33"><a href="#cb46-33" aria-hidden="true" tabindex="-1"></a>        unsetenv<span class="op">(</span><span class="st">&quot;COLUMNS&quot;</span><span class="op">);</span></span>
<span id="cb46-34"><a href="#cb46-34" aria-hidden="true" tabindex="-1"></a>        unsetenv<span class="op">(</span><span class="st">&quot;LINES&quot;</span><span class="op">);</span></span>
<span id="cb46-35"><a href="#cb46-35" aria-hidden="true" tabindex="-1"></a>        unsetenv<span class="op">(</span><span class="st">&quot;TERMCAP&quot;</span><span class="op">);</span></span>
<span id="cb46-36"><a href="#cb46-36" aria-hidden="true" tabindex="-1"></a>        setenv<span class="op">(</span><span class="st">&quot;LOGNAME&quot;</span><span class="op">,</span> pw<span class="op">-&gt;</span>pw_name<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb46-37"><a href="#cb46-37" aria-hidden="true" tabindex="-1"></a>        setenv<span class="op">(</span><span class="st">&quot;USER&quot;</span><span class="op">,</span> pw<span class="op">-&gt;</span>pw_name<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb46-38"><a href="#cb46-38" aria-hidden="true" tabindex="-1"></a>        setenv<span class="op">(</span><span class="st">&quot;SHELL&quot;</span><span class="op">,</span> sh<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb46-39"><a href="#cb46-39" aria-hidden="true" tabindex="-1"></a>        setenv<span class="op">(</span><span class="st">&quot;HOME&quot;</span><span class="op">,</span> pw<span class="op">-&gt;</span>pw_dir<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb46-40"><a href="#cb46-40" aria-hidden="true" tabindex="-1"></a>        setenv<span class="op">(</span><span class="st">&quot;TERM&quot;</span><span class="op">,</span> termname<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb46-41"><a href="#cb46-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-42"><a href="#cb46-42" aria-hidden="true" tabindex="-1"></a>        signal<span class="op">(</span>SIGCHLD<span class="op">,</span> SIG_DFL<span class="op">);</span></span>
<span id="cb46-43"><a href="#cb46-43" aria-hidden="true" tabindex="-1"></a>        signal<span class="op">(</span>SIGHUP<span class="op">,</span> SIG_DFL<span class="op">);</span></span>
<span id="cb46-44"><a href="#cb46-44" aria-hidden="true" tabindex="-1"></a>        signal<span class="op">(</span>SIGINT<span class="op">,</span> SIG_DFL<span class="op">);</span></span>
<span id="cb46-45"><a href="#cb46-45" aria-hidden="true" tabindex="-1"></a>        signal<span class="op">(</span>SIGQUIT<span class="op">,</span> SIG_DFL<span class="op">);</span></span>
<span id="cb46-46"><a href="#cb46-46" aria-hidden="true" tabindex="-1"></a>        signal<span class="op">(</span>SIGTERM<span class="op">,</span> SIG_DFL<span class="op">);</span></span>
<span id="cb46-47"><a href="#cb46-47" aria-hidden="true" tabindex="-1"></a>        signal<span class="op">(</span>SIGALRM<span class="op">,</span> SIG_DFL<span class="op">);</span></span>
<span id="cb46-48"><a href="#cb46-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-49"><a href="#cb46-49" aria-hidden="true" tabindex="-1"></a>        execvp<span class="op">(</span>prog<span class="op">,</span> args<span class="op">);</span></span>
<span id="cb46-50"><a href="#cb46-50" aria-hidden="true" tabindex="-1"></a>        _exit<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb46-51"><a href="#cb46-51" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb46-52"><a href="#cb46-52" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>sigchld</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb47"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a>sigchld<span class="op">(</span><span class="dt">int</span> a<span class="op">)</span></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> stat<span class="op">;</span></span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true" tabindex="-1"></a>        pid_t p<span class="op">;</span></span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">((</span>p <span class="op">=</span> waitpid<span class="op">(</span>pid<span class="op">,</span> <span class="op">&amp;</span>stat<span class="op">,</span> WNOHANG<span class="op">))</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb47-8"><a href="#cb47-8" aria-hidden="true" tabindex="-1"></a>                die<span class="op">(</span><span class="st">&quot;waiting for pid %hd failed: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> pid<span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb47-9"><a href="#cb47-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-10"><a href="#cb47-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>pid <span class="op">!=</span> p<span class="op">)</span></span>
<span id="cb47-11"><a href="#cb47-11" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb47-12"><a href="#cb47-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-13"><a href="#cb47-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>WIFEXITED<span class="op">(</span>stat<span class="op">)</span> <span class="op">&amp;&amp;</span> WEXITSTATUS<span class="op">(</span>stat<span class="op">))</span></span>
<span id="cb47-14"><a href="#cb47-14" aria-hidden="true" tabindex="-1"></a>                die<span class="op">(</span><span class="st">&quot;child exited with status %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> WEXITSTATUS<span class="op">(</span>stat<span class="op">));</span></span>
<span id="cb47-15"><a href="#cb47-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>WIFSIGNALED<span class="op">(</span>stat<span class="op">))</span></span>
<span id="cb47-16"><a href="#cb47-16" aria-hidden="true" tabindex="-1"></a>                die<span class="op">(</span><span class="st">&quot;child terminated due to signal %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> WTERMSIG<span class="op">(</span>stat<span class="op">));</span></span>
<span id="cb47-17"><a href="#cb47-17" aria-hidden="true" tabindex="-1"></a>        _exit<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span>
<span id="cb47-18"><a href="#cb47-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb47-19"><a href="#cb47-19" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>stty</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb48"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true" tabindex="-1"></a>stty<span class="op">(</span><span class="dt">char</span> <span class="op">**</span>args<span class="op">)</span></span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb48-4"><a href="#cb48-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> cmd<span class="op">[</span>_POSIX_ARG_MAX<span class="op">],</span> <span class="op">**</span>p<span class="op">,</span> <span class="op">*</span>q<span class="op">,</span> <span class="op">*</span>s<span class="op">;</span></span>
<span id="cb48-5"><a href="#cb48-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> n<span class="op">,</span> siz<span class="op">;</span></span>
<span id="cb48-6"><a href="#cb48-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb48-7"><a href="#cb48-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">((</span>n <span class="op">=</span> strlen<span class="op">(</span>stty_args<span class="op">))</span> <span class="op">&gt;</span> <span class="kw">sizeof</span><span class="op">(</span>cmd<span class="op">)-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb48-8"><a href="#cb48-8" aria-hidden="true" tabindex="-1"></a>                die<span class="op">(</span><span class="st">&quot;incorrect stty parameters</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb48-9"><a href="#cb48-9" aria-hidden="true" tabindex="-1"></a>        memcpy<span class="op">(</span>cmd<span class="op">,</span> stty_args<span class="op">,</span> n<span class="op">);</span></span>
<span id="cb48-10"><a href="#cb48-10" aria-hidden="true" tabindex="-1"></a>        q <span class="op">=</span> cmd <span class="op">+</span> n<span class="op">;</span></span>
<span id="cb48-11"><a href="#cb48-11" aria-hidden="true" tabindex="-1"></a>        siz <span class="op">=</span> <span class="kw">sizeof</span><span class="op">(</span>cmd<span class="op">)</span> <span class="op">-</span> n<span class="op">;</span></span>
<span id="cb48-12"><a href="#cb48-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>p <span class="op">=</span> args<span class="op">;</span> p <span class="op">&amp;&amp;</span> <span class="op">(</span>s <span class="op">=</span> <span class="op">*</span>p<span class="op">);</span> <span class="op">++</span>p<span class="op">)</span> <span class="op">{</span></span>
<span id="cb48-13"><a href="#cb48-13" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">((</span>n <span class="op">=</span> strlen<span class="op">(</span>s<span class="op">))</span> <span class="op">&gt;</span> siz<span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb48-14"><a href="#cb48-14" aria-hidden="true" tabindex="-1"></a>                        die<span class="op">(</span><span class="st">&quot;stty parameter length too long</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb48-15"><a href="#cb48-15" aria-hidden="true" tabindex="-1"></a>                <span class="op">*</span>q<span class="op">++</span> <span class="op">=</span> <span class="ch">&#39; &#39;</span><span class="op">;</span></span>
<span id="cb48-16"><a href="#cb48-16" aria-hidden="true" tabindex="-1"></a>                memcpy<span class="op">(</span>q<span class="op">,</span> s<span class="op">,</span> n<span class="op">);</span></span>
<span id="cb48-17"><a href="#cb48-17" aria-hidden="true" tabindex="-1"></a>                q <span class="op">+=</span> n<span class="op">;</span></span>
<span id="cb48-18"><a href="#cb48-18" aria-hidden="true" tabindex="-1"></a>                siz <span class="op">-=</span> n <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb48-19"><a href="#cb48-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb48-20"><a href="#cb48-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>q <span class="op">=</span> <span class="ch">&#39;\0&#39;</span><span class="op">;</span></span>
<span id="cb48-21"><a href="#cb48-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>system<span class="op">(</span>cmd<span class="op">)</span> <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb48-22"><a href="#cb48-22" aria-hidden="true" tabindex="-1"></a>                perror<span class="op">(</span><span class="st">&quot;Couldn&#39;t call stty&quot;</span><span class="op">);</span></span>
<span id="cb48-23"><a href="#cb48-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb48-24"><a href="#cb48-24" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>ttynew</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb49"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb49-2"><a href="#cb49-2" aria-hidden="true" tabindex="-1"></a>ttynew<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>line<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>cmd<span class="op">,</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>out<span class="op">,</span> <span class="dt">char</span> <span class="op">**</span>args<span class="op">)</span></span>
<span id="cb49-3"><a href="#cb49-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb49-4"><a href="#cb49-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> m<span class="op">,</span> s<span class="op">;</span></span>
<span id="cb49-5"><a href="#cb49-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb49-6"><a href="#cb49-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>out<span class="op">)</span> <span class="op">{</span></span>
<span id="cb49-7"><a href="#cb49-7" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>mode <span class="op">|=</span> MODE_PRINT<span class="op">;</span></span>
<span id="cb49-8"><a href="#cb49-8" aria-hidden="true" tabindex="-1"></a>                iofd <span class="op">=</span> <span class="op">(!</span>strcmp<span class="op">(</span>out<span class="op">,</span> <span class="st">&quot;-&quot;</span><span class="op">))</span> <span class="op">?</span></span>
<span id="cb49-9"><a href="#cb49-9" aria-hidden="true" tabindex="-1"></a>                          <span class="dv">1</span> <span class="op">:</span> open<span class="op">(</span>out<span class="op">,</span> O_WRONLY <span class="op">|</span> O_CREAT<span class="op">,</span> <span class="bn">0666</span><span class="op">);</span></span>
<span id="cb49-10"><a href="#cb49-10" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>iofd <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb49-11"><a href="#cb49-11" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;Error opening %s:%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb49-12"><a href="#cb49-12" aria-hidden="true" tabindex="-1"></a>                                out<span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb49-13"><a href="#cb49-13" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb49-14"><a href="#cb49-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb49-15"><a href="#cb49-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb49-16"><a href="#cb49-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>line<span class="op">)</span> <span class="op">{</span></span>
<span id="cb49-17"><a href="#cb49-17" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">((</span>cmdfd <span class="op">=</span> open<span class="op">(</span>line<span class="op">,</span> O_RDWR<span class="op">))</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb49-18"><a href="#cb49-18" aria-hidden="true" tabindex="-1"></a>                        die<span class="op">(</span><span class="st">&quot;open line &#39;%s&#39; failed: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb49-19"><a href="#cb49-19" aria-hidden="true" tabindex="-1"></a>                            line<span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb49-20"><a href="#cb49-20" aria-hidden="true" tabindex="-1"></a>                dup2<span class="op">(</span>cmdfd<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb49-21"><a href="#cb49-21" aria-hidden="true" tabindex="-1"></a>                stty<span class="op">(</span>args<span class="op">);</span></span>
<span id="cb49-22"><a href="#cb49-22" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> cmdfd<span class="op">;</span></span>
<span id="cb49-23"><a href="#cb49-23" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb49-24"><a href="#cb49-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb49-25"><a href="#cb49-25" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* seems to work fine on linux, openbsd and freebsd */</span></span>
<span id="cb49-26"><a href="#cb49-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>openpty<span class="op">(&amp;</span>m<span class="op">,</span> <span class="op">&amp;</span>s<span class="op">,</span> NULL<span class="op">,</span> NULL<span class="op">,</span> NULL<span class="op">)</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb49-27"><a href="#cb49-27" aria-hidden="true" tabindex="-1"></a>                die<span class="op">(</span><span class="st">&quot;openpty failed: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb49-28"><a href="#cb49-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb49-29"><a href="#cb49-29" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>pid <span class="op">=</span> fork<span class="op">())</span> <span class="op">{</span></span>
<span id="cb49-30"><a href="#cb49-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="op">-</span><span class="dv">1</span><span class="op">:</span></span>
<span id="cb49-31"><a href="#cb49-31" aria-hidden="true" tabindex="-1"></a>                die<span class="op">(</span><span class="st">&quot;fork failed: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb49-32"><a href="#cb49-32" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb49-33"><a href="#cb49-33" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span></span>
<span id="cb49-34"><a href="#cb49-34" aria-hidden="true" tabindex="-1"></a>                close<span class="op">(</span>iofd<span class="op">);</span></span>
<span id="cb49-35"><a href="#cb49-35" aria-hidden="true" tabindex="-1"></a>                close<span class="op">(</span>m<span class="op">);</span></span>
<span id="cb49-36"><a href="#cb49-36" aria-hidden="true" tabindex="-1"></a>                setsid<span class="op">();</span> <span class="co">/* create a new process group */</span></span>
<span id="cb49-37"><a href="#cb49-37" aria-hidden="true" tabindex="-1"></a>                dup2<span class="op">(</span>s<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb49-38"><a href="#cb49-38" aria-hidden="true" tabindex="-1"></a>                dup2<span class="op">(</span>s<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb49-39"><a href="#cb49-39" aria-hidden="true" tabindex="-1"></a>                dup2<span class="op">(</span>s<span class="op">,</span> <span class="dv">2</span><span class="op">);</span></span>
<span id="cb49-40"><a href="#cb49-40" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>ioctl<span class="op">(</span>s<span class="op">,</span> TIOCSCTTY<span class="op">,</span> NULL<span class="op">)</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb49-41"><a href="#cb49-41" aria-hidden="true" tabindex="-1"></a>                        die<span class="op">(</span><span class="st">&quot;ioctl TIOCSCTTY failed: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb49-42"><a href="#cb49-42" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>s <span class="op">&gt;</span> <span class="dv">2</span><span class="op">)</span></span>
<span id="cb49-43"><a href="#cb49-43" aria-hidden="true" tabindex="-1"></a>                        close<span class="op">(</span>s<span class="op">);</span></span>
<span id="cb49-44"><a href="#cb49-44" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef __OpenBSD__</span></span>
<span id="cb49-45"><a href="#cb49-45" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>pledge<span class="op">(</span><span class="st">&quot;stdio getpw proc exec&quot;</span><span class="op">,</span> NULL<span class="op">)</span> <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb49-46"><a href="#cb49-46" aria-hidden="true" tabindex="-1"></a>                        die<span class="op">(</span><span class="st">&quot;pledge</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb49-47"><a href="#cb49-47" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb49-48"><a href="#cb49-48" aria-hidden="true" tabindex="-1"></a>                execsh<span class="op">(</span>cmd<span class="op">,</span> args<span class="op">);</span></span>
<span id="cb49-49"><a href="#cb49-49" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb49-50"><a href="#cb49-50" aria-hidden="true" tabindex="-1"></a>        <span class="cf">default</span><span class="op">:</span></span>
<span id="cb49-51"><a href="#cb49-51" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef __OpenBSD__</span></span>
<span id="cb49-52"><a href="#cb49-52" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>pledge<span class="op">(</span><span class="st">&quot;stdio rpath tty proc&quot;</span><span class="op">,</span> NULL<span class="op">)</span> <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb49-53"><a href="#cb49-53" aria-hidden="true" tabindex="-1"></a>                        die<span class="op">(</span><span class="st">&quot;pledge</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb49-54"><a href="#cb49-54" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb49-55"><a href="#cb49-55" aria-hidden="true" tabindex="-1"></a>                close<span class="op">(</span>s<span class="op">);</span></span>
<span id="cb49-56"><a href="#cb49-56" aria-hidden="true" tabindex="-1"></a>                cmdfd <span class="op">=</span> m<span class="op">;</span></span>
<span id="cb49-57"><a href="#cb49-57" aria-hidden="true" tabindex="-1"></a>                signal<span class="op">(</span>SIGCHLD<span class="op">,</span> sigchld<span class="op">);</span></span>
<span id="cb49-58"><a href="#cb49-58" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb49-59"><a href="#cb49-59" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb49-60"><a href="#cb49-60" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> cmdfd<span class="op">;</span></span>
<span id="cb49-61"><a href="#cb49-61" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb49-62"><a href="#cb49-62" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>ttyread</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb50"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true" tabindex="-1"></a><span class="dt">size_t</span></span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true" tabindex="-1"></a>ttyread<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb50-3"><a href="#cb50-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb50-4"><a href="#cb50-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">static</span> <span class="dt">char</span> buf<span class="op">[</span>BUFSIZ<span class="op">];</span></span>
<span id="cb50-5"><a href="#cb50-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">static</span> <span class="dt">int</span> buflen <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb50-6"><a href="#cb50-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> ret<span class="op">,</span> written<span class="op">;</span></span>
<span id="cb50-7"><a href="#cb50-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb50-8"><a href="#cb50-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* append read bytes to unprocessed bytes */</span></span>
<span id="cb50-9"><a href="#cb50-9" aria-hidden="true" tabindex="-1"></a>        ret <span class="op">=</span> read<span class="op">(</span>cmdfd<span class="op">,</span> buf<span class="op">+</span>buflen<span class="op">,</span> LEN<span class="op">(</span>buf<span class="op">)-</span>buflen<span class="op">);</span></span>
<span id="cb50-10"><a href="#cb50-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb50-11"><a href="#cb50-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>ret<span class="op">)</span> <span class="op">{</span></span>
<span id="cb50-12"><a href="#cb50-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span></span>
<span id="cb50-13"><a href="#cb50-13" aria-hidden="true" tabindex="-1"></a>                exit<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span>
<span id="cb50-14"><a href="#cb50-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="op">-</span><span class="dv">1</span><span class="op">:</span></span>
<span id="cb50-15"><a href="#cb50-15" aria-hidden="true" tabindex="-1"></a>                die<span class="op">(</span><span class="st">&quot;couldn&#39;t read from shell: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb50-16"><a href="#cb50-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">default</span><span class="op">:</span></span>
<span id="cb50-17"><a href="#cb50-17" aria-hidden="true" tabindex="-1"></a>                buflen <span class="op">+=</span> ret<span class="op">;</span></span>
<span id="cb50-18"><a href="#cb50-18" aria-hidden="true" tabindex="-1"></a>                written <span class="op">=</span> twrite<span class="op">(</span>buf<span class="op">,</span> buflen<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb50-19"><a href="#cb50-19" aria-hidden="true" tabindex="-1"></a>                buflen <span class="op">-=</span> written<span class="op">;</span></span>
<span id="cb50-20"><a href="#cb50-20" aria-hidden="true" tabindex="-1"></a>                <span class="co">/* keep any incomplete UTF-8 byte sequence for the next call */</span></span>
<span id="cb50-21"><a href="#cb50-21" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>buflen <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb50-22"><a href="#cb50-22" aria-hidden="true" tabindex="-1"></a>                        memmove<span class="op">(</span>buf<span class="op">,</span> buf <span class="op">+</span> written<span class="op">,</span> buflen<span class="op">);</span></span>
<span id="cb50-23"><a href="#cb50-23" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> ret<span class="op">;</span></span>
<span id="cb50-24"><a href="#cb50-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb50-25"><a href="#cb50-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb50-26"><a href="#cb50-26" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>ttywrite</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb51"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb51-1"><a href="#cb51-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb51-2"><a href="#cb51-2" aria-hidden="true" tabindex="-1"></a>ttywrite<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>s<span class="op">,</span> <span class="dt">size_t</span> n<span class="op">,</span> <span class="dt">int</span> may_echo<span class="op">)</span></span>
<span id="cb51-3"><a href="#cb51-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb51-4"><a href="#cb51-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>str<span class="op">,</span> <span class="op">*</span>ptr<span class="op">;</span></span>
<span id="cb51-5"><a href="#cb51-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> y<span class="op">,</span> bufsize<span class="op">,</span> lastx<span class="op">,</span> linelen<span class="op">;</span></span>
<span id="cb51-6"><a href="#cb51-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">const</span> Glyph <span class="op">*</span>gp<span class="op">,</span> <span class="op">*</span>last<span class="op">;</span></span>
<span id="cb51-7"><a href="#cb51-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-8"><a href="#cb51-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>ob<span class="op">.</span>x <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb51-9"><a href="#cb51-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> NULL<span class="op">;</span></span>
<span id="cb51-10"><a href="#cb51-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-11"><a href="#cb51-11" aria-hidden="true" tabindex="-1"></a>        bufsize <span class="op">=</span> <span class="op">(</span>term<span class="op">.</span>col<span class="op">+</span><span class="dv">1</span><span class="op">)</span> <span class="op">*</span> <span class="op">(</span>sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">-</span>sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">+</span><span class="dv">1</span><span class="op">)</span> <span class="op">*</span> UTF_SIZ<span class="op">;</span></span>
<span id="cb51-12"><a href="#cb51-12" aria-hidden="true" tabindex="-1"></a>        ptr <span class="op">=</span> str <span class="op">=</span> xmalloc<span class="op">(</span>bufsize<span class="op">);</span></span>
<span id="cb51-13"><a href="#cb51-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-14"><a href="#cb51-14" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* append every set &amp; selected glyph to the selection */</span></span>
<span id="cb51-15"><a href="#cb51-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>y <span class="op">=</span> sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">;</span> y <span class="op">&lt;=</span> sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">;</span> y<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb51-16"><a href="#cb51-16" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">((</span>linelen <span class="op">=</span> tlinelen<span class="op">(</span>y<span class="op">))</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb51-17"><a href="#cb51-17" aria-hidden="true" tabindex="-1"></a>                        <span class="op">*</span>ptr<span class="op">++</span> <span class="op">=</span> <span class="ch">&#39;\n&#39;</span><span class="op">;</span></span>
<span id="cb51-18"><a href="#cb51-18" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb51-19"><a href="#cb51-19" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb51-20"><a href="#cb51-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-21"><a href="#cb51-21" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>type <span class="op">==</span> SEL_RECTANGULAR<span class="op">)</span> <span class="op">{</span></span>
<span id="cb51-22"><a href="#cb51-22" aria-hidden="true" tabindex="-1"></a>                        gp <span class="op">=</span> <span class="op">&amp;</span>TLINE<span class="op">(</span>y<span class="op">)[</span>sel<span class="op">.</span>nb<span class="op">.</span>x<span class="op">];</span></span>
<span id="cb51-23"><a href="#cb51-23" aria-hidden="true" tabindex="-1"></a>                        lastx <span class="op">=</span> sel<span class="op">.</span>ne<span class="op">.</span>x<span class="op">;</span></span>
<span id="cb51-24"><a href="#cb51-24" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb51-25"><a href="#cb51-25" aria-hidden="true" tabindex="-1"></a>                        gp <span class="op">=</span> <span class="op">&amp;</span>TLINE<span class="op">(</span>y<span class="op">)[</span>sel<span class="op">.</span>nb<span class="op">.</span>y <span class="op">==</span> y <span class="op">?</span> sel<span class="op">.</span>nb<span class="op">.</span>x <span class="op">:</span> <span class="dv">0</span><span class="op">];</span></span>
<span id="cb51-26"><a href="#cb51-26" aria-hidden="true" tabindex="-1"></a>                        lastx <span class="op">=</span> <span class="op">(</span>sel<span class="op">.</span>ne<span class="op">.</span>y <span class="op">==</span> y<span class="op">)</span> <span class="op">?</span> sel<span class="op">.</span>ne<span class="op">.</span>x <span class="op">:</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb51-27"><a href="#cb51-27" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb51-28"><a href="#cb51-28" aria-hidden="true" tabindex="-1"></a>                last <span class="op">=</span> <span class="op">&amp;</span>TLINE<span class="op">(</span>y<span class="op">)[</span>MIN<span class="op">(</span>lastx<span class="op">,</span> linelen<span class="op">-</span><span class="dv">1</span><span class="op">)];</span></span>
<span id="cb51-29"><a href="#cb51-29" aria-hidden="true" tabindex="-1"></a>                <span class="cf">while</span> <span class="op">(</span>last <span class="op">&gt;=</span> gp <span class="op">&amp;&amp;</span> last<span class="op">-&gt;</span>u <span class="op">==</span> <span class="ch">&#39; &#39;</span><span class="op">)</span></span>
<span id="cb51-30"><a href="#cb51-30" aria-hidden="true" tabindex="-1"></a>                        <span class="op">--</span>last<span class="op">;</span></span>
<span id="cb51-31"><a href="#cb51-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-32"><a href="#cb51-32" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span> <span class="op">;</span> gp <span class="op">&lt;=</span> last<span class="op">;</span> <span class="op">++</span>gp<span class="op">)</span> <span class="op">{</span></span>
<span id="cb51-33"><a href="#cb51-33" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>gp<span class="op">-&gt;</span>mode <span class="op">&amp;</span> ATTR_WDUMMY<span class="op">)</span></span>
<span id="cb51-34"><a href="#cb51-34" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb51-35"><a href="#cb51-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-36"><a href="#cb51-36" aria-hidden="true" tabindex="-1"></a>                        ptr <span class="op">+=</span> utf8encode<span class="op">(</span>gp<span class="op">-&gt;</span>u<span class="op">,</span> ptr<span class="op">);</span></span>
<span id="cb51-37"><a href="#cb51-37" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb51-38"><a href="#cb51-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-39"><a href="#cb51-39" aria-hidden="true" tabindex="-1"></a>                <span class="co">/*</span></span>
<span id="cb51-40"><a href="#cb51-40" aria-hidden="true" tabindex="-1"></a><span class="co">                 * Copy and pasting of line endings is inconsistent</span></span>
<span id="cb51-41"><a href="#cb51-41" aria-hidden="true" tabindex="-1"></a><span class="co">                 * in the inconsistent terminal and GUI world.</span></span>
<span id="cb51-42"><a href="#cb51-42" aria-hidden="true" tabindex="-1"></a><span class="co">                 * The best solution seems like to produce &#39;\n&#39; when</span></span>
<span id="cb51-43"><a href="#cb51-43" aria-hidden="true" tabindex="-1"></a><span class="co">                 * something is copied from st and convert &#39;\n&#39; to</span></span>
<span id="cb51-44"><a href="#cb51-44" aria-hidden="true" tabindex="-1"></a><span class="co">                 * &#39;\r&#39;, when something to be pasted is received by</span></span>
<span id="cb51-45"><a href="#cb51-45" aria-hidden="true" tabindex="-1"></a><span class="co">                 * st.</span></span>
<span id="cb51-46"><a href="#cb51-46" aria-hidden="true" tabindex="-1"></a><span class="co">                 * </span><span class="al">FIXME</span><span class="co">: Fix the computer world.</span></span>
<span id="cb51-47"><a href="#cb51-47" aria-hidden="true" tabindex="-1"></a><span class="co">                 */</span></span>
<span id="cb51-48"><a href="#cb51-48" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">((</span>y <span class="op">&lt;</span> sel<span class="op">.</span>ne<span class="op">.</span>y <span class="op">||</span> lastx <span class="op">&gt;=</span> linelen<span class="op">)</span> <span class="op">&amp;&amp;</span></span>
<span id="cb51-49"><a href="#cb51-49" aria-hidden="true" tabindex="-1"></a>                    <span class="op">(!(</span>last<span class="op">-&gt;</span>mode <span class="op">&amp;</span> ATTR_WRAP<span class="op">)</span> <span class="op">||</span> sel<span class="op">.</span>type <span class="op">==</span> SEL_RECTANGULAR<span class="op">))</span></span>
<span id="cb51-50"><a href="#cb51-50" aria-hidden="true" tabindex="-1"></a>                        <span class="op">*</span>ptr<span class="op">++</span> <span class="op">=</span> <span class="ch">&#39;\n&#39;</span><span class="op">;</span></span>
<span id="cb51-51"><a href="#cb51-51" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb51-52"><a href="#cb51-52" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>ptr <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb51-53"><a href="#cb51-53" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> str<span class="op">;</span></span>
<span id="cb51-54"><a href="#cb51-54" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb51-55"><a href="#cb51-55" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>ttywriteraw</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb52"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb52-1"><a href="#cb52-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb52-2"><a href="#cb52-2" aria-hidden="true" tabindex="-1"></a>ttywriteraw<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>s<span class="op">,</span> <span class="dt">size_t</span> n<span class="op">)</span></span>
<span id="cb52-3"><a href="#cb52-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb52-4"><a href="#cb52-4" aria-hidden="true" tabindex="-1"></a>        fd_set wfd<span class="op">,</span> rfd<span class="op">;</span></span>
<span id="cb52-5"><a href="#cb52-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">ssize_t</span> r<span class="op">;</span></span>
<span id="cb52-6"><a href="#cb52-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> lim <span class="op">=</span> <span class="dv">256</span><span class="op">;</span></span>
<span id="cb52-7"><a href="#cb52-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb52-8"><a href="#cb52-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*</span></span>
<span id="cb52-9"><a href="#cb52-9" aria-hidden="true" tabindex="-1"></a><span class="co">         * Remember that we are using a pty, which might be a modem line.</span></span>
<span id="cb52-10"><a href="#cb52-10" aria-hidden="true" tabindex="-1"></a><span class="co">         * Writing too much will clog the line. That&#39;s why we are doing this</span></span>
<span id="cb52-11"><a href="#cb52-11" aria-hidden="true" tabindex="-1"></a><span class="co">         * dance.</span></span>
<span id="cb52-12"><a href="#cb52-12" aria-hidden="true" tabindex="-1"></a><span class="co">         * </span><span class="al">FIXME</span><span class="co">: Migrate the world to Plan 9.</span></span>
<span id="cb52-13"><a href="#cb52-13" aria-hidden="true" tabindex="-1"></a><span class="co">         */</span></span>
<span id="cb52-14"><a href="#cb52-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(</span>n <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb52-15"><a href="#cb52-15" aria-hidden="true" tabindex="-1"></a>                FD_ZERO<span class="op">(&amp;</span>wfd<span class="op">);</span></span>
<span id="cb52-16"><a href="#cb52-16" aria-hidden="true" tabindex="-1"></a>                FD_ZERO<span class="op">(&amp;</span>rfd<span class="op">);</span></span>
<span id="cb52-17"><a href="#cb52-17" aria-hidden="true" tabindex="-1"></a>                FD_SET<span class="op">(</span>cmdfd<span class="op">,</span> <span class="op">&amp;</span>wfd<span class="op">);</span></span>
<span id="cb52-18"><a href="#cb52-18" aria-hidden="true" tabindex="-1"></a>                FD_SET<span class="op">(</span>cmdfd<span class="op">,</span> <span class="op">&amp;</span>rfd<span class="op">);</span></span>
<span id="cb52-19"><a href="#cb52-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb52-20"><a href="#cb52-20" aria-hidden="true" tabindex="-1"></a>                <span class="co">/* Check if we can write. */</span></span>
<span id="cb52-21"><a href="#cb52-21" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>pselect<span class="op">(</span>cmdfd<span class="op">+</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>rfd<span class="op">,</span> <span class="op">&amp;</span>wfd<span class="op">,</span> NULL<span class="op">,</span> NULL<span class="op">,</span> NULL<span class="op">)</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb52-22"><a href="#cb52-22" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>errno <span class="op">==</span> EINTR<span class="op">)</span></span>
<span id="cb52-23"><a href="#cb52-23" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb52-24"><a href="#cb52-24" aria-hidden="true" tabindex="-1"></a>                        die<span class="op">(</span><span class="st">&quot;select failed: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb52-25"><a href="#cb52-25" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb52-26"><a href="#cb52-26" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>FD_ISSET<span class="op">(</span>cmdfd<span class="op">,</span> <span class="op">&amp;</span>wfd<span class="op">))</span> <span class="op">{</span></span>
<span id="cb52-27"><a href="#cb52-27" aria-hidden="true" tabindex="-1"></a>                        <span class="co">/*</span></span>
<span id="cb52-28"><a href="#cb52-28" aria-hidden="true" tabindex="-1"></a><span class="co">                         * Only write the bytes written by ttywrite() or the</span></span>
<span id="cb52-29"><a href="#cb52-29" aria-hidden="true" tabindex="-1"></a><span class="co">                         * default of 256. This seems to be a reasonable value</span></span>
<span id="cb52-30"><a href="#cb52-30" aria-hidden="true" tabindex="-1"></a><span class="co">                         * for a serial line. Bigger values might clog the I/O.</span></span>
<span id="cb52-31"><a href="#cb52-31" aria-hidden="true" tabindex="-1"></a><span class="co">                         */</span></span>
<span id="cb52-32"><a href="#cb52-32" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">((</span>r <span class="op">=</span> write<span class="op">(</span>cmdfd<span class="op">,</span> s<span class="op">,</span> <span class="op">(</span>n <span class="op">&lt;</span> lim<span class="op">)?</span> n <span class="op">:</span> lim<span class="op">))</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb52-33"><a href="#cb52-33" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">goto</span> write_error<span class="op">;</span></span>
<span id="cb52-34"><a href="#cb52-34" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>r <span class="op">&lt;</span> n<span class="op">)</span> <span class="op">{</span></span>
<span id="cb52-35"><a href="#cb52-35" aria-hidden="true" tabindex="-1"></a>                                <span class="co">/*</span></span>
<span id="cb52-36"><a href="#cb52-36" aria-hidden="true" tabindex="-1"></a><span class="co">                                 * We weren&#39;t able to write out everything.</span></span>
<span id="cb52-37"><a href="#cb52-37" aria-hidden="true" tabindex="-1"></a><span class="co">                                 * This means the buffer is getting full</span></span>
<span id="cb52-38"><a href="#cb52-38" aria-hidden="true" tabindex="-1"></a><span class="co">                                 * again. Empty it.</span></span>
<span id="cb52-39"><a href="#cb52-39" aria-hidden="true" tabindex="-1"></a><span class="co">                                 */</span></span>
<span id="cb52-40"><a href="#cb52-40" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(</span>n <span class="op">&lt;</span> lim<span class="op">)</span></span>
<span id="cb52-41"><a href="#cb52-41" aria-hidden="true" tabindex="-1"></a>                                        lim <span class="op">=</span> ttyread<span class="op">();</span></span>
<span id="cb52-42"><a href="#cb52-42" aria-hidden="true" tabindex="-1"></a>                                n <span class="op">-=</span> r<span class="op">;</span></span>
<span id="cb52-43"><a href="#cb52-43" aria-hidden="true" tabindex="-1"></a>                                s <span class="op">+=</span> r<span class="op">;</span></span>
<span id="cb52-44"><a href="#cb52-44" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb52-45"><a href="#cb52-45" aria-hidden="true" tabindex="-1"></a>                                <span class="co">/* All bytes have been written. */</span></span>
<span id="cb52-46"><a href="#cb52-46" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb52-47"><a href="#cb52-47" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb52-48"><a href="#cb52-48" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb52-49"><a href="#cb52-49" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>FD_ISSET<span class="op">(</span>cmdfd<span class="op">,</span> <span class="op">&amp;</span>rfd<span class="op">))</span></span>
<span id="cb52-50"><a href="#cb52-50" aria-hidden="true" tabindex="-1"></a>                        lim <span class="op">=</span> ttyread<span class="op">();</span></span>
<span id="cb52-51"><a href="#cb52-51" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb52-52"><a href="#cb52-52" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb52-53"><a href="#cb52-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb52-54"><a href="#cb52-54" aria-hidden="true" tabindex="-1"></a>write_error<span class="op">:</span></span>
<span id="cb52-55"><a href="#cb52-55" aria-hidden="true" tabindex="-1"></a>        die<span class="op">(</span><span class="st">&quot;write error on tty: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb52-56"><a href="#cb52-56" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb52-57"><a href="#cb52-57" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>ttyresize</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb53"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb53-1"><a href="#cb53-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb53-2"><a href="#cb53-2" aria-hidden="true" tabindex="-1"></a>ttyresize<span class="op">(</span><span class="dt">int</span> tw<span class="op">,</span> <span class="dt">int</span> th<span class="op">)</span></span>
<span id="cb53-3"><a href="#cb53-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb53-4"><a href="#cb53-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> winsize w<span class="op">;</span></span>
<span id="cb53-5"><a href="#cb53-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-6"><a href="#cb53-6" aria-hidden="true" tabindex="-1"></a>        w<span class="op">.</span>ws_row <span class="op">=</span> term<span class="op">.</span>row<span class="op">;</span></span>
<span id="cb53-7"><a href="#cb53-7" aria-hidden="true" tabindex="-1"></a>        w<span class="op">.</span>ws_col <span class="op">=</span> term<span class="op">.</span>col<span class="op">;</span></span>
<span id="cb53-8"><a href="#cb53-8" aria-hidden="true" tabindex="-1"></a>        w<span class="op">.</span>ws_xpixel <span class="op">=</span> tw<span class="op">;</span></span>
<span id="cb53-9"><a href="#cb53-9" aria-hidden="true" tabindex="-1"></a>        w<span class="op">.</span>ws_ypixel <span class="op">=</span> th<span class="op">;</span></span>
<span id="cb53-10"><a href="#cb53-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>ioctl<span class="op">(</span>cmdfd<span class="op">,</span> TIOCSWINSZ<span class="op">,</span> <span class="op">&amp;</span>w<span class="op">)</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb53-11"><a href="#cb53-11" aria-hidden="true" tabindex="-1"></a>                fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;Couldn&#39;t set window size: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb53-12"><a href="#cb53-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb53-13"><a href="#cb53-13" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>ttyhangup</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb54"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb54-1"><a href="#cb54-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb54-2"><a href="#cb54-2" aria-hidden="true" tabindex="-1"></a>ttyhangup<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb54-3"><a href="#cb54-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb54-4"><a href="#cb54-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* Send SIGHUP to shell */</span></span>
<span id="cb54-5"><a href="#cb54-5" aria-hidden="true" tabindex="-1"></a>        kill<span class="op">(</span>pid<span class="op">,</span> SIGHUP<span class="op">);</span></span>
<span id="cb54-6"><a href="#cb54-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb54-7"><a href="#cb54-7" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tattrset</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb55"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb55-1"><a href="#cb55-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb55-2"><a href="#cb55-2" aria-hidden="true" tabindex="-1"></a>tattrset<span class="op">(</span><span class="dt">int</span> attr<span class="op">)</span></span>
<span id="cb55-3"><a href="#cb55-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb55-4"><a href="#cb55-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i<span class="op">,</span> j<span class="op">;</span></span>
<span id="cb55-5"><a href="#cb55-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb55-6"><a href="#cb55-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb55-7"><a href="#cb55-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span>j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">;</span> j<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb55-8"><a href="#cb55-8" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>line<span class="op">[</span>i<span class="op">][</span>j<span class="op">].</span>mode <span class="op">&amp;</span> attr<span class="op">)</span></span>
<span id="cb55-9"><a href="#cb55-9" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb55-10"><a href="#cb55-10" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb55-11"><a href="#cb55-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb55-12"><a href="#cb55-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb55-13"><a href="#cb55-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb55-14"><a href="#cb55-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb55-15"><a href="#cb55-15" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tsetdirt</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb56"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb56-1"><a href="#cb56-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb56-2"><a href="#cb56-2" aria-hidden="true" tabindex="-1"></a>tsetdirt<span class="op">(</span><span class="dt">int</span> top<span class="op">,</span> <span class="dt">int</span> bot<span class="op">)</span></span>
<span id="cb56-3"><a href="#cb56-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb56-4"><a href="#cb56-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i<span class="op">;</span></span>
<span id="cb56-5"><a href="#cb56-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb56-6"><a href="#cb56-6" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>top<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb56-7"><a href="#cb56-7" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>bot<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb56-8"><a href="#cb56-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb56-9"><a href="#cb56-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> top<span class="op">;</span> i <span class="op">&lt;=</span> bot<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb56-10"><a href="#cb56-10" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>dirty<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb56-11"><a href="#cb56-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb56-12"><a href="#cb56-12" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tsetdirtattr</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb57"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb57-1"><a href="#cb57-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb57-2"><a href="#cb57-2" aria-hidden="true" tabindex="-1"></a>tsetdirtattr<span class="op">(</span><span class="dt">int</span> attr<span class="op">)</span></span>
<span id="cb57-3"><a href="#cb57-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb57-4"><a href="#cb57-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i<span class="op">,</span> j<span class="op">;</span></span>
<span id="cb57-5"><a href="#cb57-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb57-6"><a href="#cb57-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb57-7"><a href="#cb57-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span>j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">;</span> j<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb57-8"><a href="#cb57-8" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>line<span class="op">[</span>i<span class="op">][</span>j<span class="op">].</span>mode <span class="op">&amp;</span> attr<span class="op">)</span> <span class="op">{</span></span>
<span id="cb57-9"><a href="#cb57-9" aria-hidden="true" tabindex="-1"></a>                                tsetdirt<span class="op">(</span>i<span class="op">,</span> i<span class="op">);</span></span>
<span id="cb57-10"><a href="#cb57-10" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb57-11"><a href="#cb57-11" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb57-12"><a href="#cb57-12" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb57-13"><a href="#cb57-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb57-14"><a href="#cb57-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb57-15"><a href="#cb57-15" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tfulldirt</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb58"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb58-1"><a href="#cb58-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb58-2"><a href="#cb58-2" aria-hidden="true" tabindex="-1"></a>tfulldirt<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb58-3"><a href="#cb58-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb58-4"><a href="#cb58-4" aria-hidden="true" tabindex="-1"></a>        tsetdirt<span class="op">(</span><span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb58-5"><a href="#cb58-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb58-6"><a href="#cb58-6" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tcursor</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb59"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb59-1"><a href="#cb59-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb59-2"><a href="#cb59-2" aria-hidden="true" tabindex="-1"></a>tcursor<span class="op">(</span><span class="dt">int</span> mode<span class="op">)</span></span>
<span id="cb59-3"><a href="#cb59-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb59-4"><a href="#cb59-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">static</span> TCursor c<span class="op">[</span><span class="dv">2</span><span class="op">];</span></span>
<span id="cb59-5"><a href="#cb59-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> alt <span class="op">=</span> IS_SET<span class="op">(</span>MODE_ALTSCREEN<span class="op">);</span></span>
<span id="cb59-6"><a href="#cb59-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb59-7"><a href="#cb59-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>mode <span class="op">==</span> CURSOR_SAVE<span class="op">)</span> <span class="op">{</span></span>
<span id="cb59-8"><a href="#cb59-8" aria-hidden="true" tabindex="-1"></a>                c<span class="op">[</span>alt<span class="op">]</span> <span class="op">=</span> term<span class="op">.</span>c<span class="op">;</span></span>
<span id="cb59-9"><a href="#cb59-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>mode <span class="op">==</span> CURSOR_LOAD<span class="op">)</span> <span class="op">{</span></span>
<span id="cb59-10"><a href="#cb59-10" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>c <span class="op">=</span> c<span class="op">[</span>alt<span class="op">];</span></span>
<span id="cb59-11"><a href="#cb59-11" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span>c<span class="op">[</span>alt<span class="op">].</span>x<span class="op">,</span> c<span class="op">[</span>alt<span class="op">].</span>y<span class="op">);</span></span>
<span id="cb59-12"><a href="#cb59-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb59-13"><a href="#cb59-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb59-14"><a href="#cb59-14" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>treset</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb60"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb60-1"><a href="#cb60-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb60-2"><a href="#cb60-2" aria-hidden="true" tabindex="-1"></a>treset<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb60-3"><a href="#cb60-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb60-4"><a href="#cb60-4" aria-hidden="true" tabindex="-1"></a>        uint i<span class="op">;</span></span>
<span id="cb60-5"><a href="#cb60-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb60-6"><a href="#cb60-6" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>c <span class="op">=</span> <span class="op">(</span>TCursor<span class="op">){{</span></span>
<span id="cb60-7"><a href="#cb60-7" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span>mode <span class="op">=</span> ATTR_NULL<span class="op">,</span></span>
<span id="cb60-8"><a href="#cb60-8" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span>fg <span class="op">=</span> defaultfg<span class="op">,</span></span>
<span id="cb60-9"><a href="#cb60-9" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span>bg <span class="op">=</span> defaultbg</span>
<span id="cb60-10"><a href="#cb60-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">},</span> <span class="op">.</span>x <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> <span class="op">.</span>y <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> <span class="op">.</span>state <span class="op">=</span> CURSOR_DEFAULT<span class="op">};</span></span>
<span id="cb60-11"><a href="#cb60-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb60-12"><a href="#cb60-12" aria-hidden="true" tabindex="-1"></a>        memset<span class="op">(</span>term<span class="op">.</span>tabs<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(*</span>term<span class="op">.</span>tabs<span class="op">));</span></span>
<span id="cb60-13"><a href="#cb60-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> tabspaces<span class="op">;</span> i <span class="op">&lt;</span> term<span class="op">.</span>col<span class="op">;</span> i <span class="op">+=</span> tabspaces<span class="op">)</span></span>
<span id="cb60-14"><a href="#cb60-14" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>tabs<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb60-15"><a href="#cb60-15" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>top <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb60-16"><a href="#cb60-16" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>bot <span class="op">=</span> term<span class="op">.</span>row <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb60-17"><a href="#cb60-17" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>mode <span class="op">=</span> MODE_WRAP<span class="op">|</span>MODE_UTF8<span class="op">;</span></span>
<span id="cb60-18"><a href="#cb60-18" aria-hidden="true" tabindex="-1"></a>        memset<span class="op">(</span>term<span class="op">.</span>trantbl<span class="op">,</span> CS_USA<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>term<span class="op">.</span>trantbl<span class="op">));</span></span>
<span id="cb60-19"><a href="#cb60-19" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>charset <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb60-20"><a href="#cb60-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb60-21"><a href="#cb60-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">2</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb60-22"><a href="#cb60-22" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb60-23"><a href="#cb60-23" aria-hidden="true" tabindex="-1"></a>                tcursor<span class="op">(</span>CURSOR_SAVE<span class="op">);</span></span>
<span id="cb60-24"><a href="#cb60-24" aria-hidden="true" tabindex="-1"></a>                tclearregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb60-25"><a href="#cb60-25" aria-hidden="true" tabindex="-1"></a>                tswapscreen<span class="op">();</span></span>
<span id="cb60-26"><a href="#cb60-26" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb60-27"><a href="#cb60-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb60-28"><a href="#cb60-28" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tnew</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb61"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb61-1"><a href="#cb61-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb61-2"><a href="#cb61-2" aria-hidden="true" tabindex="-1"></a>tnew<span class="op">(</span><span class="dt">int</span> col<span class="op">,</span> <span class="dt">int</span> row<span class="op">)</span></span>
<span id="cb61-3"><a href="#cb61-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb61-4"><a href="#cb61-4" aria-hidden="true" tabindex="-1"></a>        term <span class="op">=</span> <span class="op">(</span>Term<span class="op">){</span> <span class="op">.</span>c <span class="op">=</span> <span class="op">{</span> <span class="op">.</span>attr <span class="op">=</span> <span class="op">{</span> <span class="op">.</span>fg <span class="op">=</span> defaultfg<span class="op">,</span> <span class="op">.</span>bg <span class="op">=</span> defaultbg <span class="op">}</span> <span class="op">}</span> <span class="op">};</span></span>
<span id="cb61-5"><a href="#cb61-5" aria-hidden="true" tabindex="-1"></a>        tresize<span class="op">(</span>col<span class="op">,</span> row<span class="op">);</span></span>
<span id="cb61-6"><a href="#cb61-6" aria-hidden="true" tabindex="-1"></a>        treset<span class="op">();</span></span>
<span id="cb61-7"><a href="#cb61-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb61-8"><a href="#cb61-8" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tswapscreen</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb62"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb62-1"><a href="#cb62-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb62-2"><a href="#cb62-2" aria-hidden="true" tabindex="-1"></a>tswapscreen<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb62-3"><a href="#cb62-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb62-4"><a href="#cb62-4" aria-hidden="true" tabindex="-1"></a>        Line <span class="op">*</span>tmp <span class="op">=</span> term<span class="op">.</span>line<span class="op">;</span></span>
<span id="cb62-5"><a href="#cb62-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-6"><a href="#cb62-6" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>line <span class="op">=</span> term<span class="op">.</span>alt<span class="op">;</span></span>
<span id="cb62-7"><a href="#cb62-7" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>alt <span class="op">=</span> tmp<span class="op">;</span></span>
<span id="cb62-8"><a href="#cb62-8" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>mode <span class="op">^=</span> MODE_ALTSCREEN<span class="op">;</span></span>
<span id="cb62-9"><a href="#cb62-9" aria-hidden="true" tabindex="-1"></a>        tfulldirt<span class="op">();</span></span>
<span id="cb62-10"><a href="#cb62-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb62-11"><a href="#cb62-11" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tscrolldown</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb63"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb63-1"><a href="#cb63-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb63-2"><a href="#cb63-2" aria-hidden="true" tabindex="-1"></a>tscrolldown<span class="op">(</span><span class="dt">int</span> orig<span class="op">,</span> <span class="dt">int</span> n<span class="op">)</span></span>
<span id="cb63-3"><a href="#cb63-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb63-4"><a href="#cb63-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i<span class="op">;</span></span>
<span id="cb63-5"><a href="#cb63-5" aria-hidden="true" tabindex="-1"></a>        Line temp<span class="op">;</span></span>
<span id="cb63-6"><a href="#cb63-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb63-7"><a href="#cb63-7" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>n<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>bot<span class="op">-</span>orig<span class="op">+</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb63-8"><a href="#cb63-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb63-9"><a href="#cb63-9" aria-hidden="true" tabindex="-1"></a>        tsetdirt<span class="op">(</span>orig<span class="op">,</span> term<span class="op">.</span>bot<span class="op">-</span>n<span class="op">);</span></span>
<span id="cb63-10"><a href="#cb63-10" aria-hidden="true" tabindex="-1"></a>        tclearregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>bot<span class="op">-</span>n<span class="op">+</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>bot<span class="op">);</span></span>
<span id="cb63-11"><a href="#cb63-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb63-12"><a href="#cb63-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> term<span class="op">.</span>bot<span class="op">;</span> i <span class="op">&gt;=</span> orig<span class="op">+</span>n<span class="op">;</span> i<span class="op">--)</span> <span class="op">{</span></span>
<span id="cb63-13"><a href="#cb63-13" aria-hidden="true" tabindex="-1"></a>                temp <span class="op">=</span> term<span class="op">.</span>line<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb63-14"><a href="#cb63-14" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>line<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> term<span class="op">.</span>line<span class="op">[</span>i<span class="op">-</span>n<span class="op">];</span></span>
<span id="cb63-15"><a href="#cb63-15" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>line<span class="op">[</span>i<span class="op">-</span>n<span class="op">]</span> <span class="op">=</span> temp<span class="op">;</span></span>
<span id="cb63-16"><a href="#cb63-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb63-17"><a href="#cb63-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb63-18"><a href="#cb63-18" aria-hidden="true" tabindex="-1"></a>        selscroll<span class="op">(</span>orig<span class="op">,</span> n<span class="op">);</span></span>
<span id="cb63-19"><a href="#cb63-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb63-20"><a href="#cb63-20" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tscrollup</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb64"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb64-1"><a href="#cb64-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb64-2"><a href="#cb64-2" aria-hidden="true" tabindex="-1"></a>tscrollup<span class="op">(</span><span class="dt">int</span> orig<span class="op">,</span> <span class="dt">int</span> n<span class="op">)</span></span>
<span id="cb64-3"><a href="#cb64-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb64-4"><a href="#cb64-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i<span class="op">;</span></span>
<span id="cb64-5"><a href="#cb64-5" aria-hidden="true" tabindex="-1"></a>        Line temp<span class="op">;</span></span>
<span id="cb64-6"><a href="#cb64-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb64-7"><a href="#cb64-7" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>n<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>bot<span class="op">-</span>orig<span class="op">+</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb64-8"><a href="#cb64-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb64-9"><a href="#cb64-9" aria-hidden="true" tabindex="-1"></a>        tclearregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> orig<span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">,</span> orig<span class="op">+</span>n<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb64-10"><a href="#cb64-10" aria-hidden="true" tabindex="-1"></a>        tsetdirt<span class="op">(</span>orig<span class="op">+</span>n<span class="op">,</span> term<span class="op">.</span>bot<span class="op">);</span></span>
<span id="cb64-11"><a href="#cb64-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb64-12"><a href="#cb64-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> orig<span class="op">;</span> i <span class="op">&lt;=</span> term<span class="op">.</span>bot<span class="op">-</span>n<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb64-13"><a href="#cb64-13" aria-hidden="true" tabindex="-1"></a>                temp <span class="op">=</span> term<span class="op">.</span>line<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb64-14"><a href="#cb64-14" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>line<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> term<span class="op">.</span>line<span class="op">[</span>i<span class="op">+</span>n<span class="op">];</span></span>
<span id="cb64-15"><a href="#cb64-15" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>line<span class="op">[</span>i<span class="op">+</span>n<span class="op">]</span> <span class="op">=</span> temp<span class="op">;</span></span>
<span id="cb64-16"><a href="#cb64-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb64-17"><a href="#cb64-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb64-18"><a href="#cb64-18" aria-hidden="true" tabindex="-1"></a>        selscroll<span class="op">(</span>orig<span class="op">,</span> <span class="op">-</span>n<span class="op">);</span></span>
<span id="cb64-19"><a href="#cb64-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb64-20"><a href="#cb64-20" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>selscroll</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb65"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb65-1"><a href="#cb65-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb65-2"><a href="#cb65-2" aria-hidden="true" tabindex="-1"></a>selscroll<span class="op">(</span><span class="dt">int</span> orig<span class="op">,</span> <span class="dt">int</span> n<span class="op">)</span></span>
<span id="cb65-3"><a href="#cb65-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb65-4"><a href="#cb65-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>ob<span class="op">.</span>x <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb65-5"><a href="#cb65-5" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb65-6"><a href="#cb65-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb65-7"><a href="#cb65-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>BETWEEN<span class="op">(</span>sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">,</span> orig<span class="op">,</span> term<span class="op">.</span>bot<span class="op">)</span> <span class="op">!=</span> BETWEEN<span class="op">(</span>sel<span class="op">.</span>ne<span class="op">.</span>y<span class="op">,</span> orig<span class="op">,</span> term<span class="op">.</span>bot<span class="op">))</span> <span class="op">{</span></span>
<span id="cb65-8"><a href="#cb65-8" aria-hidden="true" tabindex="-1"></a>                selclear<span class="op">();</span></span>
<span id="cb65-9"><a href="#cb65-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>BETWEEN<span class="op">(</span>sel<span class="op">.</span>nb<span class="op">.</span>y<span class="op">,</span> orig<span class="op">,</span> term<span class="op">.</span>bot<span class="op">))</span> <span class="op">{</span></span>
<span id="cb65-10"><a href="#cb65-10" aria-hidden="true" tabindex="-1"></a>                sel<span class="op">.</span>ob<span class="op">.</span>y <span class="op">+=</span> n<span class="op">;</span></span>
<span id="cb65-11"><a href="#cb65-11" aria-hidden="true" tabindex="-1"></a>                sel<span class="op">.</span>oe<span class="op">.</span>y <span class="op">+=</span> n<span class="op">;</span></span>
<span id="cb65-12"><a href="#cb65-12" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>sel<span class="op">.</span>ob<span class="op">.</span>y <span class="op">&lt;</span> term<span class="op">.</span>top <span class="op">||</span> sel<span class="op">.</span>ob<span class="op">.</span>y <span class="op">&gt;</span> term<span class="op">.</span>bot <span class="op">||</span></span>
<span id="cb65-13"><a href="#cb65-13" aria-hidden="true" tabindex="-1"></a>                    sel<span class="op">.</span>oe<span class="op">.</span>y <span class="op">&lt;</span> term<span class="op">.</span>top <span class="op">||</span> sel<span class="op">.</span>oe<span class="op">.</span>y <span class="op">&gt;</span> term<span class="op">.</span>bot<span class="op">)</span> <span class="op">{</span></span>
<span id="cb65-14"><a href="#cb65-14" aria-hidden="true" tabindex="-1"></a>                        selclear<span class="op">();</span></span>
<span id="cb65-15"><a href="#cb65-15" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb65-16"><a href="#cb65-16" aria-hidden="true" tabindex="-1"></a>                        selnormalize<span class="op">();</span></span>
<span id="cb65-17"><a href="#cb65-17" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb65-18"><a href="#cb65-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb65-19"><a href="#cb65-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb65-20"><a href="#cb65-20" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tnewline</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb66"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb66-1"><a href="#cb66-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb66-2"><a href="#cb66-2" aria-hidden="true" tabindex="-1"></a>tnewline<span class="op">(</span><span class="dt">int</span> first_col<span class="op">)</span></span>
<span id="cb66-3"><a href="#cb66-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb66-4"><a href="#cb66-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> y <span class="op">=</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">;</span></span>
<span id="cb66-5"><a href="#cb66-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb66-6"><a href="#cb66-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>y <span class="op">==</span> term<span class="op">.</span>bot<span class="op">)</span> <span class="op">{</span></span>
<span id="cb66-7"><a href="#cb66-7" aria-hidden="true" tabindex="-1"></a>                tscrollup<span class="op">(</span>term<span class="op">.</span>top<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb66-8"><a href="#cb66-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb66-9"><a href="#cb66-9" aria-hidden="true" tabindex="-1"></a>                y<span class="op">++;</span></span>
<span id="cb66-10"><a href="#cb66-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb66-11"><a href="#cb66-11" aria-hidden="true" tabindex="-1"></a>        tmoveto<span class="op">(</span>first_col <span class="op">?</span> <span class="dv">0</span> <span class="op">:</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> y<span class="op">);</span></span>
<span id="cb66-12"><a href="#cb66-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb66-13"><a href="#cb66-13" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>csiparse</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb67"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb67-1"><a href="#cb67-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb67-2"><a href="#cb67-2" aria-hidden="true" tabindex="-1"></a>csiparse<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb67-3"><a href="#cb67-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb67-4"><a href="#cb67-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>p <span class="op">=</span> csiescseq<span class="op">.</span>buf<span class="op">,</span> <span class="op">*</span>np<span class="op">;</span></span>
<span id="cb67-5"><a href="#cb67-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">long</span> <span class="dt">int</span> v<span class="op">;</span></span>
<span id="cb67-6"><a href="#cb67-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb67-7"><a href="#cb67-7" aria-hidden="true" tabindex="-1"></a>        csiescseq<span class="op">.</span>narg <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb67-8"><a href="#cb67-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(*</span>p <span class="op">==</span> <span class="ch">&#39;?&#39;</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb67-9"><a href="#cb67-9" aria-hidden="true" tabindex="-1"></a>                csiescseq<span class="op">.</span>priv <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb67-10"><a href="#cb67-10" aria-hidden="true" tabindex="-1"></a>                p<span class="op">++;</span></span>
<span id="cb67-11"><a href="#cb67-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb67-12"><a href="#cb67-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb67-13"><a href="#cb67-13" aria-hidden="true" tabindex="-1"></a>        csiescseq<span class="op">.</span>buf<span class="op">[</span>csiescseq<span class="op">.</span>len<span class="op">]</span> <span class="op">=</span> <span class="ch">&#39;\0&#39;</span><span class="op">;</span></span>
<span id="cb67-14"><a href="#cb67-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(</span>p <span class="op">&lt;</span> csiescseq<span class="op">.</span>buf<span class="op">+</span>csiescseq<span class="op">.</span>len<span class="op">)</span> <span class="op">{</span></span>
<span id="cb67-15"><a href="#cb67-15" aria-hidden="true" tabindex="-1"></a>                np <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb67-16"><a href="#cb67-16" aria-hidden="true" tabindex="-1"></a>                v <span class="op">=</span> strtol<span class="op">(</span>p<span class="op">,</span> <span class="op">&amp;</span>np<span class="op">,</span> <span class="dv">10</span><span class="op">);</span></span>
<span id="cb67-17"><a href="#cb67-17" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>np <span class="op">==</span> p<span class="op">)</span></span>
<span id="cb67-18"><a href="#cb67-18" aria-hidden="true" tabindex="-1"></a>                        v <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb67-19"><a href="#cb67-19" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>v <span class="op">==</span> LONG_MAX <span class="op">||</span> v <span class="op">==</span> LONG_MIN<span class="op">)</span></span>
<span id="cb67-20"><a href="#cb67-20" aria-hidden="true" tabindex="-1"></a>                        v <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb67-21"><a href="#cb67-21" aria-hidden="true" tabindex="-1"></a>                csiescseq<span class="op">.</span>arg<span class="op">[</span>csiescseq<span class="op">.</span>narg<span class="op">++]</span> <span class="op">=</span> v<span class="op">;</span></span>
<span id="cb67-22"><a href="#cb67-22" aria-hidden="true" tabindex="-1"></a>                p <span class="op">=</span> np<span class="op">;</span></span>
<span id="cb67-23"><a href="#cb67-23" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(*</span>p <span class="op">!=</span> <span class="ch">&#39;;&#39;</span> <span class="op">||</span> csiescseq<span class="op">.</span>narg <span class="op">==</span> ESC_ARG_SIZ<span class="op">)</span></span>
<span id="cb67-24"><a href="#cb67-24" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb67-25"><a href="#cb67-25" aria-hidden="true" tabindex="-1"></a>                p<span class="op">++;</span></span>
<span id="cb67-26"><a href="#cb67-26" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb67-27"><a href="#cb67-27" aria-hidden="true" tabindex="-1"></a>        csiescseq<span class="op">.</span>mode<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="op">*</span>p<span class="op">++;</span></span>
<span id="cb67-28"><a href="#cb67-28" aria-hidden="true" tabindex="-1"></a>        csiescseq<span class="op">.</span>mode<span class="op">[</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="op">(</span>p <span class="op">&lt;</span> csiescseq<span class="op">.</span>buf<span class="op">+</span>csiescseq<span class="op">.</span>len<span class="op">)</span> <span class="op">?</span> <span class="op">*</span>p <span class="op">:</span> <span class="ch">&#39;\0&#39;</span><span class="op">;</span></span>
<span id="cb67-29"><a href="#cb67-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb67-30"><a href="#cb67-30" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tmoveato</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb68"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb68-1"><a href="#cb68-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* for absolute user moves, when decom is set */</span></span>
<span id="cb68-2"><a href="#cb68-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb68-3"><a href="#cb68-3" aria-hidden="true" tabindex="-1"></a>tmoveato<span class="op">(</span><span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">)</span></span>
<span id="cb68-4"><a href="#cb68-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb68-5"><a href="#cb68-5" aria-hidden="true" tabindex="-1"></a>        tmoveto<span class="op">(</span>x<span class="op">,</span> y <span class="op">+</span> <span class="op">((</span>term<span class="op">.</span>c<span class="op">.</span>state <span class="op">&amp;</span> CURSOR_ORIGIN<span class="op">)</span> <span class="op">?</span> term<span class="op">.</span>top<span class="op">:</span> <span class="dv">0</span><span class="op">));</span></span>
<span id="cb68-6"><a href="#cb68-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb68-7"><a href="#cb68-7" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tmoveto</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb69"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb69-1"><a href="#cb69-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb69-2"><a href="#cb69-2" aria-hidden="true" tabindex="-1"></a>tmoveto<span class="op">(</span><span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">)</span></span>
<span id="cb69-3"><a href="#cb69-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb69-4"><a href="#cb69-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> miny<span class="op">,</span> maxy<span class="op">;</span></span>
<span id="cb69-5"><a href="#cb69-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb69-6"><a href="#cb69-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>state <span class="op">&amp;</span> CURSOR_ORIGIN<span class="op">)</span> <span class="op">{</span></span>
<span id="cb69-7"><a href="#cb69-7" aria-hidden="true" tabindex="-1"></a>                miny <span class="op">=</span> term<span class="op">.</span>top<span class="op">;</span></span>
<span id="cb69-8"><a href="#cb69-8" aria-hidden="true" tabindex="-1"></a>                maxy <span class="op">=</span> term<span class="op">.</span>bot<span class="op">;</span></span>
<span id="cb69-9"><a href="#cb69-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb69-10"><a href="#cb69-10" aria-hidden="true" tabindex="-1"></a>                miny <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb69-11"><a href="#cb69-11" aria-hidden="true" tabindex="-1"></a>                maxy <span class="op">=</span> term<span class="op">.</span>row <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb69-12"><a href="#cb69-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb69-13"><a href="#cb69-13" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>c<span class="op">.</span>state <span class="op">&amp;=</span> <span class="op">~</span>CURSOR_WRAPNEXT<span class="op">;</span></span>
<span id="cb69-14"><a href="#cb69-14" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>c<span class="op">.</span>x <span class="op">=</span> LIMIT<span class="op">(</span>x<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb69-15"><a href="#cb69-15" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>c<span class="op">.</span>y <span class="op">=</span> LIMIT<span class="op">(</span>y<span class="op">,</span> miny<span class="op">,</span> maxy<span class="op">);</span></span>
<span id="cb69-16"><a href="#cb69-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb69-17"><a href="#cb69-17" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tsetchar</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb70"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb70-1"><a href="#cb70-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb70-2"><a href="#cb70-2" aria-hidden="true" tabindex="-1"></a>tsetchar<span class="op">(</span>Rune u<span class="op">,</span> <span class="dt">const</span> Glyph <span class="op">*</span>attr<span class="op">,</span> <span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">)</span></span>
<span id="cb70-3"><a href="#cb70-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb70-4"><a href="#cb70-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">static</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>vt100_0<span class="op">[</span><span class="dv">62</span><span class="op">]</span> <span class="op">=</span> <span class="op">{</span> <span class="co">/* 0x41 - 0x7e */</span></span>
<span id="cb70-5"><a href="#cb70-5" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;↑&quot;</span><span class="op">,</span> <span class="st">&quot;↓&quot;</span><span class="op">,</span> <span class="st">&quot;→&quot;</span><span class="op">,</span> <span class="st">&quot;←&quot;</span><span class="op">,</span> <span class="st">&quot;█&quot;</span><span class="op">,</span> <span class="st">&quot;▚&quot;</span><span class="op">,</span> <span class="st">&quot;☃&quot;</span><span class="op">,</span> <span class="co">/* A - G */</span></span>
<span id="cb70-6"><a href="#cb70-6" aria-hidden="true" tabindex="-1"></a>                <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="co">/* H - O */</span></span>
<span id="cb70-7"><a href="#cb70-7" aria-hidden="true" tabindex="-1"></a>                <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="co">/* P - W */</span></span>
<span id="cb70-8"><a href="#cb70-8" aria-hidden="true" tabindex="-1"></a>                <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="st">&quot; &quot;</span><span class="op">,</span> <span class="co">/* X - _ */</span></span>
<span id="cb70-9"><a href="#cb70-9" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;◆&quot;</span><span class="op">,</span> <span class="st">&quot;▒&quot;</span><span class="op">,</span> <span class="st">&quot;␉&quot;</span><span class="op">,</span> <span class="st">&quot;␌&quot;</span><span class="op">,</span> <span class="st">&quot;␍&quot;</span><span class="op">,</span> <span class="st">&quot;␊&quot;</span><span class="op">,</span> <span class="st">&quot;°&quot;</span><span class="op">,</span> <span class="st">&quot;±&quot;</span><span class="op">,</span> <span class="co">/* ` - g */</span></span>
<span id="cb70-10"><a href="#cb70-10" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;␤&quot;</span><span class="op">,</span> <span class="st">&quot;␋&quot;</span><span class="op">,</span> <span class="st">&quot;┘&quot;</span><span class="op">,</span> <span class="st">&quot;┐&quot;</span><span class="op">,</span> <span class="st">&quot;┌&quot;</span><span class="op">,</span> <span class="st">&quot;└&quot;</span><span class="op">,</span> <span class="st">&quot;┼&quot;</span><span class="op">,</span> <span class="st">&quot;⎺&quot;</span><span class="op">,</span> <span class="co">/* h - o */</span></span>
<span id="cb70-11"><a href="#cb70-11" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;⎻&quot;</span><span class="op">,</span> <span class="st">&quot;─&quot;</span><span class="op">,</span> <span class="st">&quot;⎼&quot;</span><span class="op">,</span> <span class="st">&quot;⎽&quot;</span><span class="op">,</span> <span class="st">&quot;├&quot;</span><span class="op">,</span> <span class="st">&quot;┤&quot;</span><span class="op">,</span> <span class="st">&quot;┴&quot;</span><span class="op">,</span> <span class="st">&quot;┬&quot;</span><span class="op">,</span> <span class="co">/* p - w */</span></span>
<span id="cb70-12"><a href="#cb70-12" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;│&quot;</span><span class="op">,</span> <span class="st">&quot;≤&quot;</span><span class="op">,</span> <span class="st">&quot;≥&quot;</span><span class="op">,</span> <span class="st">&quot;π&quot;</span><span class="op">,</span> <span class="st">&quot;≠&quot;</span><span class="op">,</span> <span class="st">&quot;£&quot;</span><span class="op">,</span> <span class="st">&quot;·&quot;</span><span class="op">,</span> <span class="co">/* x - ~ */</span></span>
<span id="cb70-13"><a href="#cb70-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb70-14"><a href="#cb70-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb70-15"><a href="#cb70-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*</span></span>
<span id="cb70-16"><a href="#cb70-16" aria-hidden="true" tabindex="-1"></a><span class="co">         * The table is proudly stolen from rxvt.</span></span>
<span id="cb70-17"><a href="#cb70-17" aria-hidden="true" tabindex="-1"></a><span class="co">         */</span></span>
<span id="cb70-18"><a href="#cb70-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>trantbl<span class="op">[</span>term<span class="op">.</span>charset<span class="op">]</span> <span class="op">==</span> CS_GRAPHIC0 <span class="op">&amp;&amp;</span></span>
<span id="cb70-19"><a href="#cb70-19" aria-hidden="true" tabindex="-1"></a>           BETWEEN<span class="op">(</span>u<span class="op">,</span> <span class="bn">0x41</span><span class="op">,</span> <span class="bn">0x7e</span><span class="op">)</span> <span class="op">&amp;&amp;</span> vt100_0<span class="op">[</span>u <span class="op">-</span> <span class="bn">0x41</span><span class="op">])</span></span>
<span id="cb70-20"><a href="#cb70-20" aria-hidden="true" tabindex="-1"></a>                utf8decode<span class="op">(</span>vt100_0<span class="op">[</span>u <span class="op">-</span> <span class="bn">0x41</span><span class="op">],</span> <span class="op">&amp;</span>u<span class="op">,</span> UTF_SIZ<span class="op">);</span></span>
<span id="cb70-21"><a href="#cb70-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb70-22"><a href="#cb70-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>x<span class="op">].</span>mode <span class="op">&amp;</span> ATTR_WIDE<span class="op">)</span> <span class="op">{</span></span>
<span id="cb70-23"><a href="#cb70-23" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>x<span class="op">+</span><span class="dv">1</span> <span class="op">&lt;</span> term<span class="op">.</span>col<span class="op">)</span> <span class="op">{</span></span>
<span id="cb70-24"><a href="#cb70-24" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>x<span class="op">+</span><span class="dv">1</span><span class="op">].</span>u <span class="op">=</span> <span class="ch">&#39; &#39;</span><span class="op">;</span></span>
<span id="cb70-25"><a href="#cb70-25" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>x<span class="op">+</span><span class="dv">1</span><span class="op">].</span>mode <span class="op">&amp;=</span> <span class="op">~</span>ATTR_WDUMMY<span class="op">;</span></span>
<span id="cb70-26"><a href="#cb70-26" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb70-27"><a href="#cb70-27" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>x<span class="op">].</span>mode <span class="op">&amp;</span> ATTR_WDUMMY<span class="op">)</span> <span class="op">{</span></span>
<span id="cb70-28"><a href="#cb70-28" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>x<span class="op">-</span><span class="dv">1</span><span class="op">].</span>u <span class="op">=</span> <span class="ch">&#39; &#39;</span><span class="op">;</span></span>
<span id="cb70-29"><a href="#cb70-29" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>x<span class="op">-</span><span class="dv">1</span><span class="op">].</span>mode <span class="op">&amp;=</span> <span class="op">~</span>ATTR_WIDE<span class="op">;</span></span>
<span id="cb70-30"><a href="#cb70-30" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb70-31"><a href="#cb70-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb70-32"><a href="#cb70-32" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>dirty<span class="op">[</span>y<span class="op">]</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb70-33"><a href="#cb70-33" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>x<span class="op">]</span> <span class="op">=</span> <span class="op">*</span>attr<span class="op">;</span></span>
<span id="cb70-34"><a href="#cb70-34" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>x<span class="op">].</span>u <span class="op">=</span> u<span class="op">;</span></span>
<span id="cb70-35"><a href="#cb70-35" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb70-36"><a href="#cb70-36" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tclearregion</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb71"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb71-1"><a href="#cb71-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb71-2"><a href="#cb71-2" aria-hidden="true" tabindex="-1"></a>tclearregion<span class="op">(</span><span class="dt">int</span> x1<span class="op">,</span> <span class="dt">int</span> y1<span class="op">,</span> <span class="dt">int</span> x2<span class="op">,</span> <span class="dt">int</span> y2<span class="op">)</span></span>
<span id="cb71-3"><a href="#cb71-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb71-4"><a href="#cb71-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> x<span class="op">,</span> y<span class="op">,</span> temp<span class="op">;</span></span>
<span id="cb71-5"><a href="#cb71-5" aria-hidden="true" tabindex="-1"></a>        Glyph <span class="op">*</span>gp<span class="op">;</span></span>
<span id="cb71-6"><a href="#cb71-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb71-7"><a href="#cb71-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>x1 <span class="op">&gt;</span> x2<span class="op">)</span></span>
<span id="cb71-8"><a href="#cb71-8" aria-hidden="true" tabindex="-1"></a>                temp <span class="op">=</span> x1<span class="op">,</span> x1 <span class="op">=</span> x2<span class="op">,</span> x2 <span class="op">=</span> temp<span class="op">;</span></span>
<span id="cb71-9"><a href="#cb71-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>y1 <span class="op">&gt;</span> y2<span class="op">)</span></span>
<span id="cb71-10"><a href="#cb71-10" aria-hidden="true" tabindex="-1"></a>                temp <span class="op">=</span> y1<span class="op">,</span> y1 <span class="op">=</span> y2<span class="op">,</span> y2 <span class="op">=</span> temp<span class="op">;</span></span>
<span id="cb71-11"><a href="#cb71-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb71-12"><a href="#cb71-12" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>x1<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb71-13"><a href="#cb71-13" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>x2<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb71-14"><a href="#cb71-14" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>y1<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb71-15"><a href="#cb71-15" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>y2<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb71-16"><a href="#cb71-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb71-17"><a href="#cb71-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>y <span class="op">=</span> y1<span class="op">;</span> y <span class="op">&lt;=</span> y2<span class="op">;</span> y<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb71-18"><a href="#cb71-18" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>dirty<span class="op">[</span>y<span class="op">]</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb71-19"><a href="#cb71-19" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span>x <span class="op">=</span> x1<span class="op">;</span> x <span class="op">&lt;=</span> x2<span class="op">;</span> x<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb71-20"><a href="#cb71-20" aria-hidden="true" tabindex="-1"></a>                        gp <span class="op">=</span> <span class="op">&amp;</span>term<span class="op">.</span>line<span class="op">[</span>y<span class="op">][</span>x<span class="op">];</span></span>
<span id="cb71-21"><a href="#cb71-21" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>selected<span class="op">(</span>x<span class="op">,</span> y<span class="op">))</span></span>
<span id="cb71-22"><a href="#cb71-22" aria-hidden="true" tabindex="-1"></a>                                selclear<span class="op">();</span></span>
<span id="cb71-23"><a href="#cb71-23" aria-hidden="true" tabindex="-1"></a>                        gp<span class="op">-&gt;</span>fg <span class="op">=</span> term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>fg<span class="op">;</span></span>
<span id="cb71-24"><a href="#cb71-24" aria-hidden="true" tabindex="-1"></a>                        gp<span class="op">-&gt;</span>bg <span class="op">=</span> term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>bg<span class="op">;</span></span>
<span id="cb71-25"><a href="#cb71-25" aria-hidden="true" tabindex="-1"></a>                        gp<span class="op">-&gt;</span>mode <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb71-26"><a href="#cb71-26" aria-hidden="true" tabindex="-1"></a>                        gp<span class="op">-&gt;</span>u <span class="op">=</span> <span class="ch">&#39; &#39;</span><span class="op">;</span></span>
<span id="cb71-27"><a href="#cb71-27" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb71-28"><a href="#cb71-28" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb71-29"><a href="#cb71-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb71-30"><a href="#cb71-30" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tdeletechar</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb72"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb72-1"><a href="#cb72-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb72-2"><a href="#cb72-2" aria-hidden="true" tabindex="-1"></a>tdeletechar<span class="op">(</span><span class="dt">int</span> n<span class="op">)</span></span>
<span id="cb72-3"><a href="#cb72-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb72-4"><a href="#cb72-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> dst<span class="op">,</span> src<span class="op">,</span> size<span class="op">;</span></span>
<span id="cb72-5"><a href="#cb72-5" aria-hidden="true" tabindex="-1"></a>        Glyph <span class="op">*</span>line<span class="op">;</span></span>
<span id="cb72-6"><a href="#cb72-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb72-7"><a href="#cb72-7" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>n<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col <span class="op">-</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">);</span></span>
<span id="cb72-8"><a href="#cb72-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb72-9"><a href="#cb72-9" aria-hidden="true" tabindex="-1"></a>        dst <span class="op">=</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">;</span></span>
<span id="cb72-10"><a href="#cb72-10" aria-hidden="true" tabindex="-1"></a>        src <span class="op">=</span> term<span class="op">.</span>c<span class="op">.</span>x <span class="op">+</span> n<span class="op">;</span></span>
<span id="cb72-11"><a href="#cb72-11" aria-hidden="true" tabindex="-1"></a>        size <span class="op">=</span> term<span class="op">.</span>col <span class="op">-</span> src<span class="op">;</span></span>
<span id="cb72-12"><a href="#cb72-12" aria-hidden="true" tabindex="-1"></a>        line <span class="op">=</span> term<span class="op">.</span>line<span class="op">[</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">];</span></span>
<span id="cb72-13"><a href="#cb72-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb72-14"><a href="#cb72-14" aria-hidden="true" tabindex="-1"></a>        memmove<span class="op">(&amp;</span>line<span class="op">[</span>dst<span class="op">],</span> <span class="op">&amp;</span>line<span class="op">[</span>src<span class="op">],</span> size <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Glyph<span class="op">));</span></span>
<span id="cb72-15"><a href="#cb72-15" aria-hidden="true" tabindex="-1"></a>        tclearregion<span class="op">(</span>term<span class="op">.</span>col<span class="op">-</span>n<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb72-16"><a href="#cb72-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb72-17"><a href="#cb72-17" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tinsertblank</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb73"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb73-1"><a href="#cb73-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb73-2"><a href="#cb73-2" aria-hidden="true" tabindex="-1"></a>tinsertblank<span class="op">(</span><span class="dt">int</span> n<span class="op">)</span></span>
<span id="cb73-3"><a href="#cb73-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb73-4"><a href="#cb73-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> dst<span class="op">,</span> src<span class="op">,</span> size<span class="op">;</span></span>
<span id="cb73-5"><a href="#cb73-5" aria-hidden="true" tabindex="-1"></a>        Glyph <span class="op">*</span>line<span class="op">;</span></span>
<span id="cb73-6"><a href="#cb73-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb73-7"><a href="#cb73-7" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>n<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col <span class="op">-</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">);</span></span>
<span id="cb73-8"><a href="#cb73-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb73-9"><a href="#cb73-9" aria-hidden="true" tabindex="-1"></a>        dst <span class="op">=</span> term<span class="op">.</span>c<span class="op">.</span>x <span class="op">+</span> n<span class="op">;</span></span>
<span id="cb73-10"><a href="#cb73-10" aria-hidden="true" tabindex="-1"></a>        src <span class="op">=</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">;</span></span>
<span id="cb73-11"><a href="#cb73-11" aria-hidden="true" tabindex="-1"></a>        size <span class="op">=</span> term<span class="op">.</span>col <span class="op">-</span> dst<span class="op">;</span></span>
<span id="cb73-12"><a href="#cb73-12" aria-hidden="true" tabindex="-1"></a>        line <span class="op">=</span> term<span class="op">.</span>line<span class="op">[</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">];</span></span>
<span id="cb73-13"><a href="#cb73-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb73-14"><a href="#cb73-14" aria-hidden="true" tabindex="-1"></a>        memmove<span class="op">(&amp;</span>line<span class="op">[</span>dst<span class="op">],</span> <span class="op">&amp;</span>line<span class="op">[</span>src<span class="op">],</span> size <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Glyph<span class="op">));</span></span>
<span id="cb73-15"><a href="#cb73-15" aria-hidden="true" tabindex="-1"></a>        tclearregion<span class="op">(</span>src<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> dst <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb73-16"><a href="#cb73-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb73-17"><a href="#cb73-17" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tinsertblankline</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb74"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb74-1"><a href="#cb74-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb74-2"><a href="#cb74-2" aria-hidden="true" tabindex="-1"></a>tinsertblankline<span class="op">(</span><span class="dt">int</span> n<span class="op">)</span></span>
<span id="cb74-3"><a href="#cb74-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb74-4"><a href="#cb74-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>BETWEEN<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> term<span class="op">.</span>top<span class="op">,</span> term<span class="op">.</span>bot<span class="op">))</span></span>
<span id="cb74-5"><a href="#cb74-5" aria-hidden="true" tabindex="-1"></a>                tscrolldown<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> n<span class="op">);</span></span>
<span id="cb74-6"><a href="#cb74-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb74-7"><a href="#cb74-7" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tdeleteline</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb75"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb75-1"><a href="#cb75-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb75-2"><a href="#cb75-2" aria-hidden="true" tabindex="-1"></a>tdeleteline<span class="op">(</span><span class="dt">int</span> n<span class="op">)</span></span>
<span id="cb75-3"><a href="#cb75-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb75-4"><a href="#cb75-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>BETWEEN<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> term<span class="op">.</span>top<span class="op">,</span> term<span class="op">.</span>bot<span class="op">))</span></span>
<span id="cb75-5"><a href="#cb75-5" aria-hidden="true" tabindex="-1"></a>                tscrollup<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> n<span class="op">);</span></span>
<span id="cb75-6"><a href="#cb75-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb75-7"><a href="#cb75-7" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tdefcolor</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb76"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb76-1"><a href="#cb76-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int32_t</span></span>
<span id="cb76-2"><a href="#cb76-2" aria-hidden="true" tabindex="-1"></a>tdefcolor<span class="op">(</span><span class="dt">const</span> <span class="dt">int</span> <span class="op">*</span>attr<span class="op">,</span> <span class="dt">int</span> <span class="op">*</span>npar<span class="op">,</span> <span class="dt">int</span> l<span class="op">)</span></span>
<span id="cb76-3"><a href="#cb76-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb76-4"><a href="#cb76-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int32_t</span> idx <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb76-5"><a href="#cb76-5" aria-hidden="true" tabindex="-1"></a>        uint r<span class="op">,</span> g<span class="op">,</span> b<span class="op">;</span></span>
<span id="cb76-6"><a href="#cb76-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb76-7"><a href="#cb76-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>attr<span class="op">[*</span>npar <span class="op">+</span> <span class="dv">1</span><span class="op">])</span> <span class="op">{</span></span>
<span id="cb76-8"><a href="#cb76-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span> <span class="co">/* direct color in RGB space */</span></span>
<span id="cb76-9"><a href="#cb76-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(*</span>npar <span class="op">+</span> <span class="dv">4</span> <span class="op">&gt;=</span> l<span class="op">)</span> <span class="op">{</span></span>
<span id="cb76-10"><a href="#cb76-10" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span></span>
<span id="cb76-11"><a href="#cb76-11" aria-hidden="true" tabindex="-1"></a>                                <span class="st">&quot;erresc(38): Incorrect number of parameters (%d)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb76-12"><a href="#cb76-12" aria-hidden="true" tabindex="-1"></a>                                <span class="op">*</span>npar<span class="op">);</span></span>
<span id="cb76-13"><a href="#cb76-13" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb76-14"><a href="#cb76-14" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb76-15"><a href="#cb76-15" aria-hidden="true" tabindex="-1"></a>                r <span class="op">=</span> attr<span class="op">[*</span>npar <span class="op">+</span> <span class="dv">2</span><span class="op">];</span></span>
<span id="cb76-16"><a href="#cb76-16" aria-hidden="true" tabindex="-1"></a>                g <span class="op">=</span> attr<span class="op">[*</span>npar <span class="op">+</span> <span class="dv">3</span><span class="op">];</span></span>
<span id="cb76-17"><a href="#cb76-17" aria-hidden="true" tabindex="-1"></a>                b <span class="op">=</span> attr<span class="op">[*</span>npar <span class="op">+</span> <span class="dv">4</span><span class="op">];</span></span>
<span id="cb76-18"><a href="#cb76-18" aria-hidden="true" tabindex="-1"></a>                <span class="op">*</span>npar <span class="op">+=</span> <span class="dv">4</span><span class="op">;</span></span>
<span id="cb76-19"><a href="#cb76-19" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(!</span>BETWEEN<span class="op">(</span>r<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">255</span><span class="op">)</span> <span class="op">||</span> <span class="op">!</span>BETWEEN<span class="op">(</span>g<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">255</span><span class="op">)</span> <span class="op">||</span> <span class="op">!</span>BETWEEN<span class="op">(</span>b<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">255</span><span class="op">))</span></span>
<span id="cb76-20"><a href="#cb76-20" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;erresc: bad rgb color (%u,%u,%u)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb76-21"><a href="#cb76-21" aria-hidden="true" tabindex="-1"></a>                                r<span class="op">,</span> g<span class="op">,</span> b<span class="op">);</span></span>
<span id="cb76-22"><a href="#cb76-22" aria-hidden="true" tabindex="-1"></a>                <span class="cf">else</span></span>
<span id="cb76-23"><a href="#cb76-23" aria-hidden="true" tabindex="-1"></a>                        idx <span class="op">=</span> TRUECOLOR<span class="op">(</span>r<span class="op">,</span> g<span class="op">,</span> b<span class="op">);</span></span>
<span id="cb76-24"><a href="#cb76-24" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb76-25"><a href="#cb76-25" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">5</span><span class="op">:</span> <span class="co">/* indexed color */</span></span>
<span id="cb76-26"><a href="#cb76-26" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(*</span>npar <span class="op">+</span> <span class="dv">2</span> <span class="op">&gt;=</span> l<span class="op">)</span> <span class="op">{</span></span>
<span id="cb76-27"><a href="#cb76-27" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span></span>
<span id="cb76-28"><a href="#cb76-28" aria-hidden="true" tabindex="-1"></a>                                <span class="st">&quot;erresc(38): Incorrect number of parameters (%d)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb76-29"><a href="#cb76-29" aria-hidden="true" tabindex="-1"></a>                                <span class="op">*</span>npar<span class="op">);</span></span>
<span id="cb76-30"><a href="#cb76-30" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb76-31"><a href="#cb76-31" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb76-32"><a href="#cb76-32" aria-hidden="true" tabindex="-1"></a>                <span class="op">*</span>npar <span class="op">+=</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb76-33"><a href="#cb76-33" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(!</span>BETWEEN<span class="op">(</span>attr<span class="op">[*</span>npar<span class="op">],</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">255</span><span class="op">))</span></span>
<span id="cb76-34"><a href="#cb76-34" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;erresc: bad fgcolor %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> attr<span class="op">[*</span>npar<span class="op">]);</span></span>
<span id="cb76-35"><a href="#cb76-35" aria-hidden="true" tabindex="-1"></a>                <span class="cf">else</span></span>
<span id="cb76-36"><a href="#cb76-36" aria-hidden="true" tabindex="-1"></a>                        idx <span class="op">=</span> attr<span class="op">[*</span>npar<span class="op">];</span></span>
<span id="cb76-37"><a href="#cb76-37" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb76-38"><a href="#cb76-38" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span> <span class="co">/* implemented defined (only foreground) */</span></span>
<span id="cb76-39"><a href="#cb76-39" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span> <span class="co">/* transparent */</span></span>
<span id="cb76-40"><a href="#cb76-40" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span> <span class="co">/* direct color in CMY space */</span></span>
<span id="cb76-41"><a href="#cb76-41" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">4</span><span class="op">:</span> <span class="co">/* direct color in CMYK space */</span></span>
<span id="cb76-42"><a href="#cb76-42" aria-hidden="true" tabindex="-1"></a>        <span class="cf">default</span><span class="op">:</span></span>
<span id="cb76-43"><a href="#cb76-43" aria-hidden="true" tabindex="-1"></a>                fprintf<span class="op">(</span>stderr<span class="op">,</span></span>
<span id="cb76-44"><a href="#cb76-44" aria-hidden="true" tabindex="-1"></a>                        <span class="st">&quot;erresc(38): gfx attr %d unknown</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> attr<span class="op">[*</span>npar<span class="op">]);</span></span>
<span id="cb76-45"><a href="#cb76-45" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb76-46"><a href="#cb76-46" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb76-47"><a href="#cb76-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb76-48"><a href="#cb76-48" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> idx<span class="op">;</span></span>
<span id="cb76-49"><a href="#cb76-49" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb76-50"><a href="#cb76-50" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tsetattr</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb77"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb77-1"><a href="#cb77-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb77-2"><a href="#cb77-2" aria-hidden="true" tabindex="-1"></a>tsetattr<span class="op">(</span><span class="dt">const</span> <span class="dt">int</span> <span class="op">*</span>attr<span class="op">,</span> <span class="dt">int</span> l<span class="op">)</span></span>
<span id="cb77-3"><a href="#cb77-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb77-4"><a href="#cb77-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i<span class="op">;</span></span>
<span id="cb77-5"><a href="#cb77-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int32_t</span> idx<span class="op">;</span></span>
<span id="cb77-6"><a href="#cb77-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb77-7"><a href="#cb77-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> l<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb77-8"><a href="#cb77-8" aria-hidden="true" tabindex="-1"></a>                <span class="cf">switch</span> <span class="op">(</span>attr<span class="op">[</span>i<span class="op">])</span> <span class="op">{</span></span>
<span id="cb77-9"><a href="#cb77-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span></span>
<span id="cb77-10"><a href="#cb77-10" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">&amp;=</span> <span class="op">~(</span></span>
<span id="cb77-11"><a href="#cb77-11" aria-hidden="true" tabindex="-1"></a>                                ATTR_BOLD       <span class="op">|</span></span>
<span id="cb77-12"><a href="#cb77-12" aria-hidden="true" tabindex="-1"></a>                                ATTR_FAINT      <span class="op">|</span></span>
<span id="cb77-13"><a href="#cb77-13" aria-hidden="true" tabindex="-1"></a>                                ATTR_ITALIC     <span class="op">|</span></span>
<span id="cb77-14"><a href="#cb77-14" aria-hidden="true" tabindex="-1"></a>                                ATTR_UNDERLINE  <span class="op">|</span></span>
<span id="cb77-15"><a href="#cb77-15" aria-hidden="true" tabindex="-1"></a>                                ATTR_BLINK      <span class="op">|</span></span>
<span id="cb77-16"><a href="#cb77-16" aria-hidden="true" tabindex="-1"></a>                                ATTR_REVERSE    <span class="op">|</span></span>
<span id="cb77-17"><a href="#cb77-17" aria-hidden="true" tabindex="-1"></a>                                ATTR_INVISIBLE  <span class="op">|</span></span>
<span id="cb77-18"><a href="#cb77-18" aria-hidden="true" tabindex="-1"></a>                                ATTR_STRUCK     <span class="op">);</span></span>
<span id="cb77-19"><a href="#cb77-19" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>fg <span class="op">=</span> defaultfg<span class="op">;</span></span>
<span id="cb77-20"><a href="#cb77-20" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>bg <span class="op">=</span> defaultbg<span class="op">;</span></span>
<span id="cb77-21"><a href="#cb77-21" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-22"><a href="#cb77-22" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span></span>
<span id="cb77-23"><a href="#cb77-23" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">|=</span> ATTR_BOLD<span class="op">;</span></span>
<span id="cb77-24"><a href="#cb77-24" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-25"><a href="#cb77-25" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span></span>
<span id="cb77-26"><a href="#cb77-26" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">|=</span> ATTR_FAINT<span class="op">;</span></span>
<span id="cb77-27"><a href="#cb77-27" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-28"><a href="#cb77-28" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span></span>
<span id="cb77-29"><a href="#cb77-29" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">|=</span> ATTR_ITALIC<span class="op">;</span></span>
<span id="cb77-30"><a href="#cb77-30" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-31"><a href="#cb77-31" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">4</span><span class="op">:</span></span>
<span id="cb77-32"><a href="#cb77-32" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">|=</span> ATTR_UNDERLINE<span class="op">;</span></span>
<span id="cb77-33"><a href="#cb77-33" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-34"><a href="#cb77-34" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">5</span><span class="op">:</span> <span class="co">/* slow blink */</span></span>
<span id="cb77-35"><a href="#cb77-35" aria-hidden="true" tabindex="-1"></a>                        <span class="co">/* FALLTHROUGH */</span></span>
<span id="cb77-36"><a href="#cb77-36" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">6</span><span class="op">:</span> <span class="co">/* rapid blink */</span></span>
<span id="cb77-37"><a href="#cb77-37" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">|=</span> ATTR_BLINK<span class="op">;</span></span>
<span id="cb77-38"><a href="#cb77-38" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-39"><a href="#cb77-39" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">7</span><span class="op">:</span></span>
<span id="cb77-40"><a href="#cb77-40" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">|=</span> ATTR_REVERSE<span class="op">;</span></span>
<span id="cb77-41"><a href="#cb77-41" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-42"><a href="#cb77-42" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">8</span><span class="op">:</span></span>
<span id="cb77-43"><a href="#cb77-43" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">|=</span> ATTR_INVISIBLE<span class="op">;</span></span>
<span id="cb77-44"><a href="#cb77-44" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-45"><a href="#cb77-45" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">9</span><span class="op">:</span></span>
<span id="cb77-46"><a href="#cb77-46" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">|=</span> ATTR_STRUCK<span class="op">;</span></span>
<span id="cb77-47"><a href="#cb77-47" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-48"><a href="#cb77-48" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">22</span><span class="op">:</span></span>
<span id="cb77-49"><a href="#cb77-49" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">&amp;=</span> <span class="op">~(</span>ATTR_BOLD <span class="op">|</span> ATTR_FAINT<span class="op">);</span></span>
<span id="cb77-50"><a href="#cb77-50" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-51"><a href="#cb77-51" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">23</span><span class="op">:</span></span>
<span id="cb77-52"><a href="#cb77-52" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">&amp;=</span> <span class="op">~</span>ATTR_ITALIC<span class="op">;</span></span>
<span id="cb77-53"><a href="#cb77-53" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-54"><a href="#cb77-54" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">24</span><span class="op">:</span></span>
<span id="cb77-55"><a href="#cb77-55" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">&amp;=</span> <span class="op">~</span>ATTR_UNDERLINE<span class="op">;</span></span>
<span id="cb77-56"><a href="#cb77-56" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-57"><a href="#cb77-57" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">25</span><span class="op">:</span></span>
<span id="cb77-58"><a href="#cb77-58" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">&amp;=</span> <span class="op">~</span>ATTR_BLINK<span class="op">;</span></span>
<span id="cb77-59"><a href="#cb77-59" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-60"><a href="#cb77-60" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">27</span><span class="op">:</span></span>
<span id="cb77-61"><a href="#cb77-61" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">&amp;=</span> <span class="op">~</span>ATTR_REVERSE<span class="op">;</span></span>
<span id="cb77-62"><a href="#cb77-62" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-63"><a href="#cb77-63" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">28</span><span class="op">:</span></span>
<span id="cb77-64"><a href="#cb77-64" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">&amp;=</span> <span class="op">~</span>ATTR_INVISIBLE<span class="op">;</span></span>
<span id="cb77-65"><a href="#cb77-65" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-66"><a href="#cb77-66" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">29</span><span class="op">:</span></span>
<span id="cb77-67"><a href="#cb77-67" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>mode <span class="op">&amp;=</span> <span class="op">~</span>ATTR_STRUCK<span class="op">;</span></span>
<span id="cb77-68"><a href="#cb77-68" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-69"><a href="#cb77-69" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">38</span><span class="op">:</span></span>
<span id="cb77-70"><a href="#cb77-70" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">((</span>idx <span class="op">=</span> tdefcolor<span class="op">(</span>attr<span class="op">,</span> <span class="op">&amp;</span>i<span class="op">,</span> l<span class="op">))</span> <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb77-71"><a href="#cb77-71" aria-hidden="true" tabindex="-1"></a>                                term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>fg <span class="op">=</span> idx<span class="op">;</span></span>
<span id="cb77-72"><a href="#cb77-72" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-73"><a href="#cb77-73" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">39</span><span class="op">:</span></span>
<span id="cb77-74"><a href="#cb77-74" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>fg <span class="op">=</span> defaultfg<span class="op">;</span></span>
<span id="cb77-75"><a href="#cb77-75" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-76"><a href="#cb77-76" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">48</span><span class="op">:</span></span>
<span id="cb77-77"><a href="#cb77-77" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">((</span>idx <span class="op">=</span> tdefcolor<span class="op">(</span>attr<span class="op">,</span> <span class="op">&amp;</span>i<span class="op">,</span> l<span class="op">))</span> <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb77-78"><a href="#cb77-78" aria-hidden="true" tabindex="-1"></a>                                term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>bg <span class="op">=</span> idx<span class="op">;</span></span>
<span id="cb77-79"><a href="#cb77-79" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-80"><a href="#cb77-80" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">49</span><span class="op">:</span></span>
<span id="cb77-81"><a href="#cb77-81" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>bg <span class="op">=</span> defaultbg<span class="op">;</span></span>
<span id="cb77-82"><a href="#cb77-82" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-83"><a href="#cb77-83" aria-hidden="true" tabindex="-1"></a>                <span class="cf">default</span><span class="op">:</span></span>
<span id="cb77-84"><a href="#cb77-84" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>BETWEEN<span class="op">(</span>attr<span class="op">[</span>i<span class="op">],</span> <span class="dv">30</span><span class="op">,</span> <span class="dv">37</span><span class="op">))</span> <span class="op">{</span></span>
<span id="cb77-85"><a href="#cb77-85" aria-hidden="true" tabindex="-1"></a>                                term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>fg <span class="op">=</span> attr<span class="op">[</span>i<span class="op">]</span> <span class="op">-</span> <span class="dv">30</span><span class="op">;</span></span>
<span id="cb77-86"><a href="#cb77-86" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>BETWEEN<span class="op">(</span>attr<span class="op">[</span>i<span class="op">],</span> <span class="dv">40</span><span class="op">,</span> <span class="dv">47</span><span class="op">))</span> <span class="op">{</span></span>
<span id="cb77-87"><a href="#cb77-87" aria-hidden="true" tabindex="-1"></a>                                term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>bg <span class="op">=</span> attr<span class="op">[</span>i<span class="op">]</span> <span class="op">-</span> <span class="dv">40</span><span class="op">;</span></span>
<span id="cb77-88"><a href="#cb77-88" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>BETWEEN<span class="op">(</span>attr<span class="op">[</span>i<span class="op">],</span> <span class="dv">90</span><span class="op">,</span> <span class="dv">97</span><span class="op">))</span> <span class="op">{</span></span>
<span id="cb77-89"><a href="#cb77-89" aria-hidden="true" tabindex="-1"></a>                                term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>fg <span class="op">=</span> attr<span class="op">[</span>i<span class="op">]</span> <span class="op">-</span> <span class="dv">90</span> <span class="op">+</span> <span class="dv">8</span><span class="op">;</span></span>
<span id="cb77-90"><a href="#cb77-90" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>BETWEEN<span class="op">(</span>attr<span class="op">[</span>i<span class="op">],</span> <span class="dv">100</span><span class="op">,</span> <span class="dv">107</span><span class="op">))</span> <span class="op">{</span></span>
<span id="cb77-91"><a href="#cb77-91" aria-hidden="true" tabindex="-1"></a>                                term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">.</span>bg <span class="op">=</span> attr<span class="op">[</span>i<span class="op">]</span> <span class="op">-</span> <span class="dv">100</span> <span class="op">+</span> <span class="dv">8</span><span class="op">;</span></span>
<span id="cb77-92"><a href="#cb77-92" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb77-93"><a href="#cb77-93" aria-hidden="true" tabindex="-1"></a>                                fprintf<span class="op">(</span>stderr<span class="op">,</span></span>
<span id="cb77-94"><a href="#cb77-94" aria-hidden="true" tabindex="-1"></a>                                        <span class="st">&quot;erresc(default): gfx attr %d unknown</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb77-95"><a href="#cb77-95" aria-hidden="true" tabindex="-1"></a>                                        attr<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb77-96"><a href="#cb77-96" aria-hidden="true" tabindex="-1"></a>                                csidump<span class="op">();</span></span>
<span id="cb77-97"><a href="#cb77-97" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb77-98"><a href="#cb77-98" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb77-99"><a href="#cb77-99" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb77-100"><a href="#cb77-100" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb77-101"><a href="#cb77-101" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb77-102"><a href="#cb77-102" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tsetscroll</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb78"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb78-1"><a href="#cb78-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb78-2"><a href="#cb78-2" aria-hidden="true" tabindex="-1"></a>tsetscroll<span class="op">(</span><span class="dt">int</span> t<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span></span>
<span id="cb78-3"><a href="#cb78-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb78-4"><a href="#cb78-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> temp<span class="op">;</span></span>
<span id="cb78-5"><a href="#cb78-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb78-6"><a href="#cb78-6" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>t<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb78-7"><a href="#cb78-7" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>b<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb78-8"><a href="#cb78-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>t <span class="op">&gt;</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb78-9"><a href="#cb78-9" aria-hidden="true" tabindex="-1"></a>                temp <span class="op">=</span> t<span class="op">;</span></span>
<span id="cb78-10"><a href="#cb78-10" aria-hidden="true" tabindex="-1"></a>                t <span class="op">=</span> b<span class="op">;</span></span>
<span id="cb78-11"><a href="#cb78-11" aria-hidden="true" tabindex="-1"></a>                b <span class="op">=</span> temp<span class="op">;</span></span>
<span id="cb78-12"><a href="#cb78-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb78-13"><a href="#cb78-13" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>top <span class="op">=</span> t<span class="op">;</span></span>
<span id="cb78-14"><a href="#cb78-14" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>bot <span class="op">=</span> b<span class="op">;</span></span>
<span id="cb78-15"><a href="#cb78-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb78-16"><a href="#cb78-16" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tsetmode</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb79"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb79-1"><a href="#cb79-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb79-2"><a href="#cb79-2" aria-hidden="true" tabindex="-1"></a>tsetmode<span class="op">(</span><span class="dt">int</span> priv<span class="op">,</span> <span class="dt">int</span> set<span class="op">,</span> <span class="dt">const</span> <span class="dt">int</span> <span class="op">*</span>args<span class="op">,</span> <span class="dt">int</span> narg<span class="op">)</span></span>
<span id="cb79-3"><a href="#cb79-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb79-4"><a href="#cb79-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> alt<span class="op">;</span> <span class="dt">const</span> <span class="dt">int</span> <span class="op">*</span>lim<span class="op">;</span></span>
<span id="cb79-5"><a href="#cb79-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb79-6"><a href="#cb79-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>lim <span class="op">=</span> args <span class="op">+</span> narg<span class="op">;</span> args <span class="op">&lt;</span> lim<span class="op">;</span> <span class="op">++</span>args<span class="op">)</span> <span class="op">{</span></span>
<span id="cb79-7"><a href="#cb79-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>priv<span class="op">)</span> <span class="op">{</span></span>
<span id="cb79-8"><a href="#cb79-8" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">switch</span> <span class="op">(*</span>args<span class="op">)</span> <span class="op">{</span></span>
<span id="cb79-9"><a href="#cb79-9" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span> <span class="co">/* DECCKM -- Cursor key */</span></span>
<span id="cb79-10"><a href="#cb79-10" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span>set<span class="op">,</span> MODE_APPCURSOR<span class="op">);</span></span>
<span id="cb79-11"><a href="#cb79-11" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-12"><a href="#cb79-12" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">5</span><span class="op">:</span> <span class="co">/* DECSCNM -- Reverse video */</span></span>
<span id="cb79-13"><a href="#cb79-13" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span>set<span class="op">,</span> MODE_REVERSE<span class="op">);</span></span>
<span id="cb79-14"><a href="#cb79-14" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-15"><a href="#cb79-15" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">6</span><span class="op">:</span> <span class="co">/* DECOM -- Origin */</span></span>
<span id="cb79-16"><a href="#cb79-16" aria-hidden="true" tabindex="-1"></a>                                MODBIT<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>state<span class="op">,</span> set<span class="op">,</span> CURSOR_ORIGIN<span class="op">);</span></span>
<span id="cb79-17"><a href="#cb79-17" aria-hidden="true" tabindex="-1"></a>                                tmoveato<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb79-18"><a href="#cb79-18" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-19"><a href="#cb79-19" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">7</span><span class="op">:</span> <span class="co">/* DECAWM -- Auto wrap */</span></span>
<span id="cb79-20"><a href="#cb79-20" aria-hidden="true" tabindex="-1"></a>                                MODBIT<span class="op">(</span>term<span class="op">.</span>mode<span class="op">,</span> set<span class="op">,</span> MODE_WRAP<span class="op">);</span></span>
<span id="cb79-21"><a href="#cb79-21" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-22"><a href="#cb79-22" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span>  <span class="co">/* Error (IGNORED) */</span></span>
<span id="cb79-23"><a href="#cb79-23" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span>  <span class="co">/* DECANM -- ANSI/VT52 (IGNORED) */</span></span>
<span id="cb79-24"><a href="#cb79-24" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span>  <span class="co">/* DECCOLM -- Column  (IGNORED) */</span></span>
<span id="cb79-25"><a href="#cb79-25" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">4</span><span class="op">:</span>  <span class="co">/* DECSCLM -- Scroll (IGNORED) */</span></span>
<span id="cb79-26"><a href="#cb79-26" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">8</span><span class="op">:</span>  <span class="co">/* DECARM -- Auto repeat (IGNORED) */</span></span>
<span id="cb79-27"><a href="#cb79-27" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">18</span><span class="op">:</span> <span class="co">/* DECPFF -- Printer feed (IGNORED) */</span></span>
<span id="cb79-28"><a href="#cb79-28" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">19</span><span class="op">:</span> <span class="co">/* DECPEX -- Printer extent (IGNORED) */</span></span>
<span id="cb79-29"><a href="#cb79-29" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">42</span><span class="op">:</span> <span class="co">/* DECNRCM -- National characters (IGNORED) */</span></span>
<span id="cb79-30"><a href="#cb79-30" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">12</span><span class="op">:</span> <span class="co">/* att610 -- Start blinking cursor (IGNORED) */</span></span>
<span id="cb79-31"><a href="#cb79-31" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-32"><a href="#cb79-32" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">25</span><span class="op">:</span> <span class="co">/* DECTCEM -- Text Cursor Enable Mode */</span></span>
<span id="cb79-33"><a href="#cb79-33" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(!</span>set<span class="op">,</span> MODE_HIDE<span class="op">);</span></span>
<span id="cb79-34"><a href="#cb79-34" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-35"><a href="#cb79-35" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">9</span><span class="op">:</span>    <span class="co">/* X10 mouse compatibility mode */</span></span>
<span id="cb79-36"><a href="#cb79-36" aria-hidden="true" tabindex="-1"></a>                                xsetpointermotion<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span>
<span id="cb79-37"><a href="#cb79-37" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span><span class="dv">0</span><span class="op">,</span> MODE_MOUSE<span class="op">);</span></span>
<span id="cb79-38"><a href="#cb79-38" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span>set<span class="op">,</span> MODE_MOUSEX10<span class="op">);</span></span>
<span id="cb79-39"><a href="#cb79-39" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-40"><a href="#cb79-40" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1000</span><span class="op">:</span> <span class="co">/* 1000: report button press */</span></span>
<span id="cb79-41"><a href="#cb79-41" aria-hidden="true" tabindex="-1"></a>                                xsetpointermotion<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span>
<span id="cb79-42"><a href="#cb79-42" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span><span class="dv">0</span><span class="op">,</span> MODE_MOUSE<span class="op">);</span></span>
<span id="cb79-43"><a href="#cb79-43" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span>set<span class="op">,</span> MODE_MOUSEBTN<span class="op">);</span></span>
<span id="cb79-44"><a href="#cb79-44" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-45"><a href="#cb79-45" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1002</span><span class="op">:</span> <span class="co">/* 1002: report motion on button press */</span></span>
<span id="cb79-46"><a href="#cb79-46" aria-hidden="true" tabindex="-1"></a>                                xsetpointermotion<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span>
<span id="cb79-47"><a href="#cb79-47" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span><span class="dv">0</span><span class="op">,</span> MODE_MOUSE<span class="op">);</span></span>
<span id="cb79-48"><a href="#cb79-48" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span>set<span class="op">,</span> MODE_MOUSEMOTION<span class="op">);</span></span>
<span id="cb79-49"><a href="#cb79-49" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-50"><a href="#cb79-50" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1003</span><span class="op">:</span> <span class="co">/* 1003: enable all mouse motions */</span></span>
<span id="cb79-51"><a href="#cb79-51" aria-hidden="true" tabindex="-1"></a>                                xsetpointermotion<span class="op">(</span>set<span class="op">);</span></span>
<span id="cb79-52"><a href="#cb79-52" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span><span class="dv">0</span><span class="op">,</span> MODE_MOUSE<span class="op">);</span></span>
<span id="cb79-53"><a href="#cb79-53" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span>set<span class="op">,</span> MODE_MOUSEMANY<span class="op">);</span></span>
<span id="cb79-54"><a href="#cb79-54" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-55"><a href="#cb79-55" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1004</span><span class="op">:</span> <span class="co">/* 1004: send focus events to tty */</span></span>
<span id="cb79-56"><a href="#cb79-56" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span>set<span class="op">,</span> MODE_FOCUS<span class="op">);</span></span>
<span id="cb79-57"><a href="#cb79-57" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-58"><a href="#cb79-58" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1006</span><span class="op">:</span> <span class="co">/* 1006: extended reporting mode */</span></span>
<span id="cb79-59"><a href="#cb79-59" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span>set<span class="op">,</span> MODE_MOUSESGR<span class="op">);</span></span>
<span id="cb79-60"><a href="#cb79-60" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-61"><a href="#cb79-61" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1034</span><span class="op">:</span></span>
<span id="cb79-62"><a href="#cb79-62" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span>set<span class="op">,</span> MODE_8BIT<span class="op">);</span></span>
<span id="cb79-63"><a href="#cb79-63" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-64"><a href="#cb79-64" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1049</span><span class="op">:</span> <span class="co">/* swap screen &amp; set/restore cursor as xterm */</span></span>
<span id="cb79-65"><a href="#cb79-65" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(!</span>allowaltscreen<span class="op">)</span></span>
<span id="cb79-66"><a href="#cb79-66" aria-hidden="true" tabindex="-1"></a>                                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-67"><a href="#cb79-67" aria-hidden="true" tabindex="-1"></a>                                tcursor<span class="op">((</span>set<span class="op">)</span> <span class="op">?</span> CURSOR_SAVE <span class="op">:</span> CURSOR_LOAD<span class="op">);</span></span>
<span id="cb79-68"><a href="#cb79-68" aria-hidden="true" tabindex="-1"></a>                                <span class="co">/* FALLTHROUGH */</span></span>
<span id="cb79-69"><a href="#cb79-69" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">47</span><span class="op">:</span> <span class="co">/* swap screen */</span></span>
<span id="cb79-70"><a href="#cb79-70" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1047</span><span class="op">:</span></span>
<span id="cb79-71"><a href="#cb79-71" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(!</span>allowaltscreen<span class="op">)</span></span>
<span id="cb79-72"><a href="#cb79-72" aria-hidden="true" tabindex="-1"></a>                                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-73"><a href="#cb79-73" aria-hidden="true" tabindex="-1"></a>                                alt <span class="op">=</span> IS_SET<span class="op">(</span>MODE_ALTSCREEN<span class="op">);</span></span>
<span id="cb79-74"><a href="#cb79-74" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(</span>alt<span class="op">)</span> <span class="op">{</span></span>
<span id="cb79-75"><a href="#cb79-75" aria-hidden="true" tabindex="-1"></a>                                        tclearregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">,</span></span>
<span id="cb79-76"><a href="#cb79-76" aria-hidden="true" tabindex="-1"></a>                                                        term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb79-77"><a href="#cb79-77" aria-hidden="true" tabindex="-1"></a>                                <span class="op">}</span></span>
<span id="cb79-78"><a href="#cb79-78" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(</span>set <span class="op">^</span> alt<span class="op">)</span> <span class="co">/* set is always 1 or 0 */</span></span>
<span id="cb79-79"><a href="#cb79-79" aria-hidden="true" tabindex="-1"></a>                                        tswapscreen<span class="op">();</span></span>
<span id="cb79-80"><a href="#cb79-80" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(*</span>args <span class="op">!=</span> <span class="dv">1049</span><span class="op">)</span></span>
<span id="cb79-81"><a href="#cb79-81" aria-hidden="true" tabindex="-1"></a>                                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-82"><a href="#cb79-82" aria-hidden="true" tabindex="-1"></a>                                <span class="co">/* FALLTHROUGH */</span></span>
<span id="cb79-83"><a href="#cb79-83" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1048</span><span class="op">:</span></span>
<span id="cb79-84"><a href="#cb79-84" aria-hidden="true" tabindex="-1"></a>                                tcursor<span class="op">((</span>set<span class="op">)</span> <span class="op">?</span> CURSOR_SAVE <span class="op">:</span> CURSOR_LOAD<span class="op">);</span></span>
<span id="cb79-85"><a href="#cb79-85" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-86"><a href="#cb79-86" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">2004</span><span class="op">:</span> <span class="co">/* 2004: bracketed paste mode */</span></span>
<span id="cb79-87"><a href="#cb79-87" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span>set<span class="op">,</span> MODE_BRCKTPASTE<span class="op">);</span></span>
<span id="cb79-88"><a href="#cb79-88" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-89"><a href="#cb79-89" aria-hidden="true" tabindex="-1"></a>                        <span class="co">/* Not implemented mouse modes. See comments there. */</span></span>
<span id="cb79-90"><a href="#cb79-90" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1001</span><span class="op">:</span> <span class="co">/* mouse highlight mode; can hang the</span></span>
<span id="cb79-91"><a href="#cb79-91" aria-hidden="true" tabindex="-1"></a><span class="co">                                      terminal by design when implemented. */</span></span>
<span id="cb79-92"><a href="#cb79-92" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1005</span><span class="op">:</span> <span class="co">/* UTF-8 mouse mode; will confuse</span></span>
<span id="cb79-93"><a href="#cb79-93" aria-hidden="true" tabindex="-1"></a><span class="co">                                      applications not supporting UTF-8</span></span>
<span id="cb79-94"><a href="#cb79-94" aria-hidden="true" tabindex="-1"></a><span class="co">                                      and luit. */</span></span>
<span id="cb79-95"><a href="#cb79-95" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">1015</span><span class="op">:</span> <span class="co">/* urxvt mangled mouse mode; incompatible</span></span>
<span id="cb79-96"><a href="#cb79-96" aria-hidden="true" tabindex="-1"></a><span class="co">                                      and can be mistaken for other control</span></span>
<span id="cb79-97"><a href="#cb79-97" aria-hidden="true" tabindex="-1"></a><span class="co">                                      codes. */</span></span>
<span id="cb79-98"><a href="#cb79-98" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-99"><a href="#cb79-99" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">default</span><span class="op">:</span></span>
<span id="cb79-100"><a href="#cb79-100" aria-hidden="true" tabindex="-1"></a>                                fprintf<span class="op">(</span>stderr<span class="op">,</span></span>
<span id="cb79-101"><a href="#cb79-101" aria-hidden="true" tabindex="-1"></a>                                        <span class="st">&quot;erresc: unknown private set/reset mode %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb79-102"><a href="#cb79-102" aria-hidden="true" tabindex="-1"></a>                                        <span class="op">*</span>args<span class="op">);</span></span>
<span id="cb79-103"><a href="#cb79-103" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-104"><a href="#cb79-104" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb79-105"><a href="#cb79-105" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb79-106"><a href="#cb79-106" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">switch</span> <span class="op">(*</span>args<span class="op">)</span> <span class="op">{</span></span>
<span id="cb79-107"><a href="#cb79-107" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span>  <span class="co">/* Error (IGNORED) */</span></span>
<span id="cb79-108"><a href="#cb79-108" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-109"><a href="#cb79-109" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span></span>
<span id="cb79-110"><a href="#cb79-110" aria-hidden="true" tabindex="-1"></a>                                xsetmode<span class="op">(</span>set<span class="op">,</span> MODE_KBDLOCK<span class="op">);</span></span>
<span id="cb79-111"><a href="#cb79-111" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-112"><a href="#cb79-112" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">4</span><span class="op">:</span>  <span class="co">/* IRM -- Insertion-replacement */</span></span>
<span id="cb79-113"><a href="#cb79-113" aria-hidden="true" tabindex="-1"></a>                                MODBIT<span class="op">(</span>term<span class="op">.</span>mode<span class="op">,</span> set<span class="op">,</span> MODE_INSERT<span class="op">);</span></span>
<span id="cb79-114"><a href="#cb79-114" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-115"><a href="#cb79-115" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">12</span><span class="op">:</span> <span class="co">/* SRM -- Send/Receive */</span></span>
<span id="cb79-116"><a href="#cb79-116" aria-hidden="true" tabindex="-1"></a>                                MODBIT<span class="op">(</span>term<span class="op">.</span>mode<span class="op">,</span> <span class="op">!</span>set<span class="op">,</span> MODE_ECHO<span class="op">);</span></span>
<span id="cb79-117"><a href="#cb79-117" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-118"><a href="#cb79-118" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">case</span> <span class="dv">20</span><span class="op">:</span> <span class="co">/* LNM -- Linefeed/new line */</span></span>
<span id="cb79-119"><a href="#cb79-119" aria-hidden="true" tabindex="-1"></a>                                MODBIT<span class="op">(</span>term<span class="op">.</span>mode<span class="op">,</span> set<span class="op">,</span> MODE_CRLF<span class="op">);</span></span>
<span id="cb79-120"><a href="#cb79-120" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-121"><a href="#cb79-121" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">default</span><span class="op">:</span></span>
<span id="cb79-122"><a href="#cb79-122" aria-hidden="true" tabindex="-1"></a>                                fprintf<span class="op">(</span>stderr<span class="op">,</span></span>
<span id="cb79-123"><a href="#cb79-123" aria-hidden="true" tabindex="-1"></a>                                        <span class="st">&quot;erresc: unknown set/reset mode %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb79-124"><a href="#cb79-124" aria-hidden="true" tabindex="-1"></a>                                        <span class="op">*</span>args<span class="op">);</span></span>
<span id="cb79-125"><a href="#cb79-125" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb79-126"><a href="#cb79-126" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb79-127"><a href="#cb79-127" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb79-128"><a href="#cb79-128" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb79-129"><a href="#cb79-129" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb79-130"><a href="#cb79-130" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>csihandle</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb80"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb80-1"><a href="#cb80-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb80-2"><a href="#cb80-2" aria-hidden="true" tabindex="-1"></a>csihandle<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb80-3"><a href="#cb80-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb80-4"><a href="#cb80-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> buf<span class="op">[</span><span class="dv">40</span><span class="op">];</span></span>
<span id="cb80-5"><a href="#cb80-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> len<span class="op">;</span></span>
<span id="cb80-6"><a href="#cb80-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb80-7"><a href="#cb80-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>csiescseq<span class="op">.</span>mode<span class="op">[</span><span class="dv">0</span><span class="op">])</span> <span class="op">{</span></span>
<span id="cb80-8"><a href="#cb80-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">default</span><span class="op">:</span></span>
<span id="cb80-9"><a href="#cb80-9" aria-hidden="true" tabindex="-1"></a>        unknown<span class="op">:</span></span>
<span id="cb80-10"><a href="#cb80-10" aria-hidden="true" tabindex="-1"></a>                fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;erresc: unknown csi &quot;</span><span class="op">);</span></span>
<span id="cb80-11"><a href="#cb80-11" aria-hidden="true" tabindex="-1"></a>                csidump<span class="op">();</span></span>
<span id="cb80-12"><a href="#cb80-12" aria-hidden="true" tabindex="-1"></a>                <span class="co">/* die(&quot;&quot;); */</span></span>
<span id="cb80-13"><a href="#cb80-13" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-14"><a href="#cb80-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;@&#39;</span><span class="op">:</span> <span class="co">/* ICH -- Insert &lt;n&gt; blank char */</span></span>
<span id="cb80-15"><a href="#cb80-15" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-16"><a href="#cb80-16" aria-hidden="true" tabindex="-1"></a>                tinsertblank<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-17"><a href="#cb80-17" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-18"><a href="#cb80-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;A&#39;</span><span class="op">:</span> <span class="co">/* CUU -- Cursor &lt;n&gt; Up */</span></span>
<span id="cb80-19"><a href="#cb80-19" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-20"><a href="#cb80-20" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">-</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-21"><a href="#cb80-21" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-22"><a href="#cb80-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;B&#39;</span><span class="op">:</span> <span class="co">/* CUD -- Cursor &lt;n&gt; Down */</span></span>
<span id="cb80-23"><a href="#cb80-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;e&#39;</span><span class="op">:</span> <span class="co">/* VPR --Cursor &lt;n&gt; Down */</span></span>
<span id="cb80-24"><a href="#cb80-24" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-25"><a href="#cb80-25" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">+</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-26"><a href="#cb80-26" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-27"><a href="#cb80-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;i&#39;</span><span class="op">:</span> <span class="co">/* MC -- Media Copy */</span></span>
<span id="cb80-28"><a href="#cb80-28" aria-hidden="true" tabindex="-1"></a>                <span class="cf">switch</span> <span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">])</span> <span class="op">{</span></span>
<span id="cb80-29"><a href="#cb80-29" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span></span>
<span id="cb80-30"><a href="#cb80-30" aria-hidden="true" tabindex="-1"></a>                        tdump<span class="op">();</span></span>
<span id="cb80-31"><a href="#cb80-31" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-32"><a href="#cb80-32" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span></span>
<span id="cb80-33"><a href="#cb80-33" aria-hidden="true" tabindex="-1"></a>                        tdumpline<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb80-34"><a href="#cb80-34" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-35"><a href="#cb80-35" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span></span>
<span id="cb80-36"><a href="#cb80-36" aria-hidden="true" tabindex="-1"></a>                        tdumpsel<span class="op">();</span></span>
<span id="cb80-37"><a href="#cb80-37" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-38"><a href="#cb80-38" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">4</span><span class="op">:</span></span>
<span id="cb80-39"><a href="#cb80-39" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>mode <span class="op">&amp;=</span> <span class="op">~</span>MODE_PRINT<span class="op">;</span></span>
<span id="cb80-40"><a href="#cb80-40" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-41"><a href="#cb80-41" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">5</span><span class="op">:</span></span>
<span id="cb80-42"><a href="#cb80-42" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>mode <span class="op">|=</span> MODE_PRINT<span class="op">;</span></span>
<span id="cb80-43"><a href="#cb80-43" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-44"><a href="#cb80-44" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb80-45"><a href="#cb80-45" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-46"><a href="#cb80-46" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;c&#39;</span><span class="op">:</span> <span class="co">/* DA -- Device Attributes */</span></span>
<span id="cb80-47"><a href="#cb80-47" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb80-48"><a href="#cb80-48" aria-hidden="true" tabindex="-1"></a>                        ttywrite<span class="op">(</span>vtiden<span class="op">,</span> strlen<span class="op">(</span>vtiden<span class="op">),</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb80-49"><a href="#cb80-49" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-50"><a href="#cb80-50" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;b&#39;</span><span class="op">:</span> <span class="co">/* REP -- if last char is printable print it &lt;n&gt; more times */</span></span>
<span id="cb80-51"><a href="#cb80-51" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-52"><a href="#cb80-52" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>lastc<span class="op">)</span></span>
<span id="cb80-53"><a href="#cb80-53" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">while</span> <span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]--</span> <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb80-54"><a href="#cb80-54" aria-hidden="true" tabindex="-1"></a>                                tputc<span class="op">(</span>term<span class="op">.</span>lastc<span class="op">);</span></span>
<span id="cb80-55"><a href="#cb80-55" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-56"><a href="#cb80-56" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;C&#39;</span><span class="op">:</span> <span class="co">/* CUF -- Cursor &lt;n&gt; Forward */</span></span>
<span id="cb80-57"><a href="#cb80-57" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;a&#39;</span><span class="op">:</span> <span class="co">/* HPR -- Cursor &lt;n&gt; Forward */</span></span>
<span id="cb80-58"><a href="#cb80-58" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-59"><a href="#cb80-59" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">+</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb80-60"><a href="#cb80-60" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-61"><a href="#cb80-61" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;D&#39;</span><span class="op">:</span> <span class="co">/* CUB -- Cursor &lt;n&gt; Backward */</span></span>
<span id="cb80-62"><a href="#cb80-62" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-63"><a href="#cb80-63" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">-</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb80-64"><a href="#cb80-64" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-65"><a href="#cb80-65" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;E&#39;</span><span class="op">:</span> <span class="co">/* CNL -- Cursor &lt;n&gt; Down and first col */</span></span>
<span id="cb80-66"><a href="#cb80-66" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-67"><a href="#cb80-67" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span><span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">+</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-68"><a href="#cb80-68" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-69"><a href="#cb80-69" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;F&#39;</span><span class="op">:</span> <span class="co">/* CPL -- Cursor &lt;n&gt; Up and first col */</span></span>
<span id="cb80-70"><a href="#cb80-70" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-71"><a href="#cb80-71" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span><span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">-</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-72"><a href="#cb80-72" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-73"><a href="#cb80-73" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;g&#39;</span><span class="op">:</span> <span class="co">/* TBC -- Tabulation clear */</span></span>
<span id="cb80-74"><a href="#cb80-74" aria-hidden="true" tabindex="-1"></a>                <span class="cf">switch</span> <span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">])</span> <span class="op">{</span></span>
<span id="cb80-75"><a href="#cb80-75" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span> <span class="co">/* clear current tab stop */</span></span>
<span id="cb80-76"><a href="#cb80-76" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>tabs<span class="op">[</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb80-77"><a href="#cb80-77" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-78"><a href="#cb80-78" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span> <span class="co">/* clear all the tabs */</span></span>
<span id="cb80-79"><a href="#cb80-79" aria-hidden="true" tabindex="-1"></a>                        memset<span class="op">(</span>term<span class="op">.</span>tabs<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(*</span>term<span class="op">.</span>tabs<span class="op">));</span></span>
<span id="cb80-80"><a href="#cb80-80" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-81"><a href="#cb80-81" aria-hidden="true" tabindex="-1"></a>                <span class="cf">default</span><span class="op">:</span></span>
<span id="cb80-82"><a href="#cb80-82" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">goto</span> unknown<span class="op">;</span></span>
<span id="cb80-83"><a href="#cb80-83" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb80-84"><a href="#cb80-84" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-85"><a href="#cb80-85" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;G&#39;</span><span class="op">:</span> <span class="co">/* CHA -- Move to &lt;col&gt; */</span></span>
<span id="cb80-86"><a href="#cb80-86" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;`&#39;</span><span class="op">:</span> <span class="co">/* HPA */</span></span>
<span id="cb80-87"><a href="#cb80-87" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-88"><a href="#cb80-88" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]-</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb80-89"><a href="#cb80-89" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-90"><a href="#cb80-90" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;H&#39;</span><span class="op">:</span> <span class="co">/* CUP -- Move to &lt;row&gt; &lt;col&gt; */</span></span>
<span id="cb80-91"><a href="#cb80-91" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;f&#39;</span><span class="op">:</span> <span class="co">/* HVP */</span></span>
<span id="cb80-92"><a href="#cb80-92" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-93"><a href="#cb80-93" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">1</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-94"><a href="#cb80-94" aria-hidden="true" tabindex="-1"></a>                tmoveato<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">1</span><span class="op">]-</span><span class="dv">1</span><span class="op">,</span> csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-95"><a href="#cb80-95" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-96"><a href="#cb80-96" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;I&#39;</span><span class="op">:</span> <span class="co">/* CHT -- Cursor Forward Tabulation &lt;n&gt; tab stops */</span></span>
<span id="cb80-97"><a href="#cb80-97" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-98"><a href="#cb80-98" aria-hidden="true" tabindex="-1"></a>                tputtab<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-99"><a href="#cb80-99" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-100"><a href="#cb80-100" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;J&#39;</span><span class="op">:</span> <span class="co">/* ED -- Clear screen */</span></span>
<span id="cb80-101"><a href="#cb80-101" aria-hidden="true" tabindex="-1"></a>                <span class="cf">switch</span> <span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">])</span> <span class="op">{</span></span>
<span id="cb80-102"><a href="#cb80-102" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span> <span class="co">/* below */</span></span>
<span id="cb80-103"><a href="#cb80-103" aria-hidden="true" tabindex="-1"></a>                        tclearregion<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb80-104"><a href="#cb80-104" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>y <span class="op">&lt;</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb80-105"><a href="#cb80-105" aria-hidden="true" tabindex="-1"></a>                                tclearregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">+</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">,</span></span>
<span id="cb80-106"><a href="#cb80-106" aria-hidden="true" tabindex="-1"></a>                                                term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-107"><a href="#cb80-107" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb80-108"><a href="#cb80-108" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-109"><a href="#cb80-109" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span> <span class="co">/* above */</span></span>
<span id="cb80-110"><a href="#cb80-110" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>y <span class="op">&gt;</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb80-111"><a href="#cb80-111" aria-hidden="true" tabindex="-1"></a>                                tclearregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-112"><a href="#cb80-112" aria-hidden="true" tabindex="-1"></a>                        tclearregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb80-113"><a href="#cb80-113" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-114"><a href="#cb80-114" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span> <span class="co">/* all */</span></span>
<span id="cb80-115"><a href="#cb80-115" aria-hidden="true" tabindex="-1"></a>                        tclearregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-116"><a href="#cb80-116" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-117"><a href="#cb80-117" aria-hidden="true" tabindex="-1"></a>                <span class="cf">default</span><span class="op">:</span></span>
<span id="cb80-118"><a href="#cb80-118" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">goto</span> unknown<span class="op">;</span></span>
<span id="cb80-119"><a href="#cb80-119" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb80-120"><a href="#cb80-120" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-121"><a href="#cb80-121" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;K&#39;</span><span class="op">:</span> <span class="co">/* EL -- Clear line */</span></span>
<span id="cb80-122"><a href="#cb80-122" aria-hidden="true" tabindex="-1"></a>                <span class="cf">switch</span> <span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">])</span> <span class="op">{</span></span>
<span id="cb80-123"><a href="#cb80-123" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span> <span class="co">/* right */</span></span>
<span id="cb80-124"><a href="#cb80-124" aria-hidden="true" tabindex="-1"></a>                        tclearregion<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">,</span></span>
<span id="cb80-125"><a href="#cb80-125" aria-hidden="true" tabindex="-1"></a>                                        term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb80-126"><a href="#cb80-126" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-127"><a href="#cb80-127" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span> <span class="co">/* left */</span></span>
<span id="cb80-128"><a href="#cb80-128" aria-hidden="true" tabindex="-1"></a>                        tclearregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb80-129"><a href="#cb80-129" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-130"><a href="#cb80-130" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span> <span class="co">/* all */</span></span>
<span id="cb80-131"><a href="#cb80-131" aria-hidden="true" tabindex="-1"></a>                        tclearregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb80-132"><a href="#cb80-132" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-133"><a href="#cb80-133" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb80-134"><a href="#cb80-134" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-135"><a href="#cb80-135" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;S&#39;</span><span class="op">:</span> <span class="co">/* SU -- Scroll &lt;n&gt; line up */</span></span>
<span id="cb80-136"><a href="#cb80-136" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-137"><a href="#cb80-137" aria-hidden="true" tabindex="-1"></a>                tscrollup<span class="op">(</span>term<span class="op">.</span>top<span class="op">,</span> csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-138"><a href="#cb80-138" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-139"><a href="#cb80-139" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;T&#39;</span><span class="op">:</span> <span class="co">/* SD -- Scroll &lt;n&gt; line down */</span></span>
<span id="cb80-140"><a href="#cb80-140" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-141"><a href="#cb80-141" aria-hidden="true" tabindex="-1"></a>                tscrolldown<span class="op">(</span>term<span class="op">.</span>top<span class="op">,</span> csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-142"><a href="#cb80-142" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-143"><a href="#cb80-143" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;L&#39;</span><span class="op">:</span> <span class="co">/* IL -- Insert &lt;n&gt; blank lines */</span></span>
<span id="cb80-144"><a href="#cb80-144" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-145"><a href="#cb80-145" aria-hidden="true" tabindex="-1"></a>                tinsertblankline<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-146"><a href="#cb80-146" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-147"><a href="#cb80-147" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;l&#39;</span><span class="op">:</span> <span class="co">/* RM -- Reset Mode */</span></span>
<span id="cb80-148"><a href="#cb80-148" aria-hidden="true" tabindex="-1"></a>                tsetmode<span class="op">(</span>csiescseq<span class="op">.</span>priv<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> csiescseq<span class="op">.</span>arg<span class="op">,</span> csiescseq<span class="op">.</span>narg<span class="op">);</span></span>
<span id="cb80-149"><a href="#cb80-149" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-150"><a href="#cb80-150" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;M&#39;</span><span class="op">:</span> <span class="co">/* DL -- Delete &lt;n&gt; lines */</span></span>
<span id="cb80-151"><a href="#cb80-151" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-152"><a href="#cb80-152" aria-hidden="true" tabindex="-1"></a>                tdeleteline<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-153"><a href="#cb80-153" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-154"><a href="#cb80-154" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;X&#39;</span><span class="op">:</span> <span class="co">/* ECH -- Erase &lt;n&gt; char */</span></span>
<span id="cb80-155"><a href="#cb80-155" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-156"><a href="#cb80-156" aria-hidden="true" tabindex="-1"></a>                tclearregion<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span></span>
<span id="cb80-157"><a href="#cb80-157" aria-hidden="true" tabindex="-1"></a>                                term<span class="op">.</span>c<span class="op">.</span>x <span class="op">+</span> csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb80-158"><a href="#cb80-158" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-159"><a href="#cb80-159" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;P&#39;</span><span class="op">:</span> <span class="co">/* DCH -- Delete &lt;n&gt; char */</span></span>
<span id="cb80-160"><a href="#cb80-160" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-161"><a href="#cb80-161" aria-hidden="true" tabindex="-1"></a>                tdeletechar<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-162"><a href="#cb80-162" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-163"><a href="#cb80-163" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;Z&#39;</span><span class="op">:</span> <span class="co">/* CBT -- Cursor Backward Tabulation &lt;n&gt; tab stops */</span></span>
<span id="cb80-164"><a href="#cb80-164" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-165"><a href="#cb80-165" aria-hidden="true" tabindex="-1"></a>                tputtab<span class="op">(-</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb80-166"><a href="#cb80-166" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-167"><a href="#cb80-167" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;d&#39;</span><span class="op">:</span> <span class="co">/* VPA -- Move to &lt;row&gt; */</span></span>
<span id="cb80-168"><a href="#cb80-168" aria-hidden="true" tabindex="-1"></a>                DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-169"><a href="#cb80-169" aria-hidden="true" tabindex="-1"></a>                tmoveato<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-170"><a href="#cb80-170" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-171"><a href="#cb80-171" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;h&#39;</span><span class="op">:</span> <span class="co">/* SM -- Set terminal mode */</span></span>
<span id="cb80-172"><a href="#cb80-172" aria-hidden="true" tabindex="-1"></a>                tsetmode<span class="op">(</span>csiescseq<span class="op">.</span>priv<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> csiescseq<span class="op">.</span>arg<span class="op">,</span> csiescseq<span class="op">.</span>narg<span class="op">);</span></span>
<span id="cb80-173"><a href="#cb80-173" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-174"><a href="#cb80-174" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;m&#39;</span><span class="op">:</span> <span class="co">/* SGR -- Terminal attribute (color) */</span></span>
<span id="cb80-175"><a href="#cb80-175" aria-hidden="true" tabindex="-1"></a>                tsetattr<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">,</span> csiescseq<span class="op">.</span>narg<span class="op">);</span></span>
<span id="cb80-176"><a href="#cb80-176" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-177"><a href="#cb80-177" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;n&#39;</span><span class="op">:</span> <span class="co">/* DSR – Device Status Report (cursor position) */</span></span>
<span id="cb80-178"><a href="#cb80-178" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">==</span> <span class="dv">6</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb80-179"><a href="#cb80-179" aria-hidden="true" tabindex="-1"></a>                        len <span class="op">=</span> snprintf<span class="op">(</span>buf<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>buf<span class="op">),</span> <span class="st">&quot;</span><span class="sc">\033</span><span class="st">[%i;%iR&quot;</span><span class="op">,</span></span>
<span id="cb80-180"><a href="#cb80-180" aria-hidden="true" tabindex="-1"></a>                                        term<span class="op">.</span>c<span class="op">.</span>y<span class="op">+</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">+</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-181"><a href="#cb80-181" aria-hidden="true" tabindex="-1"></a>                        ttywrite<span class="op">(</span>buf<span class="op">,</span> len<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb80-182"><a href="#cb80-182" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb80-183"><a href="#cb80-183" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-184"><a href="#cb80-184" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;r&#39;</span><span class="op">:</span> <span class="co">/* DECSTBM -- Set Scrolling Region */</span></span>
<span id="cb80-185"><a href="#cb80-185" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>csiescseq<span class="op">.</span>priv<span class="op">)</span> <span class="op">{</span></span>
<span id="cb80-186"><a href="#cb80-186" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">goto</span> unknown<span class="op">;</span></span>
<span id="cb80-187"><a href="#cb80-187" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb80-188"><a href="#cb80-188" aria-hidden="true" tabindex="-1"></a>                        DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-189"><a href="#cb80-189" aria-hidden="true" tabindex="-1"></a>                        DEFAULT<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">1</span><span class="op">],</span> term<span class="op">.</span>row<span class="op">);</span></span>
<span id="cb80-190"><a href="#cb80-190" aria-hidden="true" tabindex="-1"></a>                        tsetscroll<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]-</span><span class="dv">1</span><span class="op">,</span> csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">1</span><span class="op">]-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb80-191"><a href="#cb80-191" aria-hidden="true" tabindex="-1"></a>                        tmoveato<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb80-192"><a href="#cb80-192" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb80-193"><a href="#cb80-193" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-194"><a href="#cb80-194" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;s&#39;</span><span class="op">:</span> <span class="co">/* DECSC -- Save cursor position (ANSI.SYS) */</span></span>
<span id="cb80-195"><a href="#cb80-195" aria-hidden="true" tabindex="-1"></a>                tcursor<span class="op">(</span>CURSOR_SAVE<span class="op">);</span></span>
<span id="cb80-196"><a href="#cb80-196" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-197"><a href="#cb80-197" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;u&#39;</span><span class="op">:</span> <span class="co">/* DECRC -- Restore cursor position (ANSI.SYS) */</span></span>
<span id="cb80-198"><a href="#cb80-198" aria-hidden="true" tabindex="-1"></a>                tcursor<span class="op">(</span>CURSOR_LOAD<span class="op">);</span></span>
<span id="cb80-199"><a href="#cb80-199" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-200"><a href="#cb80-200" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39; &#39;</span><span class="op">:</span></span>
<span id="cb80-201"><a href="#cb80-201" aria-hidden="true" tabindex="-1"></a>                <span class="cf">switch</span> <span class="op">(</span>csiescseq<span class="op">.</span>mode<span class="op">[</span><span class="dv">1</span><span class="op">])</span> <span class="op">{</span></span>
<span id="cb80-202"><a href="#cb80-202" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="ch">&#39;q&#39;</span><span class="op">:</span> <span class="co">/* DECSCUSR -- Set Cursor Style */</span></span>
<span id="cb80-203"><a href="#cb80-203" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>xsetcursor<span class="op">(</span>csiescseq<span class="op">.</span>arg<span class="op">[</span><span class="dv">0</span><span class="op">]))</span></span>
<span id="cb80-204"><a href="#cb80-204" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">goto</span> unknown<span class="op">;</span></span>
<span id="cb80-205"><a href="#cb80-205" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-206"><a href="#cb80-206" aria-hidden="true" tabindex="-1"></a>                <span class="cf">default</span><span class="op">:</span></span>
<span id="cb80-207"><a href="#cb80-207" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">goto</span> unknown<span class="op">;</span></span>
<span id="cb80-208"><a href="#cb80-208" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb80-209"><a href="#cb80-209" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb80-210"><a href="#cb80-210" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb80-211"><a href="#cb80-211" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb80-212"><a href="#cb80-212" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>csidump</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb81"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb81-1"><a href="#cb81-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb81-2"><a href="#cb81-2" aria-hidden="true" tabindex="-1"></a>csidump<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb81-3"><a href="#cb81-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb81-4"><a href="#cb81-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> i<span class="op">;</span></span>
<span id="cb81-5"><a href="#cb81-5" aria-hidden="true" tabindex="-1"></a>        uint c<span class="op">;</span></span>
<span id="cb81-6"><a href="#cb81-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb81-7"><a href="#cb81-7" aria-hidden="true" tabindex="-1"></a>        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;ESC[&quot;</span><span class="op">);</span></span>
<span id="cb81-8"><a href="#cb81-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> csiescseq<span class="op">.</span>len<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb81-9"><a href="#cb81-9" aria-hidden="true" tabindex="-1"></a>                c <span class="op">=</span> csiescseq<span class="op">.</span>buf<span class="op">[</span>i<span class="op">]</span> <span class="op">&amp;</span> <span class="bn">0xff</span><span class="op">;</span></span>
<span id="cb81-10"><a href="#cb81-10" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>isprint<span class="op">(</span>c<span class="op">))</span> <span class="op">{</span></span>
<span id="cb81-11"><a href="#cb81-11" aria-hidden="true" tabindex="-1"></a>                        putc<span class="op">(</span>c<span class="op">,</span> stderr<span class="op">);</span></span>
<span id="cb81-12"><a href="#cb81-12" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>c <span class="op">==</span> <span class="ch">&#39;\n&#39;</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb81-13"><a href="#cb81-13" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;(</span><span class="sc">\\</span><span class="st">n)&quot;</span><span class="op">);</span></span>
<span id="cb81-14"><a href="#cb81-14" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>c <span class="op">==</span> <span class="ch">&#39;\r&#39;</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb81-15"><a href="#cb81-15" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;(</span><span class="sc">\\</span><span class="st">r)&quot;</span><span class="op">);</span></span>
<span id="cb81-16"><a href="#cb81-16" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>c <span class="op">==</span> <span class="bn">0x1b</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb81-17"><a href="#cb81-17" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;(</span><span class="sc">\\</span><span class="st">e)&quot;</span><span class="op">);</span></span>
<span id="cb81-18"><a href="#cb81-18" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb81-19"><a href="#cb81-19" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;(%02x)&quot;</span><span class="op">,</span> c<span class="op">);</span></span>
<span id="cb81-20"><a href="#cb81-20" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb81-21"><a href="#cb81-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb81-22"><a href="#cb81-22" aria-hidden="true" tabindex="-1"></a>        putc<span class="op">(</span><span class="ch">&#39;\n&#39;</span><span class="op">,</span> stderr<span class="op">);</span></span>
<span id="cb81-23"><a href="#cb81-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb81-24"><a href="#cb81-24" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>csireset</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb82"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb82-1"><a href="#cb82-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb82-2"><a href="#cb82-2" aria-hidden="true" tabindex="-1"></a>csireset<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb82-3"><a href="#cb82-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb82-4"><a href="#cb82-4" aria-hidden="true" tabindex="-1"></a>        memset<span class="op">(&amp;</span>csiescseq<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>csiescseq<span class="op">));</span></span>
<span id="cb82-5"><a href="#cb82-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb82-6"><a href="#cb82-6" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>osc_color_response</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb83"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb83-1"><a href="#cb83-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb83-2"><a href="#cb83-2" aria-hidden="true" tabindex="-1"></a>osc_color_response<span class="op">(</span><span class="dt">int</span> num<span class="op">,</span> <span class="dt">int</span> index<span class="op">,</span> <span class="dt">int</span> is_osc4<span class="op">)</span></span>
<span id="cb83-3"><a href="#cb83-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb83-4"><a href="#cb83-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> n<span class="op">;</span></span>
<span id="cb83-5"><a href="#cb83-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> buf<span class="op">[</span><span class="dv">32</span><span class="op">];</span></span>
<span id="cb83-6"><a href="#cb83-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">char</span> r<span class="op">,</span> g<span class="op">,</span> b<span class="op">;</span></span>
<span id="cb83-7"><a href="#cb83-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb83-8"><a href="#cb83-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>xgetcolor<span class="op">(</span>is_osc4 <span class="op">?</span> num <span class="op">:</span> index<span class="op">,</span> <span class="op">&amp;</span>r<span class="op">,</span> <span class="op">&amp;</span>g<span class="op">,</span> <span class="op">&amp;</span>b<span class="op">))</span> <span class="op">{</span></span>
<span id="cb83-9"><a href="#cb83-9" aria-hidden="true" tabindex="-1"></a>                fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;erresc: failed to fetch %s color %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb83-10"><a href="#cb83-10" aria-hidden="true" tabindex="-1"></a>                        is_osc4 <span class="op">?</span> <span class="st">&quot;osc4&quot;</span> <span class="op">:</span> <span class="st">&quot;osc&quot;</span><span class="op">,</span></span>
<span id="cb83-11"><a href="#cb83-11" aria-hidden="true" tabindex="-1"></a>                        is_osc4 <span class="op">?</span> num <span class="op">:</span> index<span class="op">);</span></span>
<span id="cb83-12"><a href="#cb83-12" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb83-13"><a href="#cb83-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb83-14"><a href="#cb83-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb83-15"><a href="#cb83-15" aria-hidden="true" tabindex="-1"></a>        n <span class="op">=</span> snprintf<span class="op">(</span>buf<span class="op">,</span> <span class="kw">sizeof</span> buf<span class="op">,</span> <span class="st">&quot;</span><span class="sc">\033</span><span class="st">]%s%d;rgb:%02x%02x/%02x%02x/%02x%02x</span><span class="sc">\007</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb83-16"><a href="#cb83-16" aria-hidden="true" tabindex="-1"></a>                     is_osc4 <span class="op">?</span> <span class="st">&quot;4;&quot;</span> <span class="op">:</span> <span class="st">&quot;&quot;</span><span class="op">,</span> num<span class="op">,</span> r<span class="op">,</span> r<span class="op">,</span> g<span class="op">,</span> g<span class="op">,</span> b<span class="op">,</span> b<span class="op">);</span></span>
<span id="cb83-17"><a href="#cb83-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>n <span class="op">&lt;</span> <span class="dv">0</span> <span class="op">||</span> n <span class="op">&gt;=</span> <span class="kw">sizeof</span><span class="op">(</span>buf<span class="op">))</span> <span class="op">{</span></span>
<span id="cb83-18"><a href="#cb83-18" aria-hidden="true" tabindex="-1"></a>                fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;error: %s while printing %s response</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb83-19"><a href="#cb83-19" aria-hidden="true" tabindex="-1"></a>                        n <span class="op">&lt;</span> <span class="dv">0</span> <span class="op">?</span> <span class="st">&quot;snprintf failed&quot;</span> <span class="op">:</span> <span class="st">&quot;truncation occurred&quot;</span><span class="op">,</span></span>
<span id="cb83-20"><a href="#cb83-20" aria-hidden="true" tabindex="-1"></a>                        is_osc4 <span class="op">?</span> <span class="st">&quot;osc4&quot;</span> <span class="op">:</span> <span class="st">&quot;osc&quot;</span><span class="op">);</span></span>
<span id="cb83-21"><a href="#cb83-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb83-22"><a href="#cb83-22" aria-hidden="true" tabindex="-1"></a>                ttywrite<span class="op">(</span>buf<span class="op">,</span> n<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb83-23"><a href="#cb83-23" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb83-24"><a href="#cb83-24" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb83-25"><a href="#cb83-25" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>strhandle</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb84"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb84-1"><a href="#cb84-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb84-2"><a href="#cb84-2" aria-hidden="true" tabindex="-1"></a>strhandle<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb84-3"><a href="#cb84-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb84-4"><a href="#cb84-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>p <span class="op">=</span> NULL<span class="op">,</span> <span class="op">*</span>dec<span class="op">;</span></span>
<span id="cb84-5"><a href="#cb84-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> j<span class="op">,</span> narg<span class="op">,</span> par<span class="op">;</span></span>
<span id="cb84-6"><a href="#cb84-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">const</span> <span class="kw">struct</span> <span class="op">{</span> <span class="dt">int</span> idx<span class="op">;</span> <span class="dt">char</span> <span class="op">*</span>str<span class="op">;</span> <span class="op">}</span> osc_table<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb84-7"><a href="#cb84-7" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span> defaultfg<span class="op">,</span> <span class="st">&quot;foreground&quot;</span> <span class="op">},</span></span>
<span id="cb84-8"><a href="#cb84-8" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span> defaultbg<span class="op">,</span> <span class="st">&quot;background&quot;</span> <span class="op">},</span></span>
<span id="cb84-9"><a href="#cb84-9" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span> defaultcs<span class="op">,</span> <span class="st">&quot;cursor&quot;</span> <span class="op">}</span></span>
<span id="cb84-10"><a href="#cb84-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb84-11"><a href="#cb84-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb84-12"><a href="#cb84-12" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>esc <span class="op">&amp;=</span> <span class="op">~(</span>ESC_STR_END<span class="op">|</span>ESC_STR<span class="op">);</span></span>
<span id="cb84-13"><a href="#cb84-13" aria-hidden="true" tabindex="-1"></a>        strparse<span class="op">();</span></span>
<span id="cb84-14"><a href="#cb84-14" aria-hidden="true" tabindex="-1"></a>        par <span class="op">=</span> <span class="op">(</span>narg <span class="op">=</span> strescseq<span class="op">.</span>narg<span class="op">)</span> <span class="op">?</span> atoi<span class="op">(</span>strescseq<span class="op">.</span>args<span class="op">[</span><span class="dv">0</span><span class="op">])</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb84-15"><a href="#cb84-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb84-16"><a href="#cb84-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>strescseq<span class="op">.</span>type<span class="op">)</span> <span class="op">{</span></span>
<span id="cb84-17"><a href="#cb84-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;]&#39;</span><span class="op">:</span> <span class="co">/* OSC -- Operating System Command */</span></span>
<span id="cb84-18"><a href="#cb84-18" aria-hidden="true" tabindex="-1"></a>                <span class="cf">switch</span> <span class="op">(</span>par<span class="op">)</span> <span class="op">{</span></span>
<span id="cb84-19"><a href="#cb84-19" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span></span>
<span id="cb84-20"><a href="#cb84-20" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>narg <span class="op">&gt;</span> <span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb84-21"><a href="#cb84-21" aria-hidden="true" tabindex="-1"></a>                                xsettitle<span class="op">(</span>strescseq<span class="op">.</span>args<span class="op">[</span><span class="dv">1</span><span class="op">]);</span></span>
<span id="cb84-22"><a href="#cb84-22" aria-hidden="true" tabindex="-1"></a>                                xseticontitle<span class="op">(</span>strescseq<span class="op">.</span>args<span class="op">[</span><span class="dv">1</span><span class="op">]);</span></span>
<span id="cb84-23"><a href="#cb84-23" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb84-24"><a href="#cb84-24" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb84-25"><a href="#cb84-25" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span></span>
<span id="cb84-26"><a href="#cb84-26" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>narg <span class="op">&gt;</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb84-27"><a href="#cb84-27" aria-hidden="true" tabindex="-1"></a>                                xseticontitle<span class="op">(</span>strescseq<span class="op">.</span>args<span class="op">[</span><span class="dv">1</span><span class="op">]);</span></span>
<span id="cb84-28"><a href="#cb84-28" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb84-29"><a href="#cb84-29" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span></span>
<span id="cb84-30"><a href="#cb84-30" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>narg <span class="op">&gt;</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb84-31"><a href="#cb84-31" aria-hidden="true" tabindex="-1"></a>                                xsettitle<span class="op">(</span>strescseq<span class="op">.</span>args<span class="op">[</span><span class="dv">1</span><span class="op">]);</span></span>
<span id="cb84-32"><a href="#cb84-32" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb84-33"><a href="#cb84-33" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">52</span><span class="op">:</span></span>
<span id="cb84-34"><a href="#cb84-34" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>narg <span class="op">&gt;</span> <span class="dv">2</span> <span class="op">&amp;&amp;</span> allowwindowops<span class="op">)</span> <span class="op">{</span></span>
<span id="cb84-35"><a href="#cb84-35" aria-hidden="true" tabindex="-1"></a>                                dec <span class="op">=</span> base64dec<span class="op">(</span>strescseq<span class="op">.</span>args<span class="op">[</span><span class="dv">2</span><span class="op">]);</span></span>
<span id="cb84-36"><a href="#cb84-36" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(</span>dec<span class="op">)</span> <span class="op">{</span></span>
<span id="cb84-37"><a href="#cb84-37" aria-hidden="true" tabindex="-1"></a>                                        xsetsel<span class="op">(</span>dec<span class="op">);</span></span>
<span id="cb84-38"><a href="#cb84-38" aria-hidden="true" tabindex="-1"></a>                                        xclipcopy<span class="op">();</span></span>
<span id="cb84-39"><a href="#cb84-39" aria-hidden="true" tabindex="-1"></a>                                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb84-40"><a href="#cb84-40" aria-hidden="true" tabindex="-1"></a>                                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;erresc: invalid base64</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb84-41"><a href="#cb84-41" aria-hidden="true" tabindex="-1"></a>                                <span class="op">}</span></span>
<span id="cb84-42"><a href="#cb84-42" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb84-43"><a href="#cb84-43" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb84-44"><a href="#cb84-44" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">10</span><span class="op">:</span></span>
<span id="cb84-45"><a href="#cb84-45" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">11</span><span class="op">:</span></span>
<span id="cb84-46"><a href="#cb84-46" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">12</span><span class="op">:</span></span>
<span id="cb84-47"><a href="#cb84-47" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>narg <span class="op">&lt;</span> <span class="dv">2</span><span class="op">)</span></span>
<span id="cb84-48"><a href="#cb84-48" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb84-49"><a href="#cb84-49" aria-hidden="true" tabindex="-1"></a>                        p <span class="op">=</span> strescseq<span class="op">.</span>args<span class="op">[</span><span class="dv">1</span><span class="op">];</span></span>
<span id="cb84-50"><a href="#cb84-50" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">((</span>j <span class="op">=</span> par <span class="op">-</span> <span class="dv">10</span><span class="op">)</span> <span class="op">&lt;</span> <span class="dv">0</span> <span class="op">||</span> j <span class="op">&gt;=</span> LEN<span class="op">(</span>osc_table<span class="op">))</span></span>
<span id="cb84-51"><a href="#cb84-51" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span> <span class="co">/* shouldn&#39;t be possible */</span></span>
<span id="cb84-52"><a href="#cb84-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb84-53"><a href="#cb84-53" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(!</span>strcmp<span class="op">(</span>p<span class="op">,</span> <span class="st">&quot;?&quot;</span><span class="op">))</span> <span class="op">{</span></span>
<span id="cb84-54"><a href="#cb84-54" aria-hidden="true" tabindex="-1"></a>                                osc_color_response<span class="op">(</span>par<span class="op">,</span> osc_table<span class="op">[</span>j<span class="op">].</span>idx<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb84-55"><a href="#cb84-55" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>xsetcolorname<span class="op">(</span>osc_table<span class="op">[</span>j<span class="op">].</span>idx<span class="op">,</span> p<span class="op">))</span> <span class="op">{</span></span>
<span id="cb84-56"><a href="#cb84-56" aria-hidden="true" tabindex="-1"></a>                                fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;erresc: invalid %s color: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb84-57"><a href="#cb84-57" aria-hidden="true" tabindex="-1"></a>                                        osc_table<span class="op">[</span>j<span class="op">].</span>str<span class="op">,</span> p<span class="op">);</span></span>
<span id="cb84-58"><a href="#cb84-58" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb84-59"><a href="#cb84-59" aria-hidden="true" tabindex="-1"></a>                                tfulldirt<span class="op">();</span></span>
<span id="cb84-60"><a href="#cb84-60" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb84-61"><a href="#cb84-61" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb84-62"><a href="#cb84-62" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">4</span><span class="op">:</span> <span class="co">/* color set */</span></span>
<span id="cb84-63"><a href="#cb84-63" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>narg <span class="op">&lt;</span> <span class="dv">3</span><span class="op">)</span></span>
<span id="cb84-64"><a href="#cb84-64" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb84-65"><a href="#cb84-65" aria-hidden="true" tabindex="-1"></a>                        p <span class="op">=</span> strescseq<span class="op">.</span>args<span class="op">[</span><span class="dv">2</span><span class="op">];</span></span>
<span id="cb84-66"><a href="#cb84-66" aria-hidden="true" tabindex="-1"></a>                        <span class="co">/* FALLTHROUGH */</span></span>
<span id="cb84-67"><a href="#cb84-67" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">104</span><span class="op">:</span> <span class="co">/* color reset */</span></span>
<span id="cb84-68"><a href="#cb84-68" aria-hidden="true" tabindex="-1"></a>                        j <span class="op">=</span> <span class="op">(</span>narg <span class="op">&gt;</span> <span class="dv">1</span><span class="op">)</span> <span class="op">?</span> atoi<span class="op">(</span>strescseq<span class="op">.</span>args<span class="op">[</span><span class="dv">1</span><span class="op">])</span> <span class="op">:</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb84-69"><a href="#cb84-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb84-70"><a href="#cb84-70" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>p <span class="op">&amp;&amp;</span> <span class="op">!</span>strcmp<span class="op">(</span>p<span class="op">,</span> <span class="st">&quot;?&quot;</span><span class="op">))</span> <span class="op">{</span></span>
<span id="cb84-71"><a href="#cb84-71" aria-hidden="true" tabindex="-1"></a>                                osc_color_response<span class="op">(</span>j<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb84-72"><a href="#cb84-72" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>xsetcolorname<span class="op">(</span>j<span class="op">,</span> p<span class="op">))</span> <span class="op">{</span></span>
<span id="cb84-73"><a href="#cb84-73" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">if</span> <span class="op">(</span>par <span class="op">==</span> <span class="dv">104</span> <span class="op">&amp;&amp;</span> narg <span class="op">&lt;=</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb84-74"><a href="#cb84-74" aria-hidden="true" tabindex="-1"></a>                                        <span class="cf">return</span><span class="op">;</span> <span class="co">/* color reset without parameter */</span></span>
<span id="cb84-75"><a href="#cb84-75" aria-hidden="true" tabindex="-1"></a>                                fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;erresc: invalid color j=%d, p=%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb84-76"><a href="#cb84-76" aria-hidden="true" tabindex="-1"></a>                                        j<span class="op">,</span> p <span class="op">?</span> p <span class="op">:</span> <span class="st">&quot;(null)&quot;</span><span class="op">);</span></span>
<span id="cb84-77"><a href="#cb84-77" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb84-78"><a href="#cb84-78" aria-hidden="true" tabindex="-1"></a>                                <span class="co">/*</span></span>
<span id="cb84-79"><a href="#cb84-79" aria-hidden="true" tabindex="-1"></a><span class="co">                                 * </span><span class="al">TODO</span><span class="co"> if defaultbg color is changed, borders</span></span>
<span id="cb84-80"><a href="#cb84-80" aria-hidden="true" tabindex="-1"></a><span class="co">                                 * are dirty</span></span>
<span id="cb84-81"><a href="#cb84-81" aria-hidden="true" tabindex="-1"></a><span class="co">                                 */</span></span>
<span id="cb84-82"><a href="#cb84-82" aria-hidden="true" tabindex="-1"></a>                                tfulldirt<span class="op">();</span></span>
<span id="cb84-83"><a href="#cb84-83" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb84-84"><a href="#cb84-84" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb84-85"><a href="#cb84-85" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb84-86"><a href="#cb84-86" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb84-87"><a href="#cb84-87" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;k&#39;</span><span class="op">:</span> <span class="co">/* old title set compatibility */</span></span>
<span id="cb84-88"><a href="#cb84-88" aria-hidden="true" tabindex="-1"></a>                xsettitle<span class="op">(</span>strescseq<span class="op">.</span>args<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb84-89"><a href="#cb84-89" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb84-90"><a href="#cb84-90" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;P&#39;</span><span class="op">:</span> <span class="co">/* DCS -- Device Control String */</span></span>
<span id="cb84-91"><a href="#cb84-91" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;_&#39;</span><span class="op">:</span> <span class="co">/* APC -- Application Program Command */</span></span>
<span id="cb84-92"><a href="#cb84-92" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;^&#39;</span><span class="op">:</span> <span class="co">/* PM -- Privacy Message */</span></span>
<span id="cb84-93"><a href="#cb84-93" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb84-94"><a href="#cb84-94" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb84-95"><a href="#cb84-95" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb84-96"><a href="#cb84-96" aria-hidden="true" tabindex="-1"></a>        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;erresc: unknown str &quot;</span><span class="op">);</span></span>
<span id="cb84-97"><a href="#cb84-97" aria-hidden="true" tabindex="-1"></a>        strdump<span class="op">();</span></span>
<span id="cb84-98"><a href="#cb84-98" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb84-99"><a href="#cb84-99" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>strparse</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb85"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb85-1"><a href="#cb85-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb85-2"><a href="#cb85-2" aria-hidden="true" tabindex="-1"></a>strparse<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb85-3"><a href="#cb85-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb85-4"><a href="#cb85-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> c<span class="op">;</span></span>
<span id="cb85-5"><a href="#cb85-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>p <span class="op">=</span> strescseq<span class="op">.</span>buf<span class="op">;</span></span>
<span id="cb85-6"><a href="#cb85-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb85-7"><a href="#cb85-7" aria-hidden="true" tabindex="-1"></a>        strescseq<span class="op">.</span>narg <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb85-8"><a href="#cb85-8" aria-hidden="true" tabindex="-1"></a>        strescseq<span class="op">.</span>buf<span class="op">[</span>strescseq<span class="op">.</span>len<span class="op">]</span> <span class="op">=</span> <span class="ch">&#39;\0&#39;</span><span class="op">;</span></span>
<span id="cb85-9"><a href="#cb85-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb85-10"><a href="#cb85-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(*</span>p <span class="op">==</span> <span class="ch">&#39;\0&#39;</span><span class="op">)</span></span>
<span id="cb85-11"><a href="#cb85-11" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb85-12"><a href="#cb85-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb85-13"><a href="#cb85-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(</span>strescseq<span class="op">.</span>narg <span class="op">&lt;</span> STR_ARG_SIZ<span class="op">)</span> <span class="op">{</span></span>
<span id="cb85-14"><a href="#cb85-14" aria-hidden="true" tabindex="-1"></a>                strescseq<span class="op">.</span>args<span class="op">[</span>strescseq<span class="op">.</span>narg<span class="op">++]</span> <span class="op">=</span> p<span class="op">;</span></span>
<span id="cb85-15"><a href="#cb85-15" aria-hidden="true" tabindex="-1"></a>                <span class="cf">while</span> <span class="op">((</span>c <span class="op">=</span> <span class="op">*</span>p<span class="op">)</span> <span class="op">!=</span> <span class="ch">&#39;;&#39;</span> <span class="op">&amp;&amp;</span> c <span class="op">!=</span> <span class="ch">&#39;\0&#39;</span><span class="op">)</span></span>
<span id="cb85-16"><a href="#cb85-16" aria-hidden="true" tabindex="-1"></a>                        <span class="op">++</span>p<span class="op">;</span></span>
<span id="cb85-17"><a href="#cb85-17" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>c <span class="op">==</span> <span class="ch">&#39;\0&#39;</span><span class="op">)</span></span>
<span id="cb85-18"><a href="#cb85-18" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb85-19"><a href="#cb85-19" aria-hidden="true" tabindex="-1"></a>                <span class="op">*</span>p<span class="op">++</span> <span class="op">=</span> <span class="ch">&#39;\0&#39;</span><span class="op">;</span></span>
<span id="cb85-20"><a href="#cb85-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb85-21"><a href="#cb85-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb85-22"><a href="#cb85-22" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>strdump</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb86"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb86-1"><a href="#cb86-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb86-2"><a href="#cb86-2" aria-hidden="true" tabindex="-1"></a>strdump<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb86-3"><a href="#cb86-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb86-4"><a href="#cb86-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> i<span class="op">;</span></span>
<span id="cb86-5"><a href="#cb86-5" aria-hidden="true" tabindex="-1"></a>        uint c<span class="op">;</span></span>
<span id="cb86-6"><a href="#cb86-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb86-7"><a href="#cb86-7" aria-hidden="true" tabindex="-1"></a>        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;ESC%c&quot;</span><span class="op">,</span> strescseq<span class="op">.</span>type<span class="op">);</span></span>
<span id="cb86-8"><a href="#cb86-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> strescseq<span class="op">.</span>len<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb86-9"><a href="#cb86-9" aria-hidden="true" tabindex="-1"></a>                c <span class="op">=</span> strescseq<span class="op">.</span>buf<span class="op">[</span>i<span class="op">]</span> <span class="op">&amp;</span> <span class="bn">0xff</span><span class="op">;</span></span>
<span id="cb86-10"><a href="#cb86-10" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>c <span class="op">==</span> <span class="ch">&#39;\0&#39;</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb86-11"><a href="#cb86-11" aria-hidden="true" tabindex="-1"></a>                        putc<span class="op">(</span><span class="ch">&#39;\n&#39;</span><span class="op">,</span> stderr<span class="op">);</span></span>
<span id="cb86-12"><a href="#cb86-12" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb86-13"><a href="#cb86-13" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>isprint<span class="op">(</span>c<span class="op">))</span> <span class="op">{</span></span>
<span id="cb86-14"><a href="#cb86-14" aria-hidden="true" tabindex="-1"></a>                        putc<span class="op">(</span>c<span class="op">,</span> stderr<span class="op">);</span></span>
<span id="cb86-15"><a href="#cb86-15" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>c <span class="op">==</span> <span class="ch">&#39;\n&#39;</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb86-16"><a href="#cb86-16" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;(</span><span class="sc">\\</span><span class="st">n)&quot;</span><span class="op">);</span></span>
<span id="cb86-17"><a href="#cb86-17" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>c <span class="op">==</span> <span class="ch">&#39;\r&#39;</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb86-18"><a href="#cb86-18" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;(</span><span class="sc">\\</span><span class="st">r)&quot;</span><span class="op">);</span></span>
<span id="cb86-19"><a href="#cb86-19" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>c <span class="op">==</span> <span class="bn">0x1b</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb86-20"><a href="#cb86-20" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;(</span><span class="sc">\\</span><span class="st">e)&quot;</span><span class="op">);</span></span>
<span id="cb86-21"><a href="#cb86-21" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb86-22"><a href="#cb86-22" aria-hidden="true" tabindex="-1"></a>                        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;(%02x)&quot;</span><span class="op">,</span> c<span class="op">);</span></span>
<span id="cb86-23"><a href="#cb86-23" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb86-24"><a href="#cb86-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb86-25"><a href="#cb86-25" aria-hidden="true" tabindex="-1"></a>        fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;ESC</span><span class="sc">\\\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb86-26"><a href="#cb86-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb86-27"><a href="#cb86-27" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>strreset</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb87"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb87-1"><a href="#cb87-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb87-2"><a href="#cb87-2" aria-hidden="true" tabindex="-1"></a>strreset<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb87-3"><a href="#cb87-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb87-4"><a href="#cb87-4" aria-hidden="true" tabindex="-1"></a>        strescseq <span class="op">=</span> <span class="op">(</span>STREscape<span class="op">){</span></span>
<span id="cb87-5"><a href="#cb87-5" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span>buf <span class="op">=</span> xrealloc<span class="op">(</span>strescseq<span class="op">.</span>buf<span class="op">,</span> STR_BUF_SIZ<span class="op">),</span></span>
<span id="cb87-6"><a href="#cb87-6" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span>siz <span class="op">=</span> STR_BUF_SIZ<span class="op">,</span></span>
<span id="cb87-7"><a href="#cb87-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb87-8"><a href="#cb87-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb87-9"><a href="#cb87-9" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>sendbreak</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb88"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb88-1"><a href="#cb88-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb88-2"><a href="#cb88-2" aria-hidden="true" tabindex="-1"></a>sendbreak<span class="op">(</span><span class="dt">const</span> Arg <span class="op">*</span>arg<span class="op">)</span></span>
<span id="cb88-3"><a href="#cb88-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb88-4"><a href="#cb88-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>tcsendbreak<span class="op">(</span>cmdfd<span class="op">,</span> <span class="dv">0</span><span class="op">))</span></span>
<span id="cb88-5"><a href="#cb88-5" aria-hidden="true" tabindex="-1"></a>                perror<span class="op">(</span><span class="st">&quot;Error sending break&quot;</span><span class="op">);</span></span>
<span id="cb88-6"><a href="#cb88-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb88-7"><a href="#cb88-7" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tprinter</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb89"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb89-1"><a href="#cb89-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb89-2"><a href="#cb89-2" aria-hidden="true" tabindex="-1"></a>tprinter<span class="op">(</span><span class="dt">char</span> <span class="op">*</span>s<span class="op">,</span> <span class="dt">size_t</span> len<span class="op">)</span></span>
<span id="cb89-3"><a href="#cb89-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb89-4"><a href="#cb89-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>iofd <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span> <span class="op">&amp;&amp;</span> xwrite<span class="op">(</span>iofd<span class="op">,</span> s<span class="op">,</span> len<span class="op">)</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb89-5"><a href="#cb89-5" aria-hidden="true" tabindex="-1"></a>                perror<span class="op">(</span><span class="st">&quot;Error writing to output file&quot;</span><span class="op">);</span></span>
<span id="cb89-6"><a href="#cb89-6" aria-hidden="true" tabindex="-1"></a>                close<span class="op">(</span>iofd<span class="op">);</span></span>
<span id="cb89-7"><a href="#cb89-7" aria-hidden="true" tabindex="-1"></a>                iofd <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb89-8"><a href="#cb89-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb89-9"><a href="#cb89-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb89-10"><a href="#cb89-10" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>toggleprinter</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb90"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb90-1"><a href="#cb90-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb90-2"><a href="#cb90-2" aria-hidden="true" tabindex="-1"></a>toggleprinter<span class="op">(</span><span class="dt">const</span> Arg <span class="op">*</span>arg<span class="op">)</span></span>
<span id="cb90-3"><a href="#cb90-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb90-4"><a href="#cb90-4" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>mode <span class="op">^=</span> MODE_PRINT<span class="op">;</span></span>
<span id="cb90-5"><a href="#cb90-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb90-6"><a href="#cb90-6" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>printscreen</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb91"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb91-1"><a href="#cb91-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb91-2"><a href="#cb91-2" aria-hidden="true" tabindex="-1"></a>printscreen<span class="op">(</span><span class="dt">const</span> Arg <span class="op">*</span>arg<span class="op">)</span></span>
<span id="cb91-3"><a href="#cb91-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb91-4"><a href="#cb91-4" aria-hidden="true" tabindex="-1"></a>        tdump<span class="op">();</span></span>
<span id="cb91-5"><a href="#cb91-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb91-6"><a href="#cb91-6" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>printsel</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb92"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb92-1"><a href="#cb92-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb92-2"><a href="#cb92-2" aria-hidden="true" tabindex="-1"></a>printsel<span class="op">(</span><span class="dt">const</span> Arg <span class="op">*</span>arg<span class="op">)</span></span>
<span id="cb92-3"><a href="#cb92-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb92-4"><a href="#cb92-4" aria-hidden="true" tabindex="-1"></a>        tdumpsel<span class="op">();</span></span>
<span id="cb92-5"><a href="#cb92-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb92-6"><a href="#cb92-6" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tdumpsel</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb93"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb93-1"><a href="#cb93-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb93-2"><a href="#cb93-2" aria-hidden="true" tabindex="-1"></a>tdumpsel<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb93-3"><a href="#cb93-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb93-4"><a href="#cb93-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>ptr<span class="op">;</span></span>
<span id="cb93-5"><a href="#cb93-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb93-6"><a href="#cb93-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">((</span>ptr <span class="op">=</span> getsel<span class="op">()))</span> <span class="op">{</span></span>
<span id="cb93-7"><a href="#cb93-7" aria-hidden="true" tabindex="-1"></a>                tprinter<span class="op">(</span>ptr<span class="op">,</span> strlen<span class="op">(</span>ptr<span class="op">));</span></span>
<span id="cb93-8"><a href="#cb93-8" aria-hidden="true" tabindex="-1"></a>                free<span class="op">(</span>ptr<span class="op">);</span></span>
<span id="cb93-9"><a href="#cb93-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb93-10"><a href="#cb93-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb93-11"><a href="#cb93-11" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tdumpline</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb94"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb94-1"><a href="#cb94-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb94-2"><a href="#cb94-2" aria-hidden="true" tabindex="-1"></a>tdumpline<span class="op">(</span><span class="dt">int</span> n<span class="op">)</span></span>
<span id="cb94-3"><a href="#cb94-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb94-4"><a href="#cb94-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> buf<span class="op">[</span>UTF_SIZ<span class="op">];</span></span>
<span id="cb94-5"><a href="#cb94-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">const</span> Glyph <span class="op">*</span>bp<span class="op">,</span> <span class="op">*</span>end<span class="op">;</span></span>
<span id="cb94-6"><a href="#cb94-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb94-7"><a href="#cb94-7" aria-hidden="true" tabindex="-1"></a>        bp <span class="op">=</span> <span class="op">&amp;</span>term<span class="op">.</span>line<span class="op">[</span>n<span class="op">][</span><span class="dv">0</span><span class="op">];</span></span>
<span id="cb94-8"><a href="#cb94-8" aria-hidden="true" tabindex="-1"></a>        end <span class="op">=</span> <span class="op">&amp;</span>bp<span class="op">[</span>MIN<span class="op">(</span>tlinelen<span class="op">(</span>n<span class="op">),</span> term<span class="op">.</span>col<span class="op">)</span> <span class="op">-</span> <span class="dv">1</span><span class="op">];</span></span>
<span id="cb94-9"><a href="#cb94-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>bp <span class="op">!=</span> end <span class="op">||</span> bp<span class="op">-&gt;</span>u <span class="op">!=</span> <span class="ch">&#39; &#39;</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb94-10"><a href="#cb94-10" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span> <span class="op">;</span> bp <span class="op">&lt;=</span> end<span class="op">;</span> <span class="op">++</span>bp<span class="op">)</span></span>
<span id="cb94-11"><a href="#cb94-11" aria-hidden="true" tabindex="-1"></a>                        tprinter<span class="op">(</span>buf<span class="op">,</span> utf8encode<span class="op">(</span>bp<span class="op">-&gt;</span>u<span class="op">,</span> buf<span class="op">));</span></span>
<span id="cb94-12"><a href="#cb94-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb94-13"><a href="#cb94-13" aria-hidden="true" tabindex="-1"></a>        tprinter<span class="op">(</span><span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb94-14"><a href="#cb94-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb94-15"><a href="#cb94-15" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tdump</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb95"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb95-1"><a href="#cb95-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb95-2"><a href="#cb95-2" aria-hidden="true" tabindex="-1"></a>tdump<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb95-3"><a href="#cb95-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb95-4"><a href="#cb95-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i<span class="op">;</span></span>
<span id="cb95-5"><a href="#cb95-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb95-6"><a href="#cb95-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> term<span class="op">.</span>row<span class="op">;</span> <span class="op">++</span>i<span class="op">)</span></span>
<span id="cb95-7"><a href="#cb95-7" aria-hidden="true" tabindex="-1"></a>                tdumpline<span class="op">(</span>i<span class="op">);</span></span>
<span id="cb95-8"><a href="#cb95-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb95-9"><a href="#cb95-9" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tputtab</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb96"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb96-1"><a href="#cb96-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb96-2"><a href="#cb96-2" aria-hidden="true" tabindex="-1"></a>tputtab<span class="op">(</span><span class="dt">int</span> n<span class="op">)</span></span>
<span id="cb96-3"><a href="#cb96-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb96-4"><a href="#cb96-4" aria-hidden="true" tabindex="-1"></a>        uint x <span class="op">=</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">;</span></span>
<span id="cb96-5"><a href="#cb96-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb96-6"><a href="#cb96-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>n <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb96-7"><a href="#cb96-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">while</span> <span class="op">(</span>x <span class="op">&lt;</span> term<span class="op">.</span>col <span class="op">&amp;&amp;</span> n<span class="op">--)</span></span>
<span id="cb96-8"><a href="#cb96-8" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">for</span> <span class="op">(++</span>x<span class="op">;</span> x <span class="op">&lt;</span> term<span class="op">.</span>col <span class="op">&amp;&amp;</span> <span class="op">!</span>term<span class="op">.</span>tabs<span class="op">[</span>x<span class="op">];</span> <span class="op">++</span>x<span class="op">)</span></span>
<span id="cb96-9"><a href="#cb96-9" aria-hidden="true" tabindex="-1"></a>                                <span class="co">/* nothing */</span> <span class="op">;</span></span>
<span id="cb96-10"><a href="#cb96-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>n <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb96-11"><a href="#cb96-11" aria-hidden="true" tabindex="-1"></a>                <span class="cf">while</span> <span class="op">(</span>x <span class="op">&gt;</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> n<span class="op">++)</span></span>
<span id="cb96-12"><a href="#cb96-12" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">for</span> <span class="op">(--</span>x<span class="op">;</span> x <span class="op">&gt;</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> <span class="op">!</span>term<span class="op">.</span>tabs<span class="op">[</span>x<span class="op">];</span> <span class="op">--</span>x<span class="op">)</span></span>
<span id="cb96-13"><a href="#cb96-13" aria-hidden="true" tabindex="-1"></a>                                <span class="co">/* nothing */</span> <span class="op">;</span></span>
<span id="cb96-14"><a href="#cb96-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb96-15"><a href="#cb96-15" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>c<span class="op">.</span>x <span class="op">=</span> LIMIT<span class="op">(</span>x<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb96-16"><a href="#cb96-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb96-17"><a href="#cb96-17" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tdefutf8</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb97"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb97-1"><a href="#cb97-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb97-2"><a href="#cb97-2" aria-hidden="true" tabindex="-1"></a>tdefutf8<span class="op">(</span><span class="dt">char</span> ascii<span class="op">)</span></span>
<span id="cb97-3"><a href="#cb97-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb97-4"><a href="#cb97-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>ascii <span class="op">==</span> <span class="ch">&#39;G&#39;</span><span class="op">)</span></span>
<span id="cb97-5"><a href="#cb97-5" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>mode <span class="op">|=</span> MODE_UTF8<span class="op">;</span></span>
<span id="cb97-6"><a href="#cb97-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>ascii <span class="op">==</span> <span class="ch">&#39;@&#39;</span><span class="op">)</span></span>
<span id="cb97-7"><a href="#cb97-7" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>mode <span class="op">&amp;=</span> <span class="op">~</span>MODE_UTF8<span class="op">;</span></span>
<span id="cb97-8"><a href="#cb97-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb97-9"><a href="#cb97-9" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tdeftran</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb98"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb98-1"><a href="#cb98-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb98-2"><a href="#cb98-2" aria-hidden="true" tabindex="-1"></a>tdeftran<span class="op">(</span><span class="dt">char</span> ascii<span class="op">)</span></span>
<span id="cb98-3"><a href="#cb98-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb98-4"><a href="#cb98-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">static</span> <span class="dt">char</span> cs<span class="op">[]</span> <span class="op">=</span> <span class="st">&quot;0B&quot;</span><span class="op">;</span></span>
<span id="cb98-5"><a href="#cb98-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">static</span> <span class="dt">int</span> vcs<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span>CS_GRAPHIC0<span class="op">,</span> CS_USA<span class="op">};</span></span>
<span id="cb98-6"><a href="#cb98-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span>p<span class="op">;</span></span>
<span id="cb98-7"><a href="#cb98-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb98-8"><a href="#cb98-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">((</span>p <span class="op">=</span> strchr<span class="op">(</span>cs<span class="op">,</span> ascii<span class="op">))</span> <span class="op">==</span> NULL<span class="op">)</span> <span class="op">{</span></span>
<span id="cb98-9"><a href="#cb98-9" aria-hidden="true" tabindex="-1"></a>                fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;esc unhandled charset: ESC ( %c</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> ascii<span class="op">);</span></span>
<span id="cb98-10"><a href="#cb98-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb98-11"><a href="#cb98-11" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>trantbl<span class="op">[</span>term<span class="op">.</span>icharset<span class="op">]</span> <span class="op">=</span> vcs<span class="op">[</span>p <span class="op">-</span> cs<span class="op">];</span></span>
<span id="cb98-12"><a href="#cb98-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb98-13"><a href="#cb98-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb98-14"><a href="#cb98-14" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tdectest</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb99"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb99-1"><a href="#cb99-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb99-2"><a href="#cb99-2" aria-hidden="true" tabindex="-1"></a>tdectest<span class="op">(</span><span class="dt">char</span> c<span class="op">)</span></span>
<span id="cb99-3"><a href="#cb99-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb99-4"><a href="#cb99-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> x<span class="op">,</span> y<span class="op">;</span></span>
<span id="cb99-5"><a href="#cb99-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb99-6"><a href="#cb99-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>c <span class="op">==</span> <span class="ch">&#39;8&#39;</span><span class="op">)</span> <span class="op">{</span> <span class="co">/* DEC screen alignment test. */</span></span>
<span id="cb99-7"><a href="#cb99-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span>x <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> x <span class="op">&lt;</span> term<span class="op">.</span>col<span class="op">;</span> <span class="op">++</span>x<span class="op">)</span> <span class="op">{</span></span>
<span id="cb99-8"><a href="#cb99-8" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">for</span> <span class="op">(</span>y <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> y <span class="op">&lt;</span> term<span class="op">.</span>row<span class="op">;</span> <span class="op">++</span>y<span class="op">)</span></span>
<span id="cb99-9"><a href="#cb99-9" aria-hidden="true" tabindex="-1"></a>                                tsetchar<span class="op">(</span><span class="ch">&#39;E&#39;</span><span class="op">,</span> <span class="op">&amp;</span>term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">,</span> x<span class="op">,</span> y<span class="op">);</span></span>
<span id="cb99-10"><a href="#cb99-10" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb99-11"><a href="#cb99-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb99-12"><a href="#cb99-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb99-13"><a href="#cb99-13" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tstrsequence</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb100"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb100-1"><a href="#cb100-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb100-2"><a href="#cb100-2" aria-hidden="true" tabindex="-1"></a>tstrsequence<span class="op">(</span>uchar c<span class="op">)</span></span>
<span id="cb100-3"><a href="#cb100-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb100-4"><a href="#cb100-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>c<span class="op">)</span> <span class="op">{</span></span>
<span id="cb100-5"><a href="#cb100-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x90</span><span class="op">:</span>   <span class="co">/* DCS -- Device Control String */</span></span>
<span id="cb100-6"><a href="#cb100-6" aria-hidden="true" tabindex="-1"></a>                c <span class="op">=</span> <span class="ch">&#39;P&#39;</span><span class="op">;</span></span>
<span id="cb100-7"><a href="#cb100-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb100-8"><a href="#cb100-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x9f</span><span class="op">:</span>   <span class="co">/* APC -- Application Program Command */</span></span>
<span id="cb100-9"><a href="#cb100-9" aria-hidden="true" tabindex="-1"></a>                c <span class="op">=</span> <span class="ch">&#39;_&#39;</span><span class="op">;</span></span>
<span id="cb100-10"><a href="#cb100-10" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb100-11"><a href="#cb100-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x9e</span><span class="op">:</span>   <span class="co">/* PM -- Privacy Message */</span></span>
<span id="cb100-12"><a href="#cb100-12" aria-hidden="true" tabindex="-1"></a>                c <span class="op">=</span> <span class="ch">&#39;^&#39;</span><span class="op">;</span></span>
<span id="cb100-13"><a href="#cb100-13" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb100-14"><a href="#cb100-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x9d</span><span class="op">:</span>   <span class="co">/* OSC -- Operating System Command */</span></span>
<span id="cb100-15"><a href="#cb100-15" aria-hidden="true" tabindex="-1"></a>                c <span class="op">=</span> <span class="ch">&#39;]&#39;</span><span class="op">;</span></span>
<span id="cb100-16"><a href="#cb100-16" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb100-17"><a href="#cb100-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb100-18"><a href="#cb100-18" aria-hidden="true" tabindex="-1"></a>        strreset<span class="op">();</span></span>
<span id="cb100-19"><a href="#cb100-19" aria-hidden="true" tabindex="-1"></a>        strescseq<span class="op">.</span>type <span class="op">=</span> c<span class="op">;</span></span>
<span id="cb100-20"><a href="#cb100-20" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>esc <span class="op">|=</span> ESC_STR<span class="op">;</span></span>
<span id="cb100-21"><a href="#cb100-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb100-22"><a href="#cb100-22" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tcontrolcode</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb101"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb101-1"><a href="#cb101-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb101-2"><a href="#cb101-2" aria-hidden="true" tabindex="-1"></a>tcontrolcode<span class="op">(</span>uchar ascii<span class="op">)</span></span>
<span id="cb101-3"><a href="#cb101-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb101-4"><a href="#cb101-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>ascii<span class="op">)</span> <span class="op">{</span></span>
<span id="cb101-5"><a href="#cb101-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\t&#39;</span><span class="op">:</span>   <span class="co">/* HT */</span></span>
<span id="cb101-6"><a href="#cb101-6" aria-hidden="true" tabindex="-1"></a>                tputtab<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb101-7"><a href="#cb101-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb101-8"><a href="#cb101-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\b&#39;</span><span class="op">:</span>   <span class="co">/* BS */</span></span>
<span id="cb101-9"><a href="#cb101-9" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">-</span><span class="dv">1</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb101-10"><a href="#cb101-10" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb101-11"><a href="#cb101-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\r&#39;</span><span class="op">:</span>   <span class="co">/* CR */</span></span>
<span id="cb101-12"><a href="#cb101-12" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span><span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb101-13"><a href="#cb101-13" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb101-14"><a href="#cb101-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\f&#39;</span><span class="op">:</span>   <span class="co">/* LF */</span></span>
<span id="cb101-15"><a href="#cb101-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\v&#39;</span><span class="op">:</span>   <span class="co">/* VT */</span></span>
<span id="cb101-16"><a href="#cb101-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\n&#39;</span><span class="op">:</span>   <span class="co">/* LF */</span></span>
<span id="cb101-17"><a href="#cb101-17" aria-hidden="true" tabindex="-1"></a>                <span class="co">/* go to first col if the mode is set */</span></span>
<span id="cb101-18"><a href="#cb101-18" aria-hidden="true" tabindex="-1"></a>                tnewline<span class="op">(</span>IS_SET<span class="op">(</span>MODE_CRLF<span class="op">));</span></span>
<span id="cb101-19"><a href="#cb101-19" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb101-20"><a href="#cb101-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\a&#39;</span><span class="op">:</span>   <span class="co">/* BEL */</span></span>
<span id="cb101-21"><a href="#cb101-21" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>esc <span class="op">&amp;</span> ESC_STR_END<span class="op">)</span> <span class="op">{</span></span>
<span id="cb101-22"><a href="#cb101-22" aria-hidden="true" tabindex="-1"></a>                        <span class="co">/* backwards compatibility to xterm */</span></span>
<span id="cb101-23"><a href="#cb101-23" aria-hidden="true" tabindex="-1"></a>                        strhandle<span class="op">();</span></span>
<span id="cb101-24"><a href="#cb101-24" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb101-25"><a href="#cb101-25" aria-hidden="true" tabindex="-1"></a>                        xbell<span class="op">();</span></span>
<span id="cb101-26"><a href="#cb101-26" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb101-27"><a href="#cb101-27" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb101-28"><a href="#cb101-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\033&#39;</span><span class="op">:</span> <span class="co">/* ESC */</span></span>
<span id="cb101-29"><a href="#cb101-29" aria-hidden="true" tabindex="-1"></a>                csireset<span class="op">();</span></span>
<span id="cb101-30"><a href="#cb101-30" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>esc <span class="op">&amp;=</span> <span class="op">~(</span>ESC_CSI<span class="op">|</span>ESC_ALTCHARSET<span class="op">|</span>ESC_TEST<span class="op">);</span></span>
<span id="cb101-31"><a href="#cb101-31" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>esc <span class="op">|=</span> ESC_START<span class="op">;</span></span>
<span id="cb101-32"><a href="#cb101-32" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb101-33"><a href="#cb101-33" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\016&#39;</span><span class="op">:</span> <span class="co">/* SO (LS1 -- Locking shift 1) */</span></span>
<span id="cb101-34"><a href="#cb101-34" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\017&#39;</span><span class="op">:</span> <span class="co">/* SI (LS0 -- Locking shift 0) */</span></span>
<span id="cb101-35"><a href="#cb101-35" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>charset <span class="op">=</span> <span class="dv">1</span> <span class="op">-</span> <span class="op">(</span>ascii <span class="op">-</span> <span class="ch">&#39;\016&#39;</span><span class="op">);</span></span>
<span id="cb101-36"><a href="#cb101-36" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb101-37"><a href="#cb101-37" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\032&#39;</span><span class="op">:</span> <span class="co">/* SUB */</span></span>
<span id="cb101-38"><a href="#cb101-38" aria-hidden="true" tabindex="-1"></a>                tsetchar<span class="op">(</span><span class="ch">&#39;?&#39;</span><span class="op">,</span> <span class="op">&amp;</span>term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb101-39"><a href="#cb101-39" aria-hidden="true" tabindex="-1"></a>                <span class="co">/* FALLTHROUGH */</span></span>
<span id="cb101-40"><a href="#cb101-40" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\030&#39;</span><span class="op">:</span> <span class="co">/* CAN */</span></span>
<span id="cb101-41"><a href="#cb101-41" aria-hidden="true" tabindex="-1"></a>                csireset<span class="op">();</span></span>
<span id="cb101-42"><a href="#cb101-42" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb101-43"><a href="#cb101-43" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\005&#39;</span><span class="op">:</span> <span class="co">/* ENQ (IGNORED) */</span></span>
<span id="cb101-44"><a href="#cb101-44" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\000&#39;</span><span class="op">:</span> <span class="co">/* NUL (IGNORED) */</span></span>
<span id="cb101-45"><a href="#cb101-45" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\021&#39;</span><span class="op">:</span> <span class="co">/* XON (IGNORED) */</span></span>
<span id="cb101-46"><a href="#cb101-46" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\023&#39;</span><span class="op">:</span> <span class="co">/* XOFF (IGNORED) */</span></span>
<span id="cb101-47"><a href="#cb101-47" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0177</span><span class="op">:</span>   <span class="co">/* DEL (IGNORED) */</span></span>
<span id="cb101-48"><a href="#cb101-48" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb101-49"><a href="#cb101-49" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x80</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: PAD */</span></span>
<span id="cb101-50"><a href="#cb101-50" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x81</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: HOP */</span></span>
<span id="cb101-51"><a href="#cb101-51" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x82</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: BPH */</span></span>
<span id="cb101-52"><a href="#cb101-52" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x83</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: NBH */</span></span>
<span id="cb101-53"><a href="#cb101-53" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x84</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: IND */</span></span>
<span id="cb101-54"><a href="#cb101-54" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb101-55"><a href="#cb101-55" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x85</span><span class="op">:</span>   <span class="co">/* NEL -- Next line */</span></span>
<span id="cb101-56"><a href="#cb101-56" aria-hidden="true" tabindex="-1"></a>                tnewline<span class="op">(</span><span class="dv">1</span><span class="op">);</span> <span class="co">/* always go to first col */</span></span>
<span id="cb101-57"><a href="#cb101-57" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb101-58"><a href="#cb101-58" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x86</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: SSA */</span></span>
<span id="cb101-59"><a href="#cb101-59" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x87</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: ESA */</span></span>
<span id="cb101-60"><a href="#cb101-60" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb101-61"><a href="#cb101-61" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x88</span><span class="op">:</span>   <span class="co">/* HTS -- Horizontal tab stop */</span></span>
<span id="cb101-62"><a href="#cb101-62" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>tabs<span class="op">[</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">]</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb101-63"><a href="#cb101-63" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb101-64"><a href="#cb101-64" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x89</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: HTJ */</span></span>
<span id="cb101-65"><a href="#cb101-65" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x8a</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: VTS */</span></span>
<span id="cb101-66"><a href="#cb101-66" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x8b</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: PLD */</span></span>
<span id="cb101-67"><a href="#cb101-67" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x8c</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: PLU */</span></span>
<span id="cb101-68"><a href="#cb101-68" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x8d</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: RI */</span></span>
<span id="cb101-69"><a href="#cb101-69" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x8e</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: SS2 */</span></span>
<span id="cb101-70"><a href="#cb101-70" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x8f</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: SS3 */</span></span>
<span id="cb101-71"><a href="#cb101-71" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x91</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: PU1 */</span></span>
<span id="cb101-72"><a href="#cb101-72" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x92</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: PU2 */</span></span>
<span id="cb101-73"><a href="#cb101-73" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x93</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: STS */</span></span>
<span id="cb101-74"><a href="#cb101-74" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x94</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: CCH */</span></span>
<span id="cb101-75"><a href="#cb101-75" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x95</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: MW */</span></span>
<span id="cb101-76"><a href="#cb101-76" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x96</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: SPA */</span></span>
<span id="cb101-77"><a href="#cb101-77" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x97</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: EPA */</span></span>
<span id="cb101-78"><a href="#cb101-78" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x98</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: SOS */</span></span>
<span id="cb101-79"><a href="#cb101-79" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x99</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: SGCI */</span></span>
<span id="cb101-80"><a href="#cb101-80" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb101-81"><a href="#cb101-81" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x9a</span><span class="op">:</span>   <span class="co">/* DECID -- Identify Terminal */</span></span>
<span id="cb101-82"><a href="#cb101-82" aria-hidden="true" tabindex="-1"></a>                ttywrite<span class="op">(</span>vtiden<span class="op">,</span> strlen<span class="op">(</span>vtiden<span class="op">),</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb101-83"><a href="#cb101-83" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb101-84"><a href="#cb101-84" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x9b</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: CSI */</span></span>
<span id="cb101-85"><a href="#cb101-85" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x9c</span><span class="op">:</span>   <span class="co">/* </span><span class="al">TODO</span><span class="co">: ST */</span></span>
<span id="cb101-86"><a href="#cb101-86" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb101-87"><a href="#cb101-87" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x90</span><span class="op">:</span>   <span class="co">/* DCS -- Device Control String */</span></span>
<span id="cb101-88"><a href="#cb101-88" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x9d</span><span class="op">:</span>   <span class="co">/* OSC -- Operating System Command */</span></span>
<span id="cb101-89"><a href="#cb101-89" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x9e</span><span class="op">:</span>   <span class="co">/* PM -- Privacy Message */</span></span>
<span id="cb101-90"><a href="#cb101-90" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bn">0x9f</span><span class="op">:</span>   <span class="co">/* APC -- Application Program Command */</span></span>
<span id="cb101-91"><a href="#cb101-91" aria-hidden="true" tabindex="-1"></a>                tstrsequence<span class="op">(</span>ascii<span class="op">);</span></span>
<span id="cb101-92"><a href="#cb101-92" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb101-93"><a href="#cb101-93" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb101-94"><a href="#cb101-94" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* only CAN, SUB, \a and C1 chars interrupt a sequence */</span></span>
<span id="cb101-95"><a href="#cb101-95" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>esc <span class="op">&amp;=</span> <span class="op">~(</span>ESC_STR_END<span class="op">|</span>ESC_STR<span class="op">);</span></span>
<span id="cb101-96"><a href="#cb101-96" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb101-97"><a href="#cb101-97" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>eschandle</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb102"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb102-1"><a href="#cb102-1" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span>
<span id="cb102-2"><a href="#cb102-2" aria-hidden="true" tabindex="-1"></a><span class="co"> * returns 1 when the sequence is finished and it hasn&#39;t to read</span></span>
<span id="cb102-3"><a href="#cb102-3" aria-hidden="true" tabindex="-1"></a><span class="co"> * more characters for this sequence, otherwise 0</span></span>
<span id="cb102-4"><a href="#cb102-4" aria-hidden="true" tabindex="-1"></a><span class="co"> */</span></span>
<span id="cb102-5"><a href="#cb102-5" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb102-6"><a href="#cb102-6" aria-hidden="true" tabindex="-1"></a>eschandle<span class="op">(</span>uchar ascii<span class="op">)</span></span>
<span id="cb102-7"><a href="#cb102-7" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb102-8"><a href="#cb102-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>ascii<span class="op">)</span> <span class="op">{</span></span>
<span id="cb102-9"><a href="#cb102-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;[&#39;</span><span class="op">:</span></span>
<span id="cb102-10"><a href="#cb102-10" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>esc <span class="op">|=</span> ESC_CSI<span class="op">;</span></span>
<span id="cb102-11"><a href="#cb102-11" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb102-12"><a href="#cb102-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;#&#39;</span><span class="op">:</span></span>
<span id="cb102-13"><a href="#cb102-13" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>esc <span class="op">|=</span> ESC_TEST<span class="op">;</span></span>
<span id="cb102-14"><a href="#cb102-14" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb102-15"><a href="#cb102-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;%&#39;</span><span class="op">:</span></span>
<span id="cb102-16"><a href="#cb102-16" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>esc <span class="op">|=</span> ESC_UTF8<span class="op">;</span></span>
<span id="cb102-17"><a href="#cb102-17" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb102-18"><a href="#cb102-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;P&#39;</span><span class="op">:</span> <span class="co">/* DCS -- Device Control String */</span></span>
<span id="cb102-19"><a href="#cb102-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;_&#39;</span><span class="op">:</span> <span class="co">/* APC -- Application Program Command */</span></span>
<span id="cb102-20"><a href="#cb102-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;^&#39;</span><span class="op">:</span> <span class="co">/* PM -- Privacy Message */</span></span>
<span id="cb102-21"><a href="#cb102-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;]&#39;</span><span class="op">:</span> <span class="co">/* OSC -- Operating System Command */</span></span>
<span id="cb102-22"><a href="#cb102-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;k&#39;</span><span class="op">:</span> <span class="co">/* old title set compatibility */</span></span>
<span id="cb102-23"><a href="#cb102-23" aria-hidden="true" tabindex="-1"></a>                tstrsequence<span class="op">(</span>ascii<span class="op">);</span></span>
<span id="cb102-24"><a href="#cb102-24" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb102-25"><a href="#cb102-25" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;n&#39;</span><span class="op">:</span> <span class="co">/* LS2 -- Locking shift 2 */</span></span>
<span id="cb102-26"><a href="#cb102-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;o&#39;</span><span class="op">:</span> <span class="co">/* LS3 -- Locking shift 3 */</span></span>
<span id="cb102-27"><a href="#cb102-27" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>charset <span class="op">=</span> <span class="dv">2</span> <span class="op">+</span> <span class="op">(</span>ascii <span class="op">-</span> <span class="ch">&#39;n&#39;</span><span class="op">);</span></span>
<span id="cb102-28"><a href="#cb102-28" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-29"><a href="#cb102-29" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;(&#39;</span><span class="op">:</span> <span class="co">/* GZD4 -- set primary charset G0 */</span></span>
<span id="cb102-30"><a href="#cb102-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;)&#39;</span><span class="op">:</span> <span class="co">/* G1D4 -- set secondary charset G1 */</span></span>
<span id="cb102-31"><a href="#cb102-31" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;*&#39;</span><span class="op">:</span> <span class="co">/* G2D4 -- set tertiary charset G2 */</span></span>
<span id="cb102-32"><a href="#cb102-32" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;+&#39;</span><span class="op">:</span> <span class="co">/* G3D4 -- set quaternary charset G3 */</span></span>
<span id="cb102-33"><a href="#cb102-33" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>icharset <span class="op">=</span> ascii <span class="op">-</span> <span class="ch">&#39;(&#39;</span><span class="op">;</span></span>
<span id="cb102-34"><a href="#cb102-34" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>esc <span class="op">|=</span> ESC_ALTCHARSET<span class="op">;</span></span>
<span id="cb102-35"><a href="#cb102-35" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb102-36"><a href="#cb102-36" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;D&#39;</span><span class="op">:</span> <span class="co">/* IND -- Linefeed */</span></span>
<span id="cb102-37"><a href="#cb102-37" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>y <span class="op">==</span> term<span class="op">.</span>bot<span class="op">)</span> <span class="op">{</span></span>
<span id="cb102-38"><a href="#cb102-38" aria-hidden="true" tabindex="-1"></a>                        tscrollup<span class="op">(</span>term<span class="op">.</span>top<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb102-39"><a href="#cb102-39" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb102-40"><a href="#cb102-40" aria-hidden="true" tabindex="-1"></a>                        tmoveto<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">+</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb102-41"><a href="#cb102-41" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb102-42"><a href="#cb102-42" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-43"><a href="#cb102-43" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;E&#39;</span><span class="op">:</span> <span class="co">/* NEL -- Next line */</span></span>
<span id="cb102-44"><a href="#cb102-44" aria-hidden="true" tabindex="-1"></a>                tnewline<span class="op">(</span><span class="dv">1</span><span class="op">);</span> <span class="co">/* always go to first col */</span></span>
<span id="cb102-45"><a href="#cb102-45" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-46"><a href="#cb102-46" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;H&#39;</span><span class="op">:</span> <span class="co">/* HTS -- Horizontal tab stop */</span></span>
<span id="cb102-47"><a href="#cb102-47" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>tabs<span class="op">[</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">]</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb102-48"><a href="#cb102-48" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-49"><a href="#cb102-49" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;M&#39;</span><span class="op">:</span> <span class="co">/* RI -- Reverse index */</span></span>
<span id="cb102-50"><a href="#cb102-50" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>y <span class="op">==</span> term<span class="op">.</span>top<span class="op">)</span> <span class="op">{</span></span>
<span id="cb102-51"><a href="#cb102-51" aria-hidden="true" tabindex="-1"></a>                        tscrolldown<span class="op">(</span>term<span class="op">.</span>top<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb102-52"><a href="#cb102-52" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb102-53"><a href="#cb102-53" aria-hidden="true" tabindex="-1"></a>                        tmoveto<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb102-54"><a href="#cb102-54" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb102-55"><a href="#cb102-55" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-56"><a href="#cb102-56" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;Z&#39;</span><span class="op">:</span> <span class="co">/* DECID -- Identify Terminal */</span></span>
<span id="cb102-57"><a href="#cb102-57" aria-hidden="true" tabindex="-1"></a>                ttywrite<span class="op">(</span>vtiden<span class="op">,</span> strlen<span class="op">(</span>vtiden<span class="op">),</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb102-58"><a href="#cb102-58" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-59"><a href="#cb102-59" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;c&#39;</span><span class="op">:</span> <span class="co">/* RIS -- Reset to initial state */</span></span>
<span id="cb102-60"><a href="#cb102-60" aria-hidden="true" tabindex="-1"></a>                treset<span class="op">();</span></span>
<span id="cb102-61"><a href="#cb102-61" aria-hidden="true" tabindex="-1"></a>                resettitle<span class="op">();</span></span>
<span id="cb102-62"><a href="#cb102-62" aria-hidden="true" tabindex="-1"></a>                xloadcols<span class="op">();</span></span>
<span id="cb102-63"><a href="#cb102-63" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-64"><a href="#cb102-64" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;=&#39;</span><span class="op">:</span> <span class="co">/* DECPAM -- Application keypad */</span></span>
<span id="cb102-65"><a href="#cb102-65" aria-hidden="true" tabindex="-1"></a>                xsetmode<span class="op">(</span><span class="dv">1</span><span class="op">,</span> MODE_APPKEYPAD<span class="op">);</span></span>
<span id="cb102-66"><a href="#cb102-66" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-67"><a href="#cb102-67" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;&gt;&#39;</span><span class="op">:</span> <span class="co">/* DECPNM -- Normal keypad */</span></span>
<span id="cb102-68"><a href="#cb102-68" aria-hidden="true" tabindex="-1"></a>                xsetmode<span class="op">(</span><span class="dv">0</span><span class="op">,</span> MODE_APPKEYPAD<span class="op">);</span></span>
<span id="cb102-69"><a href="#cb102-69" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-70"><a href="#cb102-70" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;7&#39;</span><span class="op">:</span> <span class="co">/* DECSC -- Save Cursor */</span></span>
<span id="cb102-71"><a href="#cb102-71" aria-hidden="true" tabindex="-1"></a>                tcursor<span class="op">(</span>CURSOR_SAVE<span class="op">);</span></span>
<span id="cb102-72"><a href="#cb102-72" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-73"><a href="#cb102-73" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;8&#39;</span><span class="op">:</span> <span class="co">/* DECRC -- Restore Cursor */</span></span>
<span id="cb102-74"><a href="#cb102-74" aria-hidden="true" tabindex="-1"></a>                tcursor<span class="op">(</span>CURSOR_LOAD<span class="op">);</span></span>
<span id="cb102-75"><a href="#cb102-75" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-76"><a href="#cb102-76" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="ch">&#39;\\&#39;</span><span class="op">:</span> <span class="co">/* ST -- String Terminator */</span></span>
<span id="cb102-77"><a href="#cb102-77" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>esc <span class="op">&amp;</span> ESC_STR_END<span class="op">)</span></span>
<span id="cb102-78"><a href="#cb102-78" aria-hidden="true" tabindex="-1"></a>                        strhandle<span class="op">();</span></span>
<span id="cb102-79"><a href="#cb102-79" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-80"><a href="#cb102-80" aria-hidden="true" tabindex="-1"></a>        <span class="cf">default</span><span class="op">:</span></span>
<span id="cb102-81"><a href="#cb102-81" aria-hidden="true" tabindex="-1"></a>                fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;erresc: unknown sequence ESC 0x%02X &#39;%c&#39;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb102-82"><a href="#cb102-82" aria-hidden="true" tabindex="-1"></a>                        <span class="op">(</span>uchar<span class="op">)</span> ascii<span class="op">,</span> isprint<span class="op">(</span>ascii<span class="op">)?</span> ascii<span class="op">:</span><span class="ch">&#39;.&#39;</span><span class="op">);</span></span>
<span id="cb102-83"><a href="#cb102-83" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb102-84"><a href="#cb102-84" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb102-85"><a href="#cb102-85" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb102-86"><a href="#cb102-86" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb102-87"><a href="#cb102-87" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tputc</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb103"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb103-1"><a href="#cb103-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb103-2"><a href="#cb103-2" aria-hidden="true" tabindex="-1"></a>tputc<span class="op">(</span>Rune u<span class="op">)</span></span>
<span id="cb103-3"><a href="#cb103-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb103-4"><a href="#cb103-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> c<span class="op">[</span>UTF_SIZ<span class="op">];</span></span>
<span id="cb103-5"><a href="#cb103-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> control<span class="op">;</span></span>
<span id="cb103-6"><a href="#cb103-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> width<span class="op">,</span> len<span class="op">;</span></span>
<span id="cb103-7"><a href="#cb103-7" aria-hidden="true" tabindex="-1"></a>        Glyph <span class="op">*</span>gp<span class="op">;</span></span>
<span id="cb103-8"><a href="#cb103-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-9"><a href="#cb103-9" aria-hidden="true" tabindex="-1"></a>        control <span class="op">=</span> ISCONTROL<span class="op">(</span>u<span class="op">);</span></span>
<span id="cb103-10"><a href="#cb103-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>u <span class="op">&lt;</span> <span class="dv">127</span> <span class="op">||</span> <span class="op">!</span>IS_SET<span class="op">(</span>MODE_UTF8<span class="op">))</span> <span class="op">{</span></span>
<span id="cb103-11"><a href="#cb103-11" aria-hidden="true" tabindex="-1"></a>                c<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> u<span class="op">;</span></span>
<span id="cb103-12"><a href="#cb103-12" aria-hidden="true" tabindex="-1"></a>                width <span class="op">=</span> len <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb103-13"><a href="#cb103-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb103-14"><a href="#cb103-14" aria-hidden="true" tabindex="-1"></a>                len <span class="op">=</span> utf8encode<span class="op">(</span>u<span class="op">,</span> c<span class="op">);</span></span>
<span id="cb103-15"><a href="#cb103-15" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(!</span>control <span class="op">&amp;&amp;</span> <span class="op">(</span>width <span class="op">=</span> wcwidth<span class="op">(</span>u<span class="op">))</span> <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb103-16"><a href="#cb103-16" aria-hidden="true" tabindex="-1"></a>                        width <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb103-17"><a href="#cb103-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb103-18"><a href="#cb103-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-19"><a href="#cb103-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>IS_SET<span class="op">(</span>MODE_PRINT<span class="op">))</span></span>
<span id="cb103-20"><a href="#cb103-20" aria-hidden="true" tabindex="-1"></a>                tprinter<span class="op">(</span>c<span class="op">,</span> len<span class="op">);</span></span>
<span id="cb103-21"><a href="#cb103-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-22"><a href="#cb103-22" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*</span></span>
<span id="cb103-23"><a href="#cb103-23" aria-hidden="true" tabindex="-1"></a><span class="co">         * STR sequence must be checked before anything else</span></span>
<span id="cb103-24"><a href="#cb103-24" aria-hidden="true" tabindex="-1"></a><span class="co">         * because it uses all following characters until it</span></span>
<span id="cb103-25"><a href="#cb103-25" aria-hidden="true" tabindex="-1"></a><span class="co">         * receives a ESC, a SUB, a ST or any other C1 control</span></span>
<span id="cb103-26"><a href="#cb103-26" aria-hidden="true" tabindex="-1"></a><span class="co">         * character.</span></span>
<span id="cb103-27"><a href="#cb103-27" aria-hidden="true" tabindex="-1"></a><span class="co">         */</span></span>
<span id="cb103-28"><a href="#cb103-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>esc <span class="op">&amp;</span> ESC_STR<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-29"><a href="#cb103-29" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>u <span class="op">==</span> <span class="ch">&#39;\a&#39;</span> <span class="op">||</span> u <span class="op">==</span> <span class="bn">030</span> <span class="op">||</span> u <span class="op">==</span> <span class="bn">032</span> <span class="op">||</span> u <span class="op">==</span> <span class="bn">033</span> <span class="op">||</span></span>
<span id="cb103-30"><a href="#cb103-30" aria-hidden="true" tabindex="-1"></a>                   ISCONTROLC1<span class="op">(</span>u<span class="op">))</span> <span class="op">{</span></span>
<span id="cb103-31"><a href="#cb103-31" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>esc <span class="op">&amp;=</span> <span class="op">~(</span>ESC_START<span class="op">|</span>ESC_STR<span class="op">);</span></span>
<span id="cb103-32"><a href="#cb103-32" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>esc <span class="op">|=</span> ESC_STR_END<span class="op">;</span></span>
<span id="cb103-33"><a href="#cb103-33" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">goto</span> check_control_code<span class="op">;</span></span>
<span id="cb103-34"><a href="#cb103-34" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb103-35"><a href="#cb103-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-36"><a href="#cb103-36" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>strescseq<span class="op">.</span>len<span class="op">+</span>len <span class="op">&gt;=</span> strescseq<span class="op">.</span>siz<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-37"><a href="#cb103-37" aria-hidden="true" tabindex="-1"></a>                        <span class="co">/*</span></span>
<span id="cb103-38"><a href="#cb103-38" aria-hidden="true" tabindex="-1"></a><span class="co">                         * Here is a bug in terminals. If the user never sends</span></span>
<span id="cb103-39"><a href="#cb103-39" aria-hidden="true" tabindex="-1"></a><span class="co">                         * some code to stop the str or esc command, then st</span></span>
<span id="cb103-40"><a href="#cb103-40" aria-hidden="true" tabindex="-1"></a><span class="co">                         * will stop responding. But this is better than</span></span>
<span id="cb103-41"><a href="#cb103-41" aria-hidden="true" tabindex="-1"></a><span class="co">                         * silently failing with unknown characters. At least</span></span>
<span id="cb103-42"><a href="#cb103-42" aria-hidden="true" tabindex="-1"></a><span class="co">                         * then users will report back.</span></span>
<span id="cb103-43"><a href="#cb103-43" aria-hidden="true" tabindex="-1"></a><span class="co">                         *</span></span>
<span id="cb103-44"><a href="#cb103-44" aria-hidden="true" tabindex="-1"></a><span class="co">                         * In the case users ever get fixed, here is the code:</span></span>
<span id="cb103-45"><a href="#cb103-45" aria-hidden="true" tabindex="-1"></a><span class="co">                         */</span></span>
<span id="cb103-46"><a href="#cb103-46" aria-hidden="true" tabindex="-1"></a>                        <span class="co">/*</span></span>
<span id="cb103-47"><a href="#cb103-47" aria-hidden="true" tabindex="-1"></a><span class="co">                         * term.esc = 0;</span></span>
<span id="cb103-48"><a href="#cb103-48" aria-hidden="true" tabindex="-1"></a><span class="co">                         * strhandle();</span></span>
<span id="cb103-49"><a href="#cb103-49" aria-hidden="true" tabindex="-1"></a><span class="co">                         */</span></span>
<span id="cb103-50"><a href="#cb103-50" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>strescseq<span class="op">.</span>siz <span class="op">&gt;</span> <span class="op">(</span>SIZE_MAX <span class="op">-</span> UTF_SIZ<span class="op">)</span> <span class="op">/</span> <span class="dv">2</span><span class="op">)</span></span>
<span id="cb103-51"><a href="#cb103-51" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb103-52"><a href="#cb103-52" aria-hidden="true" tabindex="-1"></a>                        strescseq<span class="op">.</span>siz <span class="op">*=</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb103-53"><a href="#cb103-53" aria-hidden="true" tabindex="-1"></a>                        strescseq<span class="op">.</span>buf <span class="op">=</span> xrealloc<span class="op">(</span>strescseq<span class="op">.</span>buf<span class="op">,</span> strescseq<span class="op">.</span>siz<span class="op">);</span></span>
<span id="cb103-54"><a href="#cb103-54" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb103-55"><a href="#cb103-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-56"><a href="#cb103-56" aria-hidden="true" tabindex="-1"></a>                memmove<span class="op">(&amp;</span>strescseq<span class="op">.</span>buf<span class="op">[</span>strescseq<span class="op">.</span>len<span class="op">],</span> c<span class="op">,</span> len<span class="op">);</span></span>
<span id="cb103-57"><a href="#cb103-57" aria-hidden="true" tabindex="-1"></a>                strescseq<span class="op">.</span>len <span class="op">+=</span> len<span class="op">;</span></span>
<span id="cb103-58"><a href="#cb103-58" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb103-59"><a href="#cb103-59" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb103-60"><a href="#cb103-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-61"><a href="#cb103-61" aria-hidden="true" tabindex="-1"></a>check_control_code<span class="op">:</span></span>
<span id="cb103-62"><a href="#cb103-62" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*</span></span>
<span id="cb103-63"><a href="#cb103-63" aria-hidden="true" tabindex="-1"></a><span class="co">         * Actions of control codes must be performed as soon they arrive</span></span>
<span id="cb103-64"><a href="#cb103-64" aria-hidden="true" tabindex="-1"></a><span class="co">         * because they can be embedded inside a control sequence, and</span></span>
<span id="cb103-65"><a href="#cb103-65" aria-hidden="true" tabindex="-1"></a><span class="co">         * they must not cause conflicts with sequences.</span></span>
<span id="cb103-66"><a href="#cb103-66" aria-hidden="true" tabindex="-1"></a><span class="co">         */</span></span>
<span id="cb103-67"><a href="#cb103-67" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>control<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-68"><a href="#cb103-68" aria-hidden="true" tabindex="-1"></a>                tcontrolcode<span class="op">(</span>u<span class="op">);</span></span>
<span id="cb103-69"><a href="#cb103-69" aria-hidden="true" tabindex="-1"></a>                <span class="co">/*</span></span>
<span id="cb103-70"><a href="#cb103-70" aria-hidden="true" tabindex="-1"></a><span class="co">                 * control codes are not shown ever</span></span>
<span id="cb103-71"><a href="#cb103-71" aria-hidden="true" tabindex="-1"></a><span class="co">                 */</span></span>
<span id="cb103-72"><a href="#cb103-72" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(!</span>term<span class="op">.</span>esc<span class="op">)</span></span>
<span id="cb103-73"><a href="#cb103-73" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>lastc <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb103-74"><a href="#cb103-74" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb103-75"><a href="#cb103-75" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>esc <span class="op">&amp;</span> ESC_START<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-76"><a href="#cb103-76" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>esc <span class="op">&amp;</span> ESC_CSI<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-77"><a href="#cb103-77" aria-hidden="true" tabindex="-1"></a>                        csiescseq<span class="op">.</span>buf<span class="op">[</span>csiescseq<span class="op">.</span>len<span class="op">++]</span> <span class="op">=</span> u<span class="op">;</span></span>
<span id="cb103-78"><a href="#cb103-78" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>BETWEEN<span class="op">(</span>u<span class="op">,</span> <span class="bn">0x40</span><span class="op">,</span> <span class="bn">0x7E</span><span class="op">)</span></span>
<span id="cb103-79"><a href="#cb103-79" aria-hidden="true" tabindex="-1"></a>                                        <span class="op">||</span> csiescseq<span class="op">.</span>len <span class="op">&gt;=</span> \</span>
<span id="cb103-80"><a href="#cb103-80" aria-hidden="true" tabindex="-1"></a>                                        <span class="kw">sizeof</span><span class="op">(</span>csiescseq<span class="op">.</span>buf<span class="op">)-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-81"><a href="#cb103-81" aria-hidden="true" tabindex="-1"></a>                                term<span class="op">.</span>esc <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb103-82"><a href="#cb103-82" aria-hidden="true" tabindex="-1"></a>                                csiparse<span class="op">();</span></span>
<span id="cb103-83"><a href="#cb103-83" aria-hidden="true" tabindex="-1"></a>                                csihandle<span class="op">();</span></span>
<span id="cb103-84"><a href="#cb103-84" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb103-85"><a href="#cb103-85" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb103-86"><a href="#cb103-86" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>esc <span class="op">&amp;</span> ESC_UTF8<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-87"><a href="#cb103-87" aria-hidden="true" tabindex="-1"></a>                        tdefutf8<span class="op">(</span>u<span class="op">);</span></span>
<span id="cb103-88"><a href="#cb103-88" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>esc <span class="op">&amp;</span> ESC_ALTCHARSET<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-89"><a href="#cb103-89" aria-hidden="true" tabindex="-1"></a>                        tdeftran<span class="op">(</span>u<span class="op">);</span></span>
<span id="cb103-90"><a href="#cb103-90" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>esc <span class="op">&amp;</span> ESC_TEST<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-91"><a href="#cb103-91" aria-hidden="true" tabindex="-1"></a>                        tdectest<span class="op">(</span>u<span class="op">);</span></span>
<span id="cb103-92"><a href="#cb103-92" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb103-93"><a href="#cb103-93" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(!</span>eschandle<span class="op">(</span>u<span class="op">))</span></span>
<span id="cb103-94"><a href="#cb103-94" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb103-95"><a href="#cb103-95" aria-hidden="true" tabindex="-1"></a>                        <span class="co">/* sequence already finished */</span></span>
<span id="cb103-96"><a href="#cb103-96" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb103-97"><a href="#cb103-97" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>esc <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb103-98"><a href="#cb103-98" aria-hidden="true" tabindex="-1"></a>                <span class="co">/*</span></span>
<span id="cb103-99"><a href="#cb103-99" aria-hidden="true" tabindex="-1"></a><span class="co">                 * All characters which form part of a sequence are not</span></span>
<span id="cb103-100"><a href="#cb103-100" aria-hidden="true" tabindex="-1"></a><span class="co">                 * printed</span></span>
<span id="cb103-101"><a href="#cb103-101" aria-hidden="true" tabindex="-1"></a><span class="co">                 */</span></span>
<span id="cb103-102"><a href="#cb103-102" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb103-103"><a href="#cb103-103" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb103-104"><a href="#cb103-104" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>selected<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">))</span></span>
<span id="cb103-105"><a href="#cb103-105" aria-hidden="true" tabindex="-1"></a>                selclear<span class="op">();</span></span>
<span id="cb103-106"><a href="#cb103-106" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-107"><a href="#cb103-107" aria-hidden="true" tabindex="-1"></a>        gp <span class="op">=</span> <span class="op">&amp;</span>term<span class="op">.</span>line<span class="op">[</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">][</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">];</span></span>
<span id="cb103-108"><a href="#cb103-108" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>IS_SET<span class="op">(</span>MODE_WRAP<span class="op">)</span> <span class="op">&amp;&amp;</span> <span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>state <span class="op">&amp;</span> CURSOR_WRAPNEXT<span class="op">))</span> <span class="op">{</span></span>
<span id="cb103-109"><a href="#cb103-109" aria-hidden="true" tabindex="-1"></a>                gp<span class="op">-&gt;</span>mode <span class="op">|=</span> ATTR_WRAP<span class="op">;</span></span>
<span id="cb103-110"><a href="#cb103-110" aria-hidden="true" tabindex="-1"></a>                tnewline<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb103-111"><a href="#cb103-111" aria-hidden="true" tabindex="-1"></a>                gp <span class="op">=</span> <span class="op">&amp;</span>term<span class="op">.</span>line<span class="op">[</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">][</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">];</span></span>
<span id="cb103-112"><a href="#cb103-112" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb103-113"><a href="#cb103-113" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-114"><a href="#cb103-114" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>IS_SET<span class="op">(</span>MODE_INSERT<span class="op">)</span> <span class="op">&amp;&amp;</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">+</span>width <span class="op">&lt;</span> term<span class="op">.</span>col<span class="op">)</span></span>
<span id="cb103-115"><a href="#cb103-115" aria-hidden="true" tabindex="-1"></a>                memmove<span class="op">(</span>gp<span class="op">+</span>width<span class="op">,</span> gp<span class="op">,</span> <span class="op">(</span>term<span class="op">.</span>col <span class="op">-</span> term<span class="op">.</span>c<span class="op">.</span>x <span class="op">-</span> width<span class="op">)</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Glyph<span class="op">));</span></span>
<span id="cb103-116"><a href="#cb103-116" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-117"><a href="#cb103-117" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">+</span>width <span class="op">&gt;</span> term<span class="op">.</span>col<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-118"><a href="#cb103-118" aria-hidden="true" tabindex="-1"></a>                tnewline<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb103-119"><a href="#cb103-119" aria-hidden="true" tabindex="-1"></a>                gp <span class="op">=</span> <span class="op">&amp;</span>term<span class="op">.</span>line<span class="op">[</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">][</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">];</span></span>
<span id="cb103-120"><a href="#cb103-120" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb103-121"><a href="#cb103-121" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-122"><a href="#cb103-122" aria-hidden="true" tabindex="-1"></a>        tsetchar<span class="op">(</span>u<span class="op">,</span> <span class="op">&amp;</span>term<span class="op">.</span>c<span class="op">.</span>attr<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb103-123"><a href="#cb103-123" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>lastc <span class="op">=</span> u<span class="op">;</span></span>
<span id="cb103-124"><a href="#cb103-124" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-125"><a href="#cb103-125" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>width <span class="op">==</span> <span class="dv">2</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-126"><a href="#cb103-126" aria-hidden="true" tabindex="-1"></a>                gp<span class="op">-&gt;</span>mode <span class="op">|=</span> ATTR_WIDE<span class="op">;</span></span>
<span id="cb103-127"><a href="#cb103-127" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">+</span><span class="dv">1</span> <span class="op">&lt;</span> term<span class="op">.</span>col<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-128"><a href="#cb103-128" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>gp<span class="op">[</span><span class="dv">1</span><span class="op">].</span>mode <span class="op">==</span> ATTR_WIDE <span class="op">&amp;&amp;</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">+</span><span class="dv">2</span> <span class="op">&lt;</span> term<span class="op">.</span>col<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-129"><a href="#cb103-129" aria-hidden="true" tabindex="-1"></a>                                gp<span class="op">[</span><span class="dv">2</span><span class="op">].</span>u <span class="op">=</span> <span class="ch">&#39; &#39;</span><span class="op">;</span></span>
<span id="cb103-130"><a href="#cb103-130" aria-hidden="true" tabindex="-1"></a>                                gp<span class="op">[</span><span class="dv">2</span><span class="op">].</span>mode <span class="op">&amp;=</span> <span class="op">~</span>ATTR_WDUMMY<span class="op">;</span></span>
<span id="cb103-131"><a href="#cb103-131" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb103-132"><a href="#cb103-132" aria-hidden="true" tabindex="-1"></a>                        gp<span class="op">[</span><span class="dv">1</span><span class="op">].</span>u <span class="op">=</span> <span class="ch">&#39;\0&#39;</span><span class="op">;</span></span>
<span id="cb103-133"><a href="#cb103-133" aria-hidden="true" tabindex="-1"></a>                        gp<span class="op">[</span><span class="dv">1</span><span class="op">].</span>mode <span class="op">=</span> ATTR_WDUMMY<span class="op">;</span></span>
<span id="cb103-134"><a href="#cb103-134" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb103-135"><a href="#cb103-135" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb103-136"><a href="#cb103-136" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">+</span>width <span class="op">&lt;</span> term<span class="op">.</span>col<span class="op">)</span> <span class="op">{</span></span>
<span id="cb103-137"><a href="#cb103-137" aria-hidden="true" tabindex="-1"></a>                tmoveto<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">+</span>width<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb103-138"><a href="#cb103-138" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb103-139"><a href="#cb103-139" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>c<span class="op">.</span>state <span class="op">|=</span> CURSOR_WRAPNEXT<span class="op">;</span></span>
<span id="cb103-140"><a href="#cb103-140" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb103-141"><a href="#cb103-141" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb103-142"><a href="#cb103-142" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>twrite</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb104"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb104-1"><a href="#cb104-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb104-2"><a href="#cb104-2" aria-hidden="true" tabindex="-1"></a>twrite<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>buf<span class="op">,</span> <span class="dt">int</span> buflen<span class="op">,</span> <span class="dt">int</span> show_ctrl<span class="op">)</span></span>
<span id="cb104-3"><a href="#cb104-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb104-4"><a href="#cb104-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> charsize<span class="op">;</span></span>
<span id="cb104-5"><a href="#cb104-5" aria-hidden="true" tabindex="-1"></a>        Rune u<span class="op">;</span></span>
<span id="cb104-6"><a href="#cb104-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> n<span class="op">;</span></span>
<span id="cb104-7"><a href="#cb104-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb104-8"><a href="#cb104-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>n <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> n <span class="op">&lt;</span> buflen<span class="op">;</span> n <span class="op">+=</span> charsize<span class="op">)</span> <span class="op">{</span></span>
<span id="cb104-9"><a href="#cb104-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>IS_SET<span class="op">(</span>MODE_UTF8<span class="op">))</span> <span class="op">{</span></span>
<span id="cb104-10"><a href="#cb104-10" aria-hidden="true" tabindex="-1"></a>                        <span class="co">/* process a complete utf8 char */</span></span>
<span id="cb104-11"><a href="#cb104-11" aria-hidden="true" tabindex="-1"></a>                        charsize <span class="op">=</span> utf8decode<span class="op">(</span>buf <span class="op">+</span> n<span class="op">,</span> <span class="op">&amp;</span>u<span class="op">,</span> buflen <span class="op">-</span> n<span class="op">);</span></span>
<span id="cb104-12"><a href="#cb104-12" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>charsize <span class="op">==</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb104-13"><a href="#cb104-13" aria-hidden="true" tabindex="-1"></a>                                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb104-14"><a href="#cb104-14" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb104-15"><a href="#cb104-15" aria-hidden="true" tabindex="-1"></a>                        u <span class="op">=</span> buf<span class="op">[</span>n<span class="op">]</span> <span class="op">&amp;</span> <span class="bn">0xFF</span><span class="op">;</span></span>
<span id="cb104-16"><a href="#cb104-16" aria-hidden="true" tabindex="-1"></a>                        charsize <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb104-17"><a href="#cb104-17" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb104-18"><a href="#cb104-18" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>show_ctrl <span class="op">&amp;&amp;</span> ISCONTROL<span class="op">(</span>u<span class="op">))</span> <span class="op">{</span></span>
<span id="cb104-19"><a href="#cb104-19" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>u <span class="op">&amp;</span> <span class="bn">0x80</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb104-20"><a href="#cb104-20" aria-hidden="true" tabindex="-1"></a>                                u <span class="op">&amp;=</span> <span class="bn">0x7f</span><span class="op">;</span></span>
<span id="cb104-21"><a href="#cb104-21" aria-hidden="true" tabindex="-1"></a>                                tputc<span class="op">(</span><span class="ch">&#39;^&#39;</span><span class="op">);</span></span>
<span id="cb104-22"><a href="#cb104-22" aria-hidden="true" tabindex="-1"></a>                                tputc<span class="op">(</span><span class="ch">&#39;[&#39;</span><span class="op">);</span></span>
<span id="cb104-23"><a href="#cb104-23" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>u <span class="op">!=</span> <span class="ch">&#39;\n&#39;</span> <span class="op">&amp;&amp;</span> u <span class="op">!=</span> <span class="ch">&#39;\r&#39;</span> <span class="op">&amp;&amp;</span> u <span class="op">!=</span> <span class="ch">&#39;\t&#39;</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb104-24"><a href="#cb104-24" aria-hidden="true" tabindex="-1"></a>                                u <span class="op">^=</span> <span class="bn">0x40</span><span class="op">;</span></span>
<span id="cb104-25"><a href="#cb104-25" aria-hidden="true" tabindex="-1"></a>                                tputc<span class="op">(</span><span class="ch">&#39;^&#39;</span><span class="op">);</span></span>
<span id="cb104-26"><a href="#cb104-26" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span>
<span id="cb104-27"><a href="#cb104-27" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb104-28"><a href="#cb104-28" aria-hidden="true" tabindex="-1"></a>                tputc<span class="op">(</span>u<span class="op">);</span></span>
<span id="cb104-29"><a href="#cb104-29" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb104-30"><a href="#cb104-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> n<span class="op">;</span></span>
<span id="cb104-31"><a href="#cb104-31" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb104-32"><a href="#cb104-32" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>tresize</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb105"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb105-1"><a href="#cb105-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb105-2"><a href="#cb105-2" aria-hidden="true" tabindex="-1"></a>tresize<span class="op">(</span><span class="dt">int</span> col<span class="op">,</span> <span class="dt">int</span> row<span class="op">)</span></span>
<span id="cb105-3"><a href="#cb105-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb105-4"><a href="#cb105-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i<span class="op">;</span></span>
<span id="cb105-5"><a href="#cb105-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> minrow <span class="op">=</span> MIN<span class="op">(</span>row<span class="op">,</span> term<span class="op">.</span>row<span class="op">);</span></span>
<span id="cb105-6"><a href="#cb105-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> mincol <span class="op">=</span> MIN<span class="op">(</span>col<span class="op">,</span> term<span class="op">.</span>col<span class="op">);</span></span>
<span id="cb105-7"><a href="#cb105-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> <span class="op">*</span>bp<span class="op">;</span></span>
<span id="cb105-8"><a href="#cb105-8" aria-hidden="true" tabindex="-1"></a>        TCursor c<span class="op">;</span></span>
<span id="cb105-9"><a href="#cb105-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb105-10"><a href="#cb105-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>col <span class="op">&lt;</span> <span class="dv">1</span> <span class="op">||</span> row <span class="op">&lt;</span> <span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb105-11"><a href="#cb105-11" aria-hidden="true" tabindex="-1"></a>                fprintf<span class="op">(</span>stderr<span class="op">,</span></span>
<span id="cb105-12"><a href="#cb105-12" aria-hidden="true" tabindex="-1"></a>                        <span class="st">&quot;tresize: error resizing to %dx%d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> col<span class="op">,</span> row<span class="op">);</span></span>
<span id="cb105-13"><a href="#cb105-13" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb105-14"><a href="#cb105-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb105-15"><a href="#cb105-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb105-16"><a href="#cb105-16" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*</span></span>
<span id="cb105-17"><a href="#cb105-17" aria-hidden="true" tabindex="-1"></a><span class="co">         * slide screen to keep cursor where we expect it -</span></span>
<span id="cb105-18"><a href="#cb105-18" aria-hidden="true" tabindex="-1"></a><span class="co">         * tscrollup would work here, but we can optimize to</span></span>
<span id="cb105-19"><a href="#cb105-19" aria-hidden="true" tabindex="-1"></a><span class="co">         * memmove because we&#39;re freeing the earlier lines</span></span>
<span id="cb105-20"><a href="#cb105-20" aria-hidden="true" tabindex="-1"></a><span class="co">         */</span></span>
<span id="cb105-21"><a href="#cb105-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;=</span> term<span class="op">.</span>c<span class="op">.</span>y <span class="op">-</span> row<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb105-22"><a href="#cb105-22" aria-hidden="true" tabindex="-1"></a>                free<span class="op">(</span>term<span class="op">.</span>line<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb105-23"><a href="#cb105-23" aria-hidden="true" tabindex="-1"></a>                free<span class="op">(</span>term<span class="op">.</span>alt<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb105-24"><a href="#cb105-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb105-25"><a href="#cb105-25" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* ensure that both src and dst are not NULL */</span></span>
<span id="cb105-26"><a href="#cb105-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>i <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb105-27"><a href="#cb105-27" aria-hidden="true" tabindex="-1"></a>                memmove<span class="op">(</span>term<span class="op">.</span>line<span class="op">,</span> term<span class="op">.</span>line <span class="op">+</span> i<span class="op">,</span> row <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Line<span class="op">));</span></span>
<span id="cb105-28"><a href="#cb105-28" aria-hidden="true" tabindex="-1"></a>                memmove<span class="op">(</span>term<span class="op">.</span>alt<span class="op">,</span> term<span class="op">.</span>alt <span class="op">+</span> i<span class="op">,</span> row <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Line<span class="op">));</span></span>
<span id="cb105-29"><a href="#cb105-29" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb105-30"><a href="#cb105-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">+=</span> row<span class="op">;</span> i <span class="op">&lt;</span> term<span class="op">.</span>row<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb105-31"><a href="#cb105-31" aria-hidden="true" tabindex="-1"></a>                free<span class="op">(</span>term<span class="op">.</span>line<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb105-32"><a href="#cb105-32" aria-hidden="true" tabindex="-1"></a>                free<span class="op">(</span>term<span class="op">.</span>alt<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb105-33"><a href="#cb105-33" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb105-34"><a href="#cb105-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb105-35"><a href="#cb105-35" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* resize to new height */</span></span>
<span id="cb105-36"><a href="#cb105-36" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>line <span class="op">=</span> xrealloc<span class="op">(</span>term<span class="op">.</span>line<span class="op">,</span> row <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Line<span class="op">));</span></span>
<span id="cb105-37"><a href="#cb105-37" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>alt  <span class="op">=</span> xrealloc<span class="op">(</span>term<span class="op">.</span>alt<span class="op">,</span>  row <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Line<span class="op">));</span></span>
<span id="cb105-38"><a href="#cb105-38" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>dirty <span class="op">=</span> xrealloc<span class="op">(</span>term<span class="op">.</span>dirty<span class="op">,</span> row <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(*</span>term<span class="op">.</span>dirty<span class="op">));</span></span>
<span id="cb105-39"><a href="#cb105-39" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>tabs <span class="op">=</span> xrealloc<span class="op">(</span>term<span class="op">.</span>tabs<span class="op">,</span> col <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(*</span>term<span class="op">.</span>tabs<span class="op">));</span></span>
<span id="cb105-40"><a href="#cb105-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb105-41"><a href="#cb105-41" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* resize each row to new width, zero-pad if needed */</span></span>
<span id="cb105-42"><a href="#cb105-42" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> minrow<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb105-43"><a href="#cb105-43" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>line<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> xrealloc<span class="op">(</span>term<span class="op">.</span>line<span class="op">[</span>i<span class="op">],</span> col <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Glyph<span class="op">));</span></span>
<span id="cb105-44"><a href="#cb105-44" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>alt<span class="op">[</span>i<span class="op">]</span>  <span class="op">=</span> xrealloc<span class="op">(</span>term<span class="op">.</span>alt<span class="op">[</span>i<span class="op">],</span>  col <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Glyph<span class="op">));</span></span>
<span id="cb105-45"><a href="#cb105-45" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb105-46"><a href="#cb105-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb105-47"><a href="#cb105-47" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* allocate any new rows */</span></span>
<span id="cb105-48"><a href="#cb105-48" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="co">/* i = minrow */</span><span class="op">;</span> i <span class="op">&lt;</span> row<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb105-49"><a href="#cb105-49" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>line<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> xmalloc<span class="op">(</span>col <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Glyph<span class="op">));</span></span>
<span id="cb105-50"><a href="#cb105-50" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>alt<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> xmalloc<span class="op">(</span>col <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Glyph<span class="op">));</span></span>
<span id="cb105-51"><a href="#cb105-51" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb105-52"><a href="#cb105-52" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>col <span class="op">&gt;</span> term<span class="op">.</span>col<span class="op">)</span> <span class="op">{</span></span>
<span id="cb105-53"><a href="#cb105-53" aria-hidden="true" tabindex="-1"></a>                bp <span class="op">=</span> term<span class="op">.</span>tabs <span class="op">+</span> term<span class="op">.</span>col<span class="op">;</span></span>
<span id="cb105-54"><a href="#cb105-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb105-55"><a href="#cb105-55" aria-hidden="true" tabindex="-1"></a>                memset<span class="op">(</span>bp<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="kw">sizeof</span><span class="op">(*</span>term<span class="op">.</span>tabs<span class="op">)</span> <span class="op">*</span> <span class="op">(</span>col <span class="op">-</span> term<span class="op">.</span>col<span class="op">));</span></span>
<span id="cb105-56"><a href="#cb105-56" aria-hidden="true" tabindex="-1"></a>                <span class="cf">while</span> <span class="op">(--</span>bp <span class="op">&gt;</span> term<span class="op">.</span>tabs <span class="op">&amp;&amp;</span> <span class="op">!*</span>bp<span class="op">)</span></span>
<span id="cb105-57"><a href="#cb105-57" aria-hidden="true" tabindex="-1"></a>                        <span class="co">/* nothing */</span> <span class="op">;</span></span>
<span id="cb105-58"><a href="#cb105-58" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span>bp <span class="op">+=</span> tabspaces<span class="op">;</span> bp <span class="op">&lt;</span> term<span class="op">.</span>tabs <span class="op">+</span> col<span class="op">;</span> bp <span class="op">+=</span> tabspaces<span class="op">)</span></span>
<span id="cb105-59"><a href="#cb105-59" aria-hidden="true" tabindex="-1"></a>                        <span class="op">*</span>bp <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb105-60"><a href="#cb105-60" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb105-61"><a href="#cb105-61" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* update terminal size */</span></span>
<span id="cb105-62"><a href="#cb105-62" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>col <span class="op">=</span> col<span class="op">;</span></span>
<span id="cb105-63"><a href="#cb105-63" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>row <span class="op">=</span> row<span class="op">;</span></span>
<span id="cb105-64"><a href="#cb105-64" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* reset scrolling region */</span></span>
<span id="cb105-65"><a href="#cb105-65" aria-hidden="true" tabindex="-1"></a>        tsetscroll<span class="op">(</span><span class="dv">0</span><span class="op">,</span> row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb105-66"><a href="#cb105-66" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* make use of the LIMIT in tmoveto */</span></span>
<span id="cb105-67"><a href="#cb105-67" aria-hidden="true" tabindex="-1"></a>        tmoveto<span class="op">(</span>term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">);</span></span>
<span id="cb105-68"><a href="#cb105-68" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* Clearing both screens (it makes dirty all lines) */</span></span>
<span id="cb105-69"><a href="#cb105-69" aria-hidden="true" tabindex="-1"></a>        c <span class="op">=</span> term<span class="op">.</span>c<span class="op">;</span></span>
<span id="cb105-70"><a href="#cb105-70" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">2</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb105-71"><a href="#cb105-71" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>mincol <span class="op">&lt;</span> col <span class="op">&amp;&amp;</span> <span class="dv">0</span> <span class="op">&lt;</span> minrow<span class="op">)</span> <span class="op">{</span></span>
<span id="cb105-72"><a href="#cb105-72" aria-hidden="true" tabindex="-1"></a>                        tclearregion<span class="op">(</span>mincol<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> col <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> minrow <span class="op">-</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb105-73"><a href="#cb105-73" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb105-74"><a href="#cb105-74" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span><span class="dv">0</span> <span class="op">&lt;</span> col <span class="op">&amp;&amp;</span> minrow <span class="op">&lt;</span> row<span class="op">)</span> <span class="op">{</span></span>
<span id="cb105-75"><a href="#cb105-75" aria-hidden="true" tabindex="-1"></a>                        tclearregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> minrow<span class="op">,</span> col <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> row <span class="op">-</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb105-76"><a href="#cb105-76" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb105-77"><a href="#cb105-77" aria-hidden="true" tabindex="-1"></a>                tswapscreen<span class="op">();</span></span>
<span id="cb105-78"><a href="#cb105-78" aria-hidden="true" tabindex="-1"></a>                tcursor<span class="op">(</span>CURSOR_LOAD<span class="op">);</span></span>
<span id="cb105-79"><a href="#cb105-79" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb105-80"><a href="#cb105-80" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>c <span class="op">=</span> c<span class="op">;</span></span>
<span id="cb105-81"><a href="#cb105-81" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb105-82"><a href="#cb105-82" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>resettitle</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb106"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb106-1"><a href="#cb106-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb106-2"><a href="#cb106-2" aria-hidden="true" tabindex="-1"></a>resettitle<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb106-3"><a href="#cb106-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb106-4"><a href="#cb106-4" aria-hidden="true" tabindex="-1"></a>        xsettitle<span class="op">(</span>NULL<span class="op">);</span></span>
<span id="cb106-5"><a href="#cb106-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb106-6"><a href="#cb106-6" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>drawregion</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb107"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb107-1"><a href="#cb107-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb107-2"><a href="#cb107-2" aria-hidden="true" tabindex="-1"></a>drawregion<span class="op">(</span><span class="dt">int</span> x1<span class="op">,</span> <span class="dt">int</span> y1<span class="op">,</span> <span class="dt">int</span> x2<span class="op">,</span> <span class="dt">int</span> y2<span class="op">)</span></span>
<span id="cb107-3"><a href="#cb107-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb107-4"><a href="#cb107-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> y<span class="op">;</span></span>
<span id="cb107-5"><a href="#cb107-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb107-6"><a href="#cb107-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>y <span class="op">=</span> y1<span class="op">;</span> y <span class="op">&lt;</span> y2<span class="op">;</span> y<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb107-7"><a href="#cb107-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(!</span>term<span class="op">.</span>dirty<span class="op">[</span>y<span class="op">])</span></span>
<span id="cb107-8"><a href="#cb107-8" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb107-9"><a href="#cb107-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb107-10"><a href="#cb107-10" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>dirty<span class="op">[</span>y<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb107-11"><a href="#cb107-11" aria-hidden="true" tabindex="-1"></a>                xdrawline<span class="op">(</span>term<span class="op">.</span>line<span class="op">[</span>y<span class="op">],</span> x1<span class="op">,</span> y<span class="op">,</span> x2<span class="op">);</span></span>
<span id="cb107-12"><a href="#cb107-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb107-13"><a href="#cb107-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb107-14"><a href="#cb107-14" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>draw</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb108"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb108-1"><a href="#cb108-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb108-2"><a href="#cb108-2" aria-hidden="true" tabindex="-1"></a>draw<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb108-3"><a href="#cb108-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb108-4"><a href="#cb108-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> cx <span class="op">=</span> term<span class="op">.</span>c<span class="op">.</span>x<span class="op">,</span> ocx <span class="op">=</span> term<span class="op">.</span>ocx<span class="op">,</span> ocy <span class="op">=</span> term<span class="op">.</span>ocy<span class="op">;</span></span>
<span id="cb108-5"><a href="#cb108-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb108-6"><a href="#cb108-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>xstartdraw<span class="op">())</span></span>
<span id="cb108-7"><a href="#cb108-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span><span class="op">;</span></span>
<span id="cb108-8"><a href="#cb108-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb108-9"><a href="#cb108-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* adjust cursor position */</span></span>
<span id="cb108-10"><a href="#cb108-10" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>term<span class="op">.</span>ocx<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb108-11"><a href="#cb108-11" aria-hidden="true" tabindex="-1"></a>        LIMIT<span class="op">(</span>term<span class="op">.</span>ocy<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>row<span class="op">-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb108-12"><a href="#cb108-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>line<span class="op">[</span>term<span class="op">.</span>ocy<span class="op">][</span>term<span class="op">.</span>ocx<span class="op">].</span>mode <span class="op">&amp;</span> ATTR_WDUMMY<span class="op">)</span></span>
<span id="cb108-13"><a href="#cb108-13" aria-hidden="true" tabindex="-1"></a>                term<span class="op">.</span>ocx<span class="op">--;</span></span>
<span id="cb108-14"><a href="#cb108-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>term<span class="op">.</span>line<span class="op">[</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">][</span>cx<span class="op">].</span>mode <span class="op">&amp;</span> ATTR_WDUMMY<span class="op">)</span></span>
<span id="cb108-15"><a href="#cb108-15" aria-hidden="true" tabindex="-1"></a>                cx<span class="op">--;</span></span>
<span id="cb108-16"><a href="#cb108-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb108-17"><a href="#cb108-17" aria-hidden="true" tabindex="-1"></a>        drawregion<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> term<span class="op">.</span>col<span class="op">,</span> term<span class="op">.</span>row<span class="op">);</span></span>
<span id="cb108-18"><a href="#cb108-18" aria-hidden="true" tabindex="-1"></a>        xdrawcursor<span class="op">(</span>cx<span class="op">,</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">,</span> term<span class="op">.</span>line<span class="op">[</span>term<span class="op">.</span>c<span class="op">.</span>y<span class="op">][</span>cx<span class="op">],</span></span>
<span id="cb108-19"><a href="#cb108-19" aria-hidden="true" tabindex="-1"></a>                        term<span class="op">.</span>ocx<span class="op">,</span> term<span class="op">.</span>ocy<span class="op">,</span> term<span class="op">.</span>line<span class="op">[</span>term<span class="op">.</span>ocy<span class="op">][</span>term<span class="op">.</span>ocx<span class="op">]);</span></span>
<span id="cb108-20"><a href="#cb108-20" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>ocx <span class="op">=</span> cx<span class="op">;</span></span>
<span id="cb108-21"><a href="#cb108-21" aria-hidden="true" tabindex="-1"></a>        term<span class="op">.</span>ocy <span class="op">=</span> term<span class="op">.</span>c<span class="op">.</span>y<span class="op">;</span></span>
<span id="cb108-22"><a href="#cb108-22" aria-hidden="true" tabindex="-1"></a>        xfinishdraw<span class="op">();</span></span>
<span id="cb108-23"><a href="#cb108-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>ocx <span class="op">!=</span> term<span class="op">.</span>ocx <span class="op">||</span> ocy <span class="op">!=</span> term<span class="op">.</span>ocy<span class="op">)</span></span>
<span id="cb108-24"><a href="#cb108-24" aria-hidden="true" tabindex="-1"></a>                xximspot<span class="op">(</span>term<span class="op">.</span>ocx<span class="op">,</span> term<span class="op">.</span>ocy<span class="op">);</span></span>
<span id="cb108-25"><a href="#cb108-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb108-26"><a href="#cb108-26" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div></li>
<li><p><code>redraw</code></p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb109"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb109-1"><a href="#cb109-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb109-2"><a href="#cb109-2" aria-hidden="true" tabindex="-1"></a>redraw<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb109-3"><a href="#cb109-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb109-4"><a href="#cb109-4" aria-hidden="true" tabindex="-1"></a>        tfulldirt<span class="op">();</span></span>
<span id="cb109-5"><a href="#cb109-5" aria-hidden="true" tabindex="-1"></a>        draw<span class="op">();</span></span>
<span id="cb109-6"><a href="#cb109-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div></li>
</ol>
<h1 id="Stのソースコードのライセンス文">Stのソースコードのライセンス文</h1>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>MIT/X Consortium License</p>
<p>© 2014-2022 Hiltjo Posthuma &lt;hiltjo at codemadness dot org&gt; © 2018 Devin J. Pohly &lt;djpohly at gmail dot com&gt; © 2014-2017 Quentin Rameau &lt;quinq at fifth dot space&gt; © 2009-2012 Aurélien APTEL &lt;aurelien dot aptel at gmail dot com&gt; © 2008-2017 Anselm R Garbe &lt;garbeam at gmail dot com&gt; © 2012-2017 Roberto E. Vargas Caballero &lt;k0ga at shike2 dot com&gt; © 2012-2016 Christoph Lohmann &lt;20h at r-36 dot net&gt; © 2013 Eon S. Jeon &lt;esjeon at hyunmu dot am&gt; © 2013 Alexander Sedov &lt;alex0player at gmail dot com&gt; © 2013 Mark Edgar &lt;medgar123 at gmail dot com&gt; © 2013-2014 Eric Pruitt &lt;eric.pruitt at gmail dot com&gt; © 2013 Michael Forney &lt;mforney at mforney dot org&gt; © 2013-2014 Markus Teich &lt;markus dot teich at stusta dot mhn dot de&gt; © 2014-2015 Laslo Hunhold &lt;dev at frign dot de&gt;</p>
<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
</blockquote>
</div>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-11-03-maim-prevent-dimming-by-maim-or-slop</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-11-03-maim-prevent-dimming-by-maim-or-slop.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-11-03-maim-prevent-dimming-by-maim-or-slop.html</id>
    <published>2022-11-03T00:00:00Z</published>
    <updated>2022-11-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>maimで撮影する際に全画面にdimがかからないようにする</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on November  3, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on November  3, 2022
	</div>

	

	
	
	
      </div>

    <div class="description">
      <h1 id="解決したい問題">解決したい問題</h1>
<p>picomをX11コンポジッターとして使っており、 <code>inactivate-dim</code> を 使用している際、maimで部分のみのスクショを撮ろうとすると以下の ように変に暗くなってしまう。</p>
<p><img src="file:///images/dimmed-maim.png" class="ui rounded image" /></p>
<p>これは本来もうちょっと明るい色であるべきなのだ。</p>
<h1 id="解決策: slop に対してpicomのルールを設定する">解決策: <code>slop</code> に対してpicomのルールを設定する</h1>
<p>[[<a href="https://www.linux.org/threads/solved-picom-blurs-maim.29586/">https://www.linux.org/threads/solved-picom-blurs-maim.29586/</a>][[solved] picom blurs maim! | Linux.org]] を見ればわかるのだけれど、 どうやらmaim内部では <code>slop</code> というコマンドを用いて画面領域の選択 をしているらしい。そして、slopは画面領域の選択をする際に透明な ウィンドウで画面全体を覆っており、それ故に他のウィンドウがinactive と判定されているようなのだ。なので、そいつを <code>inactive-dim</code> の 対象から外してやればいいということだ。</p>
<p><code>inactive-dim</code> の影響を受けないようにするには、 <code>focus-exclude</code> に 設定を入れればいい。例えば、今回の場合は以下の内容を <code>\~/.config/picom.conf</code> に保存すればいい。</p>
<div class="ui segment">
<div class="ui top right attached label">
picom
</div>
<pre class="picom SourceCode"><code>focus-exclude = [&quot;class_i = &#39;slop&#39;&quot;]
</code></pre>
</div>
<p>こうすると、綺麗に元の色のままでキャプチャできる</p>
<p><img src="file:///images/pretty-maim.png" class="ui rounded image" /></p>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-10-18</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-10-18.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-10-18.html</id>
    <published>2022-10-18T00:00:00Z</published>
    <updated>2022-10-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>2022/10/18</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on October 18, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on October 19, 2022
	</div>

	

	
	<a title="All pages tagged &#39;neosvr&#39;." href="/tags/neosvr.html" class="ui tag label">neosvr</a>
	
      </div>

    <div class="description">
      <p>Neosで色々いじって遊んでた。</p>
<h1 id="やったこと">やったこと</h1>
<h1 id="知ったこと">知ったこと</h1>
<h2 id="VirtualKey は、同じSlotに付いた Button コンポーネントによる入力以外受け付けない neosvr"><code>VirtualKey</code> は、同じSlotに付いた <code>Button</code> コンポーネントによる入力以外受け付けない <span class="tag" data-tag-name="neosvr"><span class="smallcaps">neosvr</span></span></h2>
<p>NeosVRの公式discordを検索してきた所、何人か同じことを質問している人がいた。 やっぱりか~みたいな感じではある。 <code>VirtualKey</code> 、文字を入力するだけでなく 「キーボードをエミュレートする」挙動をするようなのでセキュリティ面でも仕方 ないことなのかもしれない。</p>
<ol>
<li><p>一応可能な突破方法: Userの手元に"TouchButton"を出現させ、押させる</p>
<p>NeosVR公式Discordでの会話の中で、「ユーザーが一瞬だけボタンをタッチするように すれば出来るは出来るよ」みたいなことが言われていたので実際にやってみた所、十分 普通に動いた。現状はこれが唯一のハックかな？って気がする。</p></li>
</ol>
<h2 id="名前忘れちゃったけどNから始まる方の楽器群がめちゃよい!! neosvr insturments">名前忘れちゃったけどNから始まる方の楽器群がめちゃよい!! <span class="tag" data-tag-name="neosvr"><span class="smallcaps">neosvr</span></span> <span class="tag" data-tag-name="insturments"><span class="smallcaps">insturments</span></span></h2>
<p><code>Neos Essentials/Community public folders/JP Publics/個人 individuals/?</code></p>
<p>Neos閉じちゃって名前が分からない。 ギター的なのとかドラム的なのとかオカリナ的なのとか色々な種類の楽器がある。めちゃよい。</p>
<h2 id="Aegisさんのモデリングツール">Aegisさんのモデリングツール</h2>
<p>場所: <code>Essential Tools/Aegis Folder</code></p>
<p>メッシュ一枚一枚作成して最終的に一つのモデルを作ることが出来る。 <a href="https://www.youtube.com/watch?v=sap5_NvrBFk">本人の動画</a>がYouTubeにある。</p>
<h1 id="やること">やること</h1>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-10-17</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-10-17.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-10-17.html</id>
    <published>2022-10-17T00:00:00Z</published>
    <updated>2022-10-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>2022/10/17</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on October 17, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on October 19, 2022
	</div>

	

	
	
	
      </div>

    <div class="description">
      <h1 id="やったこと">やったこと</h1>
<h1 id="知ったこと">知ったこと</h1>
<h2 id="&quot;Stop Writing Dead Programs&quot; by Jack Rusher (Strange Loop 2022) - YouTube"><a href="https://www.youtube.com/watch?v=8Ab3ArE8W3s">"Stop Writing Dead Programs" by Jack Rusher (Strange Loop 2022) - YouTube</a></h2>
<ul>
<li>単純に話が面白い。</li>
<li>プログラミングは未だにバッチ処理的なものが殆んどだが、環境と直接対話していけるものの方がよくね、という</li>
</ul>
<h1 id="やること">やること</h1>
    </div>
  </div>
  

</div>
]]></summary>
</entry>
<entry>
    <title>2022-10-16</title>
    <link href="https://cj-bc.github.io/blog/posts/2022-10-16.html" />
    <id>https://cj-bc.github.io/blog/posts/2022-10-16.html</id>
    <published>2022-10-16T00:00:00Z</published>
    <updated>2022-10-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>2022/10/16</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on October 16, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on October 19, 2022
	</div>

	

	
	
	
      </div>

    <div class="description">
      <p>今日はなんか色々調べたりしていたのでメモっておく。</p>
<h1 id="やったこと">やったこと</h1>
<h1 id="知ったこと">知ったこと</h1>
<h2 id="RDF">RDF</h2>
<p>知識記述言語とのこと。 それ自体は具体的な文法を持たず、N3やRDF/XML等が別個定義されている。</p>
<h2 id="ActivityPubの概要ざっくり">ActivityPubの概要ざっくり</h2>
<p><a href="https://www.w3.org/TR/activitypub/#Overview">w3.orgのOverview</a>自体が割と分かりやすい説明をしてくれているのでそれを見ると良い。</p>
<p>基本は<a href="https://www.w3.org/TR/activitystreams-core/">ActivityStreams</a>というデータフォーマットを軸にして作られている。 ソーシャルネットワークで必要となる基本的な語彙(表現したいオブジェクトや活動など)は ActivityStreams自体で表現が可能で、物足りない場合は<a href="https://www.w3.org/TR/json-ld/">JSON-LD</a>で拡張出来る。</p>
<p>サーバー⇔サーバー間のプロトコルとサーバー⇔クライアント間のプロトコルの二つの プロトコルから構成されている。</p>
<p>片方のみの実装でも可能で、例えばMisskeyとかはサーバー⇔クライアント間は独自のプロトコルを 使っていたはず。</p>
<p>ユーザーは<a href="https://www.w3.org/TR/activitypub/#actors">actors</a>として表現されており、それぞれ <code>inbox</code> と <code>outbox</code> を持つ。 <code>inbox</code> はその名の通り受け取るメッセージが入ってくる所で、Actorはそこにアクセスすることで 自分宛のメッセージを受け取る。 <code>outbox</code> は逆に「自分が世界に発信したいもの」を置く場所で、他のActorがそこを見にきたり、 サーバー間プロトコルによって転送されたりする。 「世界に発信」ではなく「特定の個人に発信」したい場合は、その個人のActorが持つ <code>inbox</code> に直接 メッセージをPOSTする。</p>
<h1 id="やること">やること</h1>
    </div>
  </div>
  

</div>
]]></summary>
</entry>

</feed>
