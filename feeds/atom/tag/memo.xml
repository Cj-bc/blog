<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>CLI! CLI! CLI!</title>
    <link href="https://cj-bc.github.io/blog/feeds/atom/tag/memo.xml" rel="self" />
    <link href="https://cj-bc.github.io/blog" />
    <id>https://cj-bc.github.io/blog/feeds/atom/tag/memo.xml</id>
    <author>
        <name>Cj-bc a.k.a Cj.BC_SD</name>
        <email>cj.bc-sd@outlook.jp</email>
    </author>
    <updated>August 24, 2020</updated>
    <entry>
    <title>jtdaugherty/tart ソースリーディングメモ</title>
    <link href="https://cj-bc.github.io/blog/posts/2020-08-24-jdaughertys-tart-code-reading.html" />
    <id>https://cj-bc.github.io/blog/posts/2020-08-24-jdaughertys-tart-code-reading.html</id>
    <published>2020-08-24T00:00:00Z</published>
    <updated>August 24, 2020</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>jtdaugherty/tart ソースリーディングメモ</h1>
  <div class="ui list">
    <div class="item">Posted on August 24, 2020</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 31, 2020
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;tart&#39;." href="/tags/tart.html" class="ui tag label">tart</a><a title="All pages tagged &#39;cli&#39;." href="/tags/cli.html" class="ui tag label">cli</a><a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" class="ui tag label">haskell</a><a title="All pages tagged &#39;memo&#39;." href="/tags/memo.html" class="ui tag label">memo</a>
  
</div>

<p>AAエディター(?)である<a href="https://github.com/jtdaugherty/tart">Tart</a>の内部実装を読んだ時のメモ</p>
<h1 id="Eventの処理">Eventの処理</h1>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>main
 |- Events.handleEvent
    |- マウスでの描画イベントを処理
    |- マウスがドラッグ中でかつ前回と違うものの上にある時はここでイベントを終了する
    |- 現在のモードに合わせて、イベントを処理する
      |- Events.Main.handleEvent
        |- Events.Main.handleCommonEvent
        |   |- ツールバー系のトグルをする
        |- Events.Main.handleAttrEvent
        |   |- Attributes(fg,bg,style)がクリックされた場合、変更作業をする
        |- Events.Main.handleEvent</code></pre>
</div>
]]></summary>
</entry>
<entry>
    <title>twtyとcode2imgでコードの画像つきツイートをする</title>
    <link href="https://cj-bc.github.io/blog/posts/2020-08-17-tweet-with-code2img-image-from-vim.html" />
    <id>https://cj-bc.github.io/blog/posts/2020-08-17-tweet-with-code2img-image-from-vim.html</id>
    <published>2020-08-18T00:00:00Z</published>
    <updated>2020-08-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>twtyとcode2imgでコードの画像つきツイートをする</h1>
  <div class="ui list">
    <div class="item">Posted on August 18, 2020</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 31, 2020
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;twitter&#39;." href="/tags/twitter.html" class="ui tag label">twitter</a><a title="All pages tagged &#39;tool&#39;." href="/tags/tool.html" class="ui tag label">tool</a><a title="All pages tagged &#39;memo&#39;." href="/tags/memo.html" class="ui tag label">memo</a><a title="All pages tagged &#39;cli&#39;." href="/tags/cli.html" class="ui tag label">cli</a>
  
</div>

<p><a href="https://github.com/skanehira/code2img">skanehira/code2img</a>を使うとコードを手軽に画像化できます。<br />
そして、<a href="https://github.com/skanehira/code2img.vim">skanehira/code2img.vim</a>を使うとvimから簡単にクリップボードに生成できます。<br />
これ、すごく便利です。<br />
しかし、この画像つきのツイートをしたいなと思った時、このままではtwitter.comを開いて投稿しなければなりません。<br />
vimmerとして、すごく、困る。</p>
<p>ということで困っていたら、<a href="https://twitter.com/gorilla0513">gorilla</a>さん自身も同じことを思っていたようで、爆速で作ってくれました。</p>
<script src="https://gist.github.com/skanehira/7dd6ed0dc8da8c6e87a11ab70ea83b53.js"></script>
<p><a href="https://github.com/skanehira/code2img">skanehira/code2img</a>と、<a href="https://github.com/mattn/twty">mattn/twty</a>があれば動きます。</p>
<p>すごい。使いやすい。実際に使ってみた結果:</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">ツイートのテストだよ。中身は適当なコードだよ。 <a href="https://t.co/QGJ2Y9iLfz">pic.twitter.com/QGJ2Y9iLfz</a></p>&mdash; Cj-bc_sd.sh🐟🔯🌸🐾@ソーダー (@Cj_bc_sd) <a href="https://twitter.com/Cj_bc_sd/status/1295377990524657665?ref_src=twsrc%5Etfw">August 17, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>とても良い。ありがとうgorillaさん。</p>
]]></summary>
</entry>
<entry>
    <title>blenderのSmooth</title>
    <link href="https://cj-bc.github.io/blog/posts/2020-08-17-blender-auto-smooth.html" />
    <id>https://cj-bc.github.io/blog/posts/2020-08-17-blender-auto-smooth.html</id>
    <published>2020-08-17T00:00:00Z</published>
    <updated>2020-08-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>blenderのSmooth</h1>
  <div class="ui list">
    <div class="item">Posted on August 17, 2020</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 31, 2020
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;blender&#39;." href="/tags/blender.html" class="ui tag label">blender</a><a title="All pages tagged &#39;memo&#39;." href="/tags/memo.html" class="ui tag label">memo</a><a title="All pages tagged &#39;tips&#39;." href="/tags/tips.html" class="ui tag label">tips</a>
  
</div>

<p>Blenderには、面と面を補完して滑らかに表示する<code>shade smooth</code>という機能があります。 しかし、何も考えずに使おうとすると思わぬところが補完され、予期せぬ結果になることが多々起こります。</p>
<p><img src="https://pbs.twimg.com/media/Efm72cmU8AI3H5K?format=jpg&amp;name=medium" class="ui rounded image" alt="shade flatの結果" /></p>
<p><img src="https://pbs.twimg.com/media/Efm74u6UcAEU2nM?format=jpg&amp;name=medium" class="ui rounded image" alt="shade smoothの結果" /></p>
<h1 id="Auto Smoothを使おう">Auto Smoothを使おう</h1>
<p>Auto Smoothは、面の角度によって<code>shade smooth</code>と<code>shade flat</code>を使い分けてくれる機能です。 <a href="https://blender-cg.net/smooth-flat/">blender-cg.netさんの記事</a>で知りました。</p>
<p><a href="https://docs.blender.org/manual/ja/2.80/modeling/meshes/structure.html#auto-smooth">公式リファレンス(英語)</a></p>
<p>これを使うと、かなり快適に使うことができます！わーい！！</p>
<p><img src="https://pbs.twimg.com/media/Efm8n4uUYAALg-g?format=png&amp;name=small" class="ui rounded image" alt="auto smoothの場所" /></p>
<p><img src="https://pbs.twimg.com/media/Efm8pyjU8AAU01a?format=jpg&amp;name=medium" class="ui rounded image" alt="auto smoothを適用してみた結果" /></p>
]]></summary>
</entry>
<entry>
    <title>mps-youtubeのAPIキーを更新する</title>
    <link href="https://cj-bc.github.io/blog/posts/2020-08-16-mpsyt-renew-token.html" />
    <id>https://cj-bc.github.io/blog/posts/2020-08-16-mpsyt-renew-token.html</id>
    <published>2020-08-16T00:00:00Z</published>
    <updated>2020-08-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>mps-youtubeのAPIキーを更新する</h1>
  <div class="ui list">
    <div class="item">Posted on August 16, 2020</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November 13, 2020
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;mps-youtube&#39;." href="/tags/mps-youtube.html" class="ui tag label">mps-youtube</a><a title="All pages tagged &#39;mpsyt&#39;." href="/tags/mpsyt.html" class="ui tag label">mpsyt</a><a title="All pages tagged &#39;memo&#39;." href="/tags/memo.html" class="ui tag label">memo</a>
  
</div>

<p>mps-youtubeで音楽を聴こうと思ったら、以下のようなエラーが出た。</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>Error fetching data. Possible network issue. Youtube Error 403: The request cannot be completed because you have exceeded your <a href="/youtube/v3/getting-started#quota">quota</a>.</p>
</blockquote>
</div>
<p>ので、<a href="https://github.com/mps-youtube/mps-youtube/wiki/Troubleshooting#youtube-error-403-the-request-cannot-be-completed-because-you-have-exceeded-your-quota">mps-youtubeレポのトラブルシューティング</a>に基づいて作業をする。<br />
また、上記記事で参考にされている<a href="https://www.slickremix.com/docs/get-api-key-for-youtube/">slickremix.com -- Get API Key for YouTube</a>も参考にする。 ただし、上記記事では「手順3までやる」と書いてあるが、最後(8)までやる必要がある。</p>
<h1 id="1. Google developpersにて、プロジェクトを作成してTokenを取得。">1. Google developpersにて、プロジェクトを作成してTokenを取得。</h1>
<p><a href="https://developers.google.com/" class="uri">https://developers.google.com/</a> に飛び、一番下(右下)の<code>Google API Console</code>からコンソールを開く。</p>
<p><img src="/images/console_place.png" class="ui rounded image" alt="console pic" /></p>
<p>左上の<code>Google APIs</code>の文字の横に「Project」という部分があるので選択→右上の「新しいプロジェクト」からプロジェクトを作成する。<br />
ダッシュボードの「APIとサービス」→「ライブラリ」からYouTube Data API v3を選択し有効化。<br />
最後に認証情報の作成が必要なので、あとはUIの流れに任せればTokenが手に入ります。</p>
<h1 id="2. mps-youtubeで入力する">2. mps-youtubeで入力する</h1>
<p>上記記事にあるとおり、以下のコマンドで入力する。一度appを終了させる必要があることに注意。</p>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>mps-youtube
&gt; set api_key &lt;key value&gt;
&gt; q # quit app</code></pre>
</div>
]]></summary>
</entry>
<entry>
    <title>blenderマテリアル のblend modeについて</title>
    <link href="https://cj-bc.github.io/blog/posts/2020-08-16-blender-material-blend-mode.html" />
    <id>https://cj-bc.github.io/blog/posts/2020-08-16-blender-material-blend-mode.html</id>
    <published>2020-08-16T00:00:00Z</published>
    <updated>2020-08-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ui center aligned icon header">
  <h1>blenderマテリアル のblend modeについて</h1>
  <div class="ui list">
    <div class="item">Posted on August 16, 2020</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 31, 2020
    </div>
  </div>
    
</div>
<div class="info">
  
  <a title="All pages tagged &#39;blender&#39;." href="/tags/blender.html" class="ui tag label">blender</a><a title="All pages tagged &#39;memo&#39;." href="/tags/memo.html" class="ui tag label">memo</a><a title="All pages tagged &#39;material&#39;." href="/tags/material.html" class="ui tag label">material</a><a title="All pages tagged &#39;3dcg&#39;." href="/tags/3dcg.html" class="ui tag label">3dcg</a>
  
</div>

<ul>
<li>Blenderのバージョン: 2.80</li>
<li>公式のリファレンス: <a href="https://docs.blender.org/manual/en/2.80/render/eevee/materials/settings.html">blender manual -- materials</a></li>
</ul>
<p>Blend modeは、表面の色の計算が終わった後にどのようにカラーバッファに影響するかを決めます。</p>
<h1 class="small-caption" id="Opaque">Opaque</h1>
<p>アルファチャンネル(=透明度)を完全に無視し、色を上書きします。これが一番早いモードです。</p>
<h1 class="small-caption" id="Additive">Additive</h1>
<p>直前の色に表面の色を加算します。アルファ値は、 <em>neutral color</em> の黒 (0.0, 0.0, 0.0, 0.0) と表面の色を混ぜるために使われます。</p>
<h1 class="small-caption" id="Multiplicative">Multiplicative</h1>
<p>直前の色と表面の色を乗算します。アルファ値は、 <em>neutral color</em> の白 (1.0, 1.0, 1.0) と表面の色を混ぜるために使われます。</p>
<h1 class="small-caption" id="Alpha Clip">Alpha Clip</h1>
<p>アルファ値がclip閾値を上回った場合のみ、直前の色は表面の色で上書きされます。</p>
<h1 class="small-caption" id="Alpha Hashed">Alpha Hashed</h1>
<p>アルファ値がランダムで決められたclip閾値を上回った場合のみ、直前の色は表面の色で上書きされます。 この統計学的なアプローチはノイズが多いですが、ソートの問題なしにアルファ値のブレンドを概算できます。レンダー設定でサンプル数を増やすと、最終的なノイズを減らすことができます。</p>
<h1 class="small-caption" id="Alpha Blending">Alpha Blending</h1>
<p>アルファ値のブレンドを使い、直前の色の上に表面の色をオーバーレイします。</p>
]]></summary>
</entry>

</feed>
