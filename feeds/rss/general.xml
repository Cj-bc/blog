<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>CLI! CLI! CLI!</title>
        <link>https://cj-bc.github.io/blog</link>
        <description><![CDATA[Cj-bc's personal blog posts.]]></description>
        <atom:link href="https://cj-bc.github.io/blog/feeds/rss/general.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 21 Dec 2021 00:00:00 UT</lastBuildDate>
        <item>
    <title>2021-12-21-qutebrwoser-extend-download-directory-suggestion</title>
    <link>https://cj-bc.github.io/blog/posts/2021-12-21-qutebrwoser-extend-download-directory-suggestion.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>Qutebrowserでのダウンロード先ディレクトリをrofiで選べるようにしてみた</h1>
  <div class="ui list">
    <div class="item">Posted on December 21, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on December 21, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Qutebrowserでは、ファイルをダウンロードする際に保存先を選ぶポップアップ？が出てくる。 しかし、これは前回使用したパスしかないし、タブキーでの補完もあまり上手く動かない(補完しようとすると 一つ上の階層を選択したりする)しで使い勝手があまりよくなかった。</p>
<p>私は、保存先がいくつかあってそれを使い分けるタイプなので、いっそのこと最初に表示する保存先の候補を リストから選択できるようにしよう、と思い立った。 Qutebrowserでも絞り込みとかはできるが、なんか挙動がいまいちに感じていたので、それならrofiを使ってやろう と思い立ったのがきっかけ。</p>
<h1 id="どう動くのか">どう動くのか</h1>
<p><a href="https://www.youtube.com/watch?v=XX9JRI-8QQw">ゆーちゅーぶってヤツにデモ動画を上げてみた</a>のでそちらを参照してほしい。 主には、今迄通りダウンロードをしようとするとrofiが(dmenuモードで)立ち上がり、 一つ選択したらそれが・選択されなかった場合は元のqutebrowserのアルゴリズムで選ばれたパスが ダウンロード先として表示される。</p>
<h1 id="技術的詳解">技術的詳解</h1>
<p>詳解ってほどでもないけど…</p>
<p>qutebrowserのブラウザに関連する処理は <code>qutebrowser/browser</code> に集められている。 その中でもダウンロードに関係するのは <code>qutebrowser/browser/downloads.py</code> である。 一目瞭然なので。 ここのうち、パスを割り出すのに使っている部分が <code>download_dir</code> なので ここに処理を挟み込んだ。</p>
<h2 id="Rofiを呼び出す際の注意点">Rofiを呼び出す際の注意点</h2>
<ul>
<li>標準入力に渡すファイルオブジェクトは <strong>必ず <code>seek(0)</code> すること</strong>
<ul>
<li>これを怠ると、読み込みのポインタがファイルの最後にあるので何も読めない</li>
</ul></li>
<li><code>tempfile.TemporaryFile</code> には <code>mode="w+"</code> オプション引数を付けてあげる
<ul>
<li>そうじゃないとバイナリを期待される。まぁどちらでも良いのかもだけどバイナリではないので。</li>
</ul></li>
<li><code>rofi -dmenu</code> の標準出力を <code>CompletedProcess.stdout</code> から取得すると、末尾に改行文字( <code>\n</code> )を含む
<ul>
<li>外してあげないと表示がうまくいかない。空白があるように見えた。</li>
</ul></li>
</ul>
<h2 id="Qutebrowserに新しい設定を組込む">Qutebrowserに新しい設定を組込む</h2>
<p>この実装では <code>downloads.location.favorite_paths</code> という新しい設定項目を 追加している。 これは、 <code>qutebrowser/config/configdata.yml</code> というYAMLファイルをいじるだけで良い (少なくともそれで動いている、公式の情報を元にしていないため何かしら足りない可能性はある)</p>
]]></description>
    <pubDate>Tue, 21 Dec 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-12-21-qutebrwoser-extend-download-directory-suggestion.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-11-27-qutebrowser-you-should-set-locale-properly-to-upload-files</title>
    <link>https://cj-bc.github.io/blog/posts/2021-11-27-qutebrowser-you-should-set-locale-properly-to-upload-files.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>qutebrowserでファイルのアップロードができないのはLANGのせいかもしれない</h1>
  <div class="ui list">
    <div class="item">Posted on November 27, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on December 21, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Qutebrowserでファイルアップロードする時、パスにUTF-8文字列が入っている場合 <code>LANG</code> が <code>ja_JP.UTF-8</code> じゃないと上手くアップロードできないことがあった。 少なくともGoogle Driveで確認済。</p>
<p>なのできちんと <code>LANG</code> 設定しましょうね。</p>
]]></description>
    <pubDate>Sat, 27 Nov 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-11-27-qutebrowser-you-should-set-locale-properly-to-upload-files.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-11-22-blog-import-all-qiita-posts-to-my-blog</title>
    <link>https://cj-bc.github.io/blog/posts/2021-11-22-blog-import-all-qiita-posts-to-my-blog.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>Qiitaの記事を全部引っ越ししている [WIP]</h1>
  <div class="ui list">
    <div class="item">Posted on November 22, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November 29, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>長らくの間私は <a href="https://qiita.com/Cj-bc">Qiita</a>に記事を書いていましたが、今や自分のページを持つに 至りました。</p>
<p>依然技術系の記事は別に出しても良いのですが、とりあえず このブログには全ての記事を載せておきたかったのでQiitaの記事を引っ越して こようと思います。</p>
<h1 id="行いたいこと">行いたいこと</h1>
<ul>
<li>Qiitaにある全ての記事を、ほぼそのまま持ってくる
<ul>
<li>メタ情報(投稿日時やタグなど)はできるだけ保持する</li>
<li>(管理上の都合で)org文書にコンバートする</li>
</ul></li>
<li>画像データもローカルに保存しなおす</li>
</ul>
<h1 id="注意すること">注意すること</h1>
<ul>
<li>URIエンコードされているものはデコードする</li>
</ul>
<h1 id="使うもの">使うもの</h1>
<dl>
<dt><a href="https://qiita.com/api/v2/docs">Qiita API v2</a></dt>
<dd>あたり前だがQiitaのAPI。「特定のユーザーの公開記事」なら認証なしで引っ張ってこれる
</dd>
<dt><a href="https://www.nushell.sh/">nushell</a></dt>
<dd>Rust製の、データの扱いに長けたシェル。JSONを素で扱えて楽なので使用する。
</dd>
<dt>node.js</dt>
<dd>いわずもがな。Qiita APIが、コンテンツをURIエンコードして返してくるのでデコードするのに使う
</dd>
</dl>
<h1 id="作業">作業</h1>
<h2 id="TODO 1. Qiitaから情報を取得する"><span class="todo TODO">TODO</span> 1. Qiitaから情報を取得する</h2>
<p>まずはQiitaから情報を引っ張ってきます。 これは <code>/users/:user_id/items</code> エンドポイントを使用します。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">curl</span> https://qiita.com/api/v2/users/Cj-bc/items</span></code></pre></div>
</div>
<p>これで、指定したユーザーの投稿のリストが取得できます。 各投稿はディクショナリで、そのキーの完全なリストは<a href="https://qiita.com/api/v2/docs#投稿">Qiita APIドキュメントの「投稿」</a>に記載されています。</p>
<p>ここでは、今回使うものとして以下のキーを紹介します:</p>
<dl>
<dt><code>body</code></dt>
<dd><strong>Markdown形式で</strong> 表現された本文を保持します。 これは <strong>URLエンコードされています</strong> 。
</dd>
<dt><code>created_at</code></dt>
<dd>この投稿が作成された日時です。ISO8601形式で秒数まで記載されています。
</dd>
<dt><code>title</code></dt>
<dd>その投稿のタイトルです。
</dd>
</dl>
<p>これらのキーの値を用いて:</p>
<ol>
<li>APIからデータを取得</li>
<li><em>本文を <code>body</code> から取得</em></li>
<li><code>created_at</code> と <code>title</code> からファイル名を構築する</li>
<li>そのファイルに本文を保存する</li>
</ol>
<p>という処理がしたい。 これを何を用いてやるか…という話なのですが、ここで「JSONデータを扱いやすい」という理由でnushellが出てきます。</p>
<p>最初はjqとか使おうとしてたけど、</p>
<ul>
<li>そもそもjqはあまり知らない</li>
<li>ファイル名を構築してそこへのリダイレクトが出来なさそう(少なくとも知らない)</li>
<li>文字列に他の処理をかけたい場合がある</li>
</ul>
<p>というのでjqではなくnushellにしました。</p>
<ol>
<li><p>1. APIからデータを取得</p>
<p>nushellでは、ビルトインの <code>fetch</code> コマンドで HTTPの <code>GET</code> リクエストを送信できます。</p>
<div class="ui segment">
<div class="ui top right attached label">
nu
</div>
<pre class="nu SourceCode"><code>fetch https://qiita.com/api/v2/users/Cj-bc/items
</code></pre>
</div>
<p>こうすると、JSONをnushellのtableに変換して返してくれます。</p></li>
<li><p>2. 本文を <code>body</code> から取得</p>
<p>このAPIは、「投稿のリスト」を返してくるので、それぞれに対してbodyを取得してあげる。</p>
<dl>
<dt><code>each</code></dt>
<dd>標準入力にリストを取り、その各要素に対してコードブロックを適用します
</dd>
<dt><code>{}</code></dt>
<dd>コードブロックです。この中の <code>$it</code> は、このコードブロックに渡されるパラメーターを示します。
</dd>
<dt><code>{|x| }</code></dt>
<dd>コードブロックは名前付きでも定義することができます。この場合、 <code>$it</code> の変わりに <code>$x</code> を同じ意味で使用できます。(ついでの解説)
</dd>
</dl>
<div class="ui segment">
<div class="ui top right attached label">
nu
</div>
<pre class="nu SourceCode"><code>fetch https://qiita.com/api/v2/users/Cj-bc/items | each {$it.body}
</code></pre>
</div></li>
<li><p><span class="todo TODO">TODO</span> 3. <code>created_at</code> と <code>title</code> からファイル名を構築する</p>
<p>現在、ブログ記事のファイル名は <code>&lt;日付&gt;-&lt;タイトル&gt;</code> のケバブケースになっている。 なのでこの形に合うように整形する。</p>
<dl>
<dt><code>$"&lt;text&gt;"</code></dt>
<dd><code>$</code> から始まる文字列は、文字列埋め込みです。 <code>()</code> で囲んであげた部分を式として評価し、文字列に埋め込みます。
</dd>
<dt><code>str substring &lt;range&gt;</code></dt>
<dd>指定の範囲のスライスを作成します。
</dd>
<dt><code>str kebab-case</code></dt>
<dd>標準入力で来た文字列をケバブケースに変換します。
</dd>
</dl>
<div class="ui segment">
<div class="ui top right attached label">
nu
</div>
<pre class="nu SourceCode"><code>fetch https://qiita.com/api/v2/users/Cj-bc/items | each {$&quot;($it.created_at | str substring [0,10])-($it.title | str kebab-case).md&quot;}
</code></pre>
</div></li>
</ol>
<h2 id="TODO 2. HTMLエンコードを外す"><span class="todo TODO">TODO</span> 2. HTMLエンコードを外す</h2>
<p>APIから取得した <code>body</code> は HTMLエンコードされている(e.g. <code>-&gt;</code> が <code>-&amp;gt;</code> になるなど) ので、これをデコードしてあげます。</p>
<div class="waring">
<p><em>HTML エンコード</em> と <em>URI エンコード</em> は(異なります。</p>
</div>
<p>多分色々な方法が色々な言語にあると思いますが、 一番最初に思い付いた簡単かつ確実なのはnodeを使うことだったのでそうします。 <code>decodeURI</code> (<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/decodeURI">参考</a>) 使えばよさそう。</p>
<dl>
<dt><code>console.log</code></dt>
<dd>標準出力に出力するために使用します
</dd>
<dt><code>fs.readFileSync("/dev/stdin", "utf8")</code></dt>
<dd>標準入力から読むために使用します
</dd>
<dt><code>decodeURI</code></dt>
<dd>URIエンコードをデコードする関数です。
</dd>
</dl>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb5" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ex">node</span> -e <span class="st">&#39;console.log(encodeURI(&quot;https://qiita/てすともーど!!!&gt;&quot;))&#39;</span> <span class="kw">|</span> <span class="ex">node</span> -e <span class="st">&#39;console.log(decodeURI(fs.readFileSync(&quot;/dev/stdin&quot;, &quot;utf8&quot;)))&#39;</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
example
</div>
<pre class="example SourceCode"><code>https://qiita/てすともーど!!!&gt;
</code></pre>
</div>
<h2 id="TODO 3. ファイルに保存する"><span class="todo TODO">TODO</span> 3. ファイルに保存する</h2>
<p><code>save</code> で標準入力からきたものをファイルに保存できます。 つかったものだけ</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb7" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ex">fetch</span> https://qiita.com/api/v2/users/Cj-bc/items?per_page=86 <span class="kw">|</span> <span class="ex">each</span> { <span class="va">$it</span>.body <span class="kw">|</span> <span class="ex">save</span> <span class="st">$&quot;(</span><span class="va">$it</span><span class="st">.created_at | str substring [0 10])-(</span><span class="va">$it</span><span class="st">.title|str kebab-case).md&quot;</span> }</span></code></pre></div>
</div>
<p><a href="https://qiita.com/saba_can00/items/02ff28a16a0d312a5259">https://qiita.com/saba_can00/items/02ff28a16a0d312a5259</a></p>
]]></description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-11-22-blog-import-all-qiita-posts-to-my-blog.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-11-18-emacs-display-line-numbers-type</title>
    <link>https://cj-bc.github.io/blog/posts/2021-11-18-emacs-display-line-numbers-type.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>行番号を表示するdisplay-line-numbers-modeの表示形式について</h1>
  <div class="ui list">
    <div class="item">Posted on November 18, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November 18, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>help:display-line-numbers-mode は、 行番号をWindowの左側に表示してくれるモード。 (help:linum-mode も似たような効果があるが、 help:display-line-numbers-mode の方がカスタマイズ出来るので こちらを使っている。</p>
<p>表示形式は help:display-line-numbers-type を設定することで 変更できる。</p>
<table>
<tbody>
<tr class="odd">
<td><code>t</code></td>
<td>絶対的(absolute)な行数を表示する</td>
</tr>
<tr class="even">
<td><code>relative</code></td>
<td>現在の行からの相対的な行数を表示する</td>
</tr>
<tr class="odd">
<td><code>visible</code></td>
<td>現在の行から、「見た目上の行数」を表示する</td>
</tr>
</tbody>
</table>
<p><code>visible</code> は例えば、evilユーザーかつ何かしらの ナローイングしてる時に便利。</p>
<p>Normal modeで他の行を見にいきたい時、 <code>&lt;相対的な行数&gt;k</code> / <code>&lt;相対的な行数&gt;j</code> とかすると思うのだけど、 これはナローイングされている内部は見にいかずに「見た目上の行数」 を基にして動作するため、 <code>visible</code> にしていると便利</p>
]]></description>
    <pubDate>Thu, 18 Nov 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-11-18-emacs-display-line-numbers-type.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-11-15-xmonad-order-of-managehook</title>
    <link>https://cj-bc.github.io/blog/posts/2021-11-15-xmonad-order-of-managehook.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>XMonadのManageHook表記順番について</h1>
  <div class="ui list">
    <div class="item">Posted on November 15, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November 15, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p><a href="https://hackage.haskell.org/package/xmonad-0.17.0/docs/XMonad-Core.html#t:ManageHook">ManageHook</a> は、XMonadの重要な要素の一つで、ウィンドウ毎に 設定をしたり <a href="https://hackage.haskell.org/package/xmonad-0.17.0/docs/XMonad-Core.html#t:X">Xモナド</a> のアクションを実行したりするためのもの。</p>
<h1 id="やりたかったこと">やりたかったこと</h1>
<p>条件に一致するウィンドウをFloat化し、レイアウトを調節する。</p>
<h1 id="ポイント: 順序に気をつける">ポイント: 順序に気をつける</h1>
<p>ポイントは、 <strong><a href="https://hackage.haskell.org/package/xmonad-0.17.0/docs/XMonad-Core.html#t:ManageHook">ManageHook</a>の中身に<a href="https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Monoid.html#t:Endo">Endo</a>が使われている</strong> ことです。 Endoは、関数のモノイドを提供するためのラッパーで、これは 結合に <code>.</code> (関数合成)を用います。 (参考: <a href="https://blog.miz-ar.info/2019/02/monoid-for-haskellers/#_a_-gt_a_Endo">Haskellerのためのモノイド完全ガイド</a>)</p>
<p>これはつまり、二つの <code>ManageHook</code> <code>a ::ManageHook</code> / <code>b ::ManageHook</code> があった場合、これをモノイドとして結合 (e.g. <code>a &lt;&gt; b</code>) した 際の実行順序は後ろからかけた方(例の場合は <code>b</code>) が先に実行されるということです。</p>
<p>なので、「Float化してからレイアウト調整する」のであれば 先にFloatさせる = 先に <code>doFloat</code> する</p>
<p>眠いのでちょっとあとでまた整理するかもzzz</p>
]]></description>
    <pubDate>Mon, 15 Nov 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-11-15-xmonad-order-of-managehook.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-11-03-learnt-about-clean-architecture</title>
    <link>https://cj-bc.github.io/blog/posts/2021-11-03-learnt-about-clean-architecture.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>クリーンアーキテクチャーについて少し学んだ</h1>
  <div class="ui list">
    <div class="item">Posted on November  3, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November  4, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>今迄あまり設計というものに触れてきていなかったのだけど、今回初めて「クリーンアーキテクチャ」という概念を少し学んだ。 実をいうと SOLID原則すら触れていなかった。名前は知ってたけどねぇ…</p>
<p>関数型を使ってることが多いのもあるけど、古いものと考えていた節は正直ある。 いざ触れてみるとやっぱり為になることが多いねぇ…</p>
<p><a href="https://github.com/Cj-bc/3dShell">Cj-bc/3dShell</a>の設計に悩んだ挙句、部分的に考え方を取り入れてみている。</p>
<p>以下は、調べている間に感じたことの個人的なメモで <strong>技術的に但しいかは保証できない</strong> ので注意。 何かしら「これは違うぞ!!」というのがあれば、 <a href="https://twitter.com/Cj-bc">Twitter</a>にでも直接直リプライ等で指摘していただけるとありがたいです</p>
<h1 id="クリーンアーキテクチャについて軽いメモ">クリーンアーキテクチャについて軽いメモ</h1>
<ul>
<li>クリーンアーキテクチャは「こうやって作ると良い設計になる」というだけであり、別段正解の使い方が一つあるわけではない</li>
<li>サンプル実装もあるにはあるがあくまでサンプル
<ul>
<li>別にもっと層があっても少なくてもいい</li>
</ul></li>
<li>アーキテクチャはそれぞれの事例に合わせて作るべき</li>
<li>SOLID原則をつきつめるとこれになる感じがある。</li>
<li>Onion Architectureや<a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)">Hexagonal architecure</a>等の共通点を取り出した(ような)もの
<ul>
<li>なので図式には共通点が色々ある</li>
</ul></li>
<li>永続化の仕組みやフロントエンド、入力の取得方法等を個別のクラスに切り分けることができるので、パーツ毎の作成が楽
<ul>
<li>「DB決まってないけどフロント作って!」みたいな無茶ぶりができる</li>
<li>テストする時にMockにいれかえたり等できる。</li>
</ul></li>
<li>インターフェースを介したやりとりには <code>DTO</code> (Data Transfer Object) を作成して行う
<ul>
<li>ただDBとのやりとりに <code>DTO</code> 使ってない例が結構あるのでそこの匙加減わからんなぁ</li>
</ul></li>
</ul>
<h2 id="大事な要素">大事な要素</h2>
<ul>
<li><strong>「ドメイン・ビジネスロジックを守る」</strong> のが何よりも大事</li>
<li>外から内側への依存</li>
<li>インターフェースを用いることにより、「具象」ではなく「抽象」への依存にする</li>
</ul>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://qiita.com/nrslib/items/a5f902c4defc83bd46b8#humble-view">実装クリーンアーキテクチャ – @nrslib qiita.com</a></li>
<li><a href="https://ja.wikipedia.org/wiki/SOLID">wiki:SOLID</a></li>
<li><a href="https://gist.github.com/mpppk/609d592f25cab9312654b39f1b357c60">クリーンアーキテクチャ完全に理解した – @mpppk github.com</a></li>
</ul>
]]></description>
    <pubDate>Wed, 03 Nov 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-11-03-learnt-about-clean-architecture.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-10-15-emacs-package-making-evil-textobj-parameter</title>
    <link>https://cj-bc.github.io/blog/posts/2021-10-15-emacs-package-making-evil-textobj-parameter.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>evil-textobj-parameterを作成中です</h1>
  <div class="ui list">
    <div class="item">Posted on October 15, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November 29, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p><a href="https://github.com/sgur/vim-textobj-parameter">sgur/vim-textobj-parameter</a>のevil版である<a href="https://github.com/Cj-bc/evil-textobj-parameter">Cj-bc/evil-textobj-parameter</a> を <del>作っています。</del> 完成しました!</p>
<h1 id="基本的な仕様">基本的な仕様</h1>
<ul>
<li>キーバインドは提供していないので、 <code>define-key</code> で設定してください。</li>
<li><code>i2,</code> はないですが、それ以外はオリジナルと同じ挙動にしようとしています。</li>
</ul>
<h1 id="現状">現状</h1>
<h2 id="出来ること">出来ること</h2>
<ul>
<li>Inner textobjectは動きます</li>
<li>Outer textobjectは最後のパラメーター以外の時は動きます</li>
</ul>
<h2 id="出来無いこと・欠けていること">出来無いこと・欠けていること</h2>
<ul>
<li><del>適切なライセンスの表記</del>
<ul>
<li><a href="https://github.com/Cj-bc/evil-textobj-parameter/commit/c4f62be46b062289b27ad55fedbe3a71e048c37d">MPLに設定されました</a></li>
</ul></li>
<li><del>Outer textobjectが、最後のパラメーターの上にカーソルがある状態で使うとうまく動きません。これの修正</del>
<ul>
<li>修正済</li>
</ul></li>
<li>内部処理、多分 <code>evil-common</code> とかを上手く使えばもっとよく書ける</li>
</ul>
<p>—-</p>
<p>とりあえず適当な報告まで</p>
]]></description>
    <pubDate>Fri, 15 Oct 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-10-15-emacs-package-making-evil-textobj-parameter.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-10-14-elisp-how-to-write-package</title>
    <link>https://cj-bc.github.io/blog/posts/2021-10-14-elisp-how-to-write-package.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>Elispパッケージを書く際の諸メモ</h1>
  <div class="ui list">
    <div class="item">Posted on October 14, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on October 15, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>初めて<a href="https://github.com/Cj-bc/evil-textobj-parameter">きちんとしたElispパッケージ</a>を作成しているので、パッケージとして書く 場合の注意点とか。</p>
<h1 id="参考リンク">参考リンク</h1>
<dl>
<dt><a href="info:elisp#Packaging">info:elisp#Packaging</a></dt>
<dd>ほぼほぼ全てここに書いてある
</dd>
<dt><a href="info:elisp#Tips">info:elisp#Tips</a></dt>
<dd>コメントの書き方のTipsとか
</dd>
</dl>
<h1 id="ヘッダーのテキスト作成">ヘッダーのテキスト作成</h1>
<p>Elispファイルは大体同じようなコメント行があるが、 どうやらメタ情報を書いていたりして形式があるらしい。</p>
<ul>
<li><a href="info:elisp#Library Headers">info:elisp#Library Headers</a></li>
</ul>
<p>以下は<a href="info:elisp#Library Headers">上記リンク</a>にある、コメントの一例</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>;;; foo.el --- Support for the Foo programming language  -*- lexical-binding: t; -*-

;; Copyright (C) 2010-2021 Your Name

;; Author: Your Name &lt;yourname@example.com&gt;
;; Maintainer: Someone Else &lt;someone@example.com&gt;
;; Created: 14 Jul 2010
;; Keywords: languages
;; URL: https://example.com/foo

;; This file is not part of GNU Emacs.

</code></pre>
</div>
<h2 id="最初の行">最初の行</h2>
<p>一番最初の行は特定のフォーマットになっている必要がある。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>;;; FILENAME --- DESCRIPTION  -*- lexical-binding: t; -*-
</code></pre>
</div>
<h2 id="ヘッダーコメント">ヘッダーコメント</h2>
<table>
<tbody>
<tr class="odd">
<td><code>Author</code></td>
<td>作者の名前とメアド。複数いる場合は、次の行に <code>;;</code> とタブ(若しくは最低2つ以上のスペース)を置いた後に書く</td>
</tr>
<tr class="even">
<td><code>Maintainer</code></td>
<td>現状メンテナンス(バグレポートの対処とか)する人。書式は <code>Author</code> と同じで、省略された場合 <code>Author</code> になる。</td>
</tr>
<tr class="odd">
<td><code>Created</code></td>
<td>オプショナル。ファイルが最初に作られた日の記録、歴史上の興味以上の意味はない。</td>
</tr>
<tr class="even">
<td><code>Version</code></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="フッターコメント">フッターコメント</h2>
<p>ファイルの区切りを明示することで、ファイルの全体を持っているかがわかる。</p>
<p>(正直「一部の欠けたファイル」になることって今もうないと思うので 必要性はあんまりわからないな？？？)</p>
]]></description>
    <pubDate>Thu, 14 Oct 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-10-14-elisp-how-to-write-package.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-09-17-xmobar-reason-utf8-wasnt-rendered</title>
    <link>https://cj-bc.github.io/blog/posts/2021-09-17-xmobar-reason-utf8-wasnt-rendered.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>xmobarでwithutf8してるのにUTF8出来なかった理由</h1>
  <div class="ui list">
    <div class="item">Posted on September 17, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on September 17, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p><code>LANG</code> の設定を確認して。 <code>bashrc</code> 等で設定していても、xmonadから呼び出される場合は それらは反映されない。</p>
<p>xmobarを呼び出している場所でそのまま設定できる 詳しい方法は以下</p>
</blockquote>
</div>
<p>xmobarは、ビルド時のフラグ <code>with_utf8</code> を付けることで UTF-8文字列を扱えるようになる。 そしてこのフラグはデフォルトで <code>True</code> (=有効)なので、特に 何もしなくても使えるはずだった。</p>
<p>が、上手くいかなかった。</p>
<h1 id="試したが上手くいかなかったこと">試したが上手くいかなかったこと</h1>
<ul>
<li>xmobarのビルドフラグの確認
<ul>
<li>archlinuxユーザーなので<a href="https://github.com/archlinux/svntogit-community/blob/packages/xmobar/trunk/PKGBUILD">PKGBUILD</a>を確認したがフラグは全て有効になっている</li>
</ul></li>
<li>フォントの確認
<ul>
<li>普段使いのフォントなので、日本語は対応しているはず</li>
</ul></li>
</ul>
<h1 id="判明した原因">判明した原因</h1>
<p>bashからではなくxmonadから起動していた影響で 環境変数が伝搬されておらず、 <code>LANG=ja_JP.UTF-8</code> でない環境で 実行されていた。</p>
<p>証拠に、ターミナルから <code class="sourceCode bash" data-org-language="sh"><span class="va">LANG=</span>C <span class="ex">xmobar</span></code> と実行してみると 日本語が表示できなくなった。</p>
<h1 id="解決策">解決策</h1>
<h2 id="XMonad.Hooks.DynamicLogを使用している場合"><a href="https://hackage.haskell.org/package/xmonad-contrib-0.16/docs/XMonad-Hooks-DynamicLog.html">XMonad.Hooks.DynamicLog</a>を使用している場合</h2>
<p>多分大半がこちらなのではないか…??</p>
<p>とは思うんだけど時間がない&amp;&amp;私やってないので割愛、 <a href="https://hackage.haskell.org/package/xmonad-contrib-0.16/docs/src/XMonad.Hooks.DynamicLog.html#xmobar">xmobar</a>関数の定義を少し弄ってあげた以下のような関数を作れば動くはず。 理由は [[* <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html">XMonad.Hooks.StatusBar</a> を使用している場合]] を参照。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>xmobar&#39; conf <span class="ot">=</span> statusbar <span class="st">&quot;LANG=ja_JP.UTF-8 xmobar&quot;</span> xmobarPP toggleStructsKey conf</span></code></pre></div>
</div>
<h2 id="XMonad.Hooks.StatusBar を使用している場合"><a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html">XMonad.Hooks.StatusBar</a> を使用している場合</h2>
<p>実はこちらの方が新しいらしく、もう <a href="https://hackage.haskell.org/package/xmonad-contrib-0.16/docs/XMonad-Hooks-DynamicLog.html">DynamicLog</a> は推奨されていないのだそうだ。</p>
<p><strong>知るか!!!!!</strong></p>
<p>と怒鳴ってもしかたないのだけど怒鳴られても仕方ない事情もある。 (それはそれで別で書こう。 )</p>
<p>さて。 <code>StatusBar</code> を使用している場合、 <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html#t:StatusBarConfig">StatusBarConfig</a> 型の 値を使っているはず。 今はみんなここで <code class="sourceCode haskell">statusBarProp <span class="st">&quot;xmobar&quot;</span> (<span class="fu">pure</span> xmobarPP)</code> とかしているのではないだろうか。</p>
<p>ここを以下のように書き換えればよい:</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>statusBarProp <span class="st">&quot;LANG=ja_JP.UTF-8 xmobar&quot;</span> (<span class="fu">pure</span> xmobarPP)</span></code></pre></div>
</div>
<p>そう、 <em>先頭に <code>LANG=ja_JP.UTF-8</code> を付け加えるだけ</em> である。 かんたん!!</p>
<ol>
<li><p>仕組み</p>
<p>実は <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html#v:statusBarProp">statusBarProp</a> の中を見てみても分かりづらいのだが、 <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html#t:StatusBarConfig">StatusBarConfig</a> から読み解くとわかる。</p>
<p><code>StatusBarConfig</code> では、 <code>sbStartUpHook</code> を使って 「ステータスバーを起動する <code>X ()</code> アクション」を定義している。</p>
<p><code>statusBarProp</code> 関数にて引数に取った文字列 ( <code>LANG=ja_JP.UTF-8 xmobar</code> なり <code>xmobar</code> なり)は <code>statusBarProp</code> → <code>statusBarPropTo</code> → <code>statusBarGeneric</code> → <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html#v:spawnStatusBar">spawnStatusBar</a> とそのまま受け渡されていき、</p>
<p>そこから<a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-Core.html#v:spawnPID">spawnPID</a>へと渡される。 そしてこの中では <a href="https://hackage.haskell.org/package/unix-2.7.2.2/docs/System-Posix-Process.html#v:executeFile">executeFile</a> に <strong>なんと <code>/bin/sh -c</code> の引数として</strong> 渡され、最終的に <code>execv</code> システムコールによって実行される。</p>
<p>ここが大事で、 <em>shの上で実行される</em> ことによって環境変数を その場で設定したりといったシェルの機能を使うことができる。</p></li>
</ol>
]]></description>
    <pubDate>Fri, 17 Sep 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-09-17-xmobar-reason-utf8-wasnt-rendered.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-09-12-akihabara-wado-first-try</title>
    <link>https://cj-bc.github.io/blog/posts/2021-09-12-akihabara-wado-first-try.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>秋葉原和堂に行ってきた</h1>
  <div class="ui list">
    <div class="item">Posted on September 12, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on September 12, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>今日は仕事が早めに終わったので、折角だからどこかで御飯食べて帰ろ~と 思った矢先に思い出したのが秋葉原和堂だった。 秋葉原和堂は存在こそ知っていたものの、その雰囲気と</p>
<p>—</p>
<p>意を決して階段を降りる。 そもそも地下なことも把握していなかった。 階段を降りつつ、最初で最後の踊り場で下を見てみると、そこには重い両開きの 扉が一つ。</p>
<p>「ドア」ではなく「扉」がもっともふさわしいと思うような、 「この世俗と奥の空間を区切る」ような雰囲気のある扉だった。</p>
<p>この扉の前で、既に少し雰囲気に圧倒されている。 扉の装飾も綺麗で、この身で触れることも躊躇うような美しさと重さのある 雰囲気を漂わせていた。</p>
<p>まだ引き返すこともできる。 まだ、ここなら取り止めることもできる。</p>
<p>そんな感情すらよぎる程に雰囲気に圧倒されていた。</p>
<p>先程もした気がするのだが、ここでもまた意を決して右側の扉に手をあてて、 力を入れ、ついにこの秋葉原和堂に踏み入れた。</p>
<p>扉を開けた先、すぐに目に飛び込んできたのは豪華な、それでいてもうるさくなくもの静かな 威厳のあるソファと絨毯だった。</p>
<p>誰が座るわけでもなくそこに置いてあったそれらは、恐らく装飾の一つにすぎないのだろうなと思うが ここの世界観・雰囲気を物語るには十分だった。</p>
<p>そこに目を引かれるのもつかの間、左手側に受付が見える。 店員さんが二名。</p>
<p>受付にはAirPayだとか様々なお土産・コラボグッズだとか近代的なものが置いてあるにも かかわらず「大正」の雰囲気に上手いこと溶け込んでいた。</p>
<p>店員さん方の服装も、大正時代にあったものと近しいのかは分からないけれどとても 綺麗で、溶け込んでいた。</p>
<p>~~</p>
<p>店員さんに関して一つ言えば、髪色を染めている方が何人もいらっしゃったにも係らず 服装やお店の雰囲気から少しも逸脱せずに溶け込んでいたのが本当に驚いた。</p>
<p>秋葉原和堂のツイッターに掲げられている「『大正浪漫』と『調合』がコンセプト」、 まさにこれを体現しているなと今特に思う。</p>
<p>~~</p>
<p>事前にTwitterやサイト等で色々と見ているものの「ご利用は始めて」なので 受付の店員さんに頼み方等を教わる。</p>
<p>ベル若しくは備え付けのQRコードから注文が可能らしい。 「大正」と「令和」のコンビネーション…調合…調合ってそういう意味なのか 分からないけど。</p>
<p>受付でカフェを選択し、メニューを受け取ってフロアへ進む。 進むといっても横を向いたらもうその場所なのである。 そちらを向いた瞬間に、一瞬固まってしまった。</p>
<p>今迄散々TwitterやInstagramで拝見させて頂いていた景色とはいえ、 実際に目の当たりにすると何だろうな、雰囲気が凄い違う。 本当に異世界に来たような、ここだけ時の流れが違うような、 非日常感がとても強い光景だった。 タイムトリップしたような気分になった。</p>
<p>なんとこの時はたまたまカフェ側には他のお客様がいらっしゃらなかったので、 自由に席は選び放題だった。とりあえず、壁を背にできるソファに座る。</p>
<p>とても、良い…</p>
<p>座って一息付き、テーブルの上を見渡してみると見付かるのが先程話にあったベルとQRコード。 QRコードは紙に印刷されていたが、ベルは本格的に「ベル」だった。 「ベルの音がなる機械」ではなく「ベル」だった。</p>
<p>そのベルは、正直初めて見たかもしれない…というくらいに想像通りの「ベル」で、中にある長い 部分が結構長かった。そしてここにも素敵な装飾…</p>
<p>メニューを開こうとして、メニューの表面の文様が見えたがこれもとても綺麗に出来ている。 なんだろう、実際には見たことがないが昔の本にありそうな装飾。 金色で縁取られ、花のような蔦のような模様が並んでいる。 綺麗…</p>
<p>綺麗なのはいいんだが、私は頼むものを決める必要がある。ずいぶんと(特に紅茶の種類で)悩んだ末、 料理はナポリタンで紅茶は「この料理にあう紅茶お勧めありますか？」にすることにした。</p>
<p>— 眠い。ので書きたい所先に書く —</p>
<p>清算を終え、和堂の扉に手をかける。 …ここから外の世界へ戻るのには少し時間が必要だった。 でも出なければならない。なぜならここはお店の入口なので…</p>
<p>少し躊躇ってから、覚悟をつけてえいっと開けて外に出た。 そして外に出たのと同時に「令和現代日本」に帰ってきたのを感じた。 よくも悪くも私の本来生きている世界線。</p>
<p>最初はここから「秋葉原和堂」の世界へ入るのに躊躇していたけれど、 最後にはこちらに戻ってくるのを躊躇するようになってしまっていた。 かかっていた曲といい、内装といい、メニューといい、店員さんといい、 普段とはとても異なった世界だったけれど謎に安心感と落ち着きを感じていた。</p>
<p>普段大体この仕事終わりは精神的に相当疲れていて、家に帰ってからもすぐ疲れて寝て しまうことが多かった。 が、今日は秋葉原和堂のおかげで大分精神が楽。居心地の良さ、緊張の解れよう、リラックスさが 半端じゃない。 「また一週間頑張るか~~!!」という気力すら湧いてきた。</p>
<p>普段から通うには少し御高いけれども、一ヶ月に1回とか自分のご褒美として秋葉原和堂に来るのが良いのかも しれない、と感じた。</p>
<p>あとがき</p>
<p>あと眠いながら書いてるので誤字脱字諸々すまん頭がまわらない。 でも当日中にどうしても記録しておきたかった…</p>
]]></description>
    <pubDate>Sun, 12 Sep 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-09-12-akihabara-wado-first-try.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>

    </channel>
</rss>
