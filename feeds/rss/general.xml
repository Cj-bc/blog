<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>CLI! CLI! CLI!</title>
        <link>https://cj-bc.github.io/blog</link>
        <description><![CDATA[Cj-bc's personal blog posts.]]></description>
        <atom:link href="https://cj-bc.github.io/blog/feeds/rss/general.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 26 Jan 2022 00:00:00 UT</lastBuildDate>
        <item>
    <title>2022-01-26-elisp-time-related-functions</title>
    <link>https://cj-bc.github.io/blog/posts/2022-01-26-elisp-time-related-functions.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>時間関連のElisp関数</h1>
  <div class="ui list">
    <div class="item">Posted on January 26, 2022</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on January 26, 2022
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>時間に関連するElisp関数達</p>
<h1 id="ビルトイン関数群 ( src/timefns.c )">ビルトイン関数群 ( <code>src/timefns.c</code> )</h1>
<p>エポック秒 (1970年1月1日0時0分0秒からの経過時間) で時間を 扱います。 基本的には <code>format-time-string</code> を用いて変換することになります。</p>
<h2 id="format-time-string"><code>format-time-string</code></h2>
<p>help:format-time-string 指定したフォーマットで時間を文字列にしてくれる関数。</p>
<h2 id="current-time"><code>current-time</code></h2>
<p>help:current-time 現在の時間を返します</p>
<h2 id="time-add"><code>time-add</code></h2>
<p>help:time-add</p>
<p>時間を加算してくれます。負数を足せば減算できます。 足す値のフォーマットは <code>current-time</code> で使われているものと同じで ちょっと分かりづらいですが、 <a href="https://github.com/org-roam/org-roam/blob/445e3594b25c1c29dd269e99cb0cc958ed3f28b0/extensions/org-roam-dailies.el#L157">org-roam-dailes.elで使われている箇所</a>を参考にすると、 1日足し引きするには <code>86400</code> を足し引きすればよさそうです。</p>
<p>n日足すには:</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>     (defun nth-day (n)
&quot;Return nth day from today&quot;
(time-add (* n 86400) nil))
</code></pre>
</div>
<h1 id="calendar">calendar</h1>
<p>曜日等を扱うことができます。</p>
<h2 id="calendar-nth-named-day"><code>calendar-nth-named-day</code></h2>
<p>help:calendar-nth-named-day</p>
<p>「特定の日付の前後の特定の曜日」を返すことができます。 曜日は数値で指定され、 0が日曜日、1が月曜日…となっていきます (参考: help:calendar-week-start-day)</p>
<p>例えば、今日2022年1月26日の次の日曜日を取得するには</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode" data-export="both" data-results="raw"><code>(calendar-nth-named-day 1 0 1 2022 26)
</code></pre>
</div>
<p>(1 30 2022)</p>
<p>となります</p>
]]></description>
    <pubDate>Wed, 26 Jan 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-01-26-elisp-time-related-functions.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2022-01-06-haskell-trap-of-foldl1</title>
    <link>https://cj-bc.github.io/blog/posts/2022-01-06-haskell-trap-of-foldl1.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>foldl1/foldr1のワナ – Foldableが空だと死ぬ</h1>
  <div class="ui list">
    <div class="item">Posted on January  6, 2022</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on January  9, 2022
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>当たり前といえば当たり前だけど、気付くのに数十分くらいはかかってしまったのでメモ</p>
<p><code>foldl1</code> / <code>foldr1</code> はそれぞれ <code>foldl</code> / <code>foldr</code> の亜種で、後者が初期Accumlatorを 指定した後に対象の <code>Foldable</code> を渡す必要がある一方、 <code>1</code> が付いているシリーズは 対象の <code>Foldable</code> から初期Accumlatorを取得する。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="fu">foldl1</span><span class="ot"> ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="fu">foldr1</span><span class="ot"> ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="fu">foldl</span><span class="ot">  ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="fu">foldr</span><span class="ot">  ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> a</span></code></pre></div>
</div>
<p>で、 <code>1</code> シリーズを使用するのであれば <strong>対象の <code>Foldable</code> が空にならないように確認する</strong> 必要がある。 もし空であった場合、 <code>Prelude.foldr1</code> であれば</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="op">&gt;</span> Prelude.foldr1 <span class="fu">const</span> []</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="op">***</span> <span class="dt">Exception</span><span class="op">:</span> Prelude.foldr1<span class="op">:</span> empty list</span></code></pre></div>
</div>
<p>というエラーが出る。 ちなみに <code>vector</code> パッケージの <code>Data.Vector.foldr1</code> も同じような問題がある。 その場合のエラーメッセージはこんな感じ</p>
<div class="ui segment">
<div class="ui top right attached label">
shell
</div>
<pre class="shell SourceCode"><code>brick3D: ./Data/Vector/Fusion/Stream/Monadic.hs:929 (foldl1M): empty stream
CallStack (from HasCallStack):
  error, called at ./Data/Vector/Internal/Check.hs:87:5 in vector-0.12.3.0-DdzviVbdPFECkUuJzBxnHY:Data.Vector.Internal.Check
</code></pre>
</div>
]]></description>
    <pubDate>Thu, 06 Jan 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-01-06-haskell-trap-of-foldl1.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2022-01-04-android-retrofit2-api-declaration-should-not-start-with-slash</title>
    <link>https://cj-bc.github.io/blog/posts/2022-01-04-android-retrofit2-api-declaration-should-not-start-with-slash.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>Retrofit2のAPI定義はスラッシュで始めない</h1>
  <div class="ui list">
    <div class="item">Posted on January  4, 2022</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on January  4, 2022
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p><a href="https://square.github.io/retrofit/">retrofit</a>を使用してAPIを叩く際、</p>
<div class="ui segment">
<div class="ui top right attached label">
kotlin
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode kotlin SourceCode"><code class="sourceCode kotlin"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>   <span class="kw">import</span> <span class="im">retrofit2.Call</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>   <span class="kw">import</span> <span class="im">retrofit2.http.GET</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>   <span class="kw">public</span> <span class="kw">interface</span> MyApi {</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="at">@GET</span>(<span class="st">&quot;endpoint/example&quot;</span>)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="kw">public</span> abstract <span class="kw">fun</span> <span class="fu">exampleGet</span>(): <span class="dt">Call</span>&lt;<span class="dt">ExampleResponse</span>&gt;</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>// <span class="fu">ExampleResponse</span>はどこかで定義されているものとする</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>   }</span></code></pre></div>
</div>
<p>とかするわけなんですが、この <code>@GET</code> に与えるパスの先頭に <code>/</code> をつけてはいけない。 そうするとHTTP Status Code 404を吐かれてしまう。 代わりに、 <code>retrofit2.Retrofit.Builder()</code> の <code>baseUrl</code> に渡すURLの末尾に <code>/</code> をつける。</p>
<div class="ui segment">
<div class="ui top right attached label">
kotlin
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode kotlin SourceCode"><code class="sourceCode kotlin"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co">// ダメ</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="at">@GET</span>(<span class="st">&quot;/endpoint/example&quot;</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="kw">public</span> abstract <span class="kw">fun</span> <span class="fu">exampleGet</span>(): <span class="dt">Call</span>&lt;<span class="dt">ExampleResponse</span>&gt;</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>// <span class="fu">OK</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>@<span class="fu">GET</span>(&quot;<span class="va">endpoint</span>/<span class="va">example</span>&quot;)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="kw">public</span> <span class="fu">abstract</span> <span class="kw">fun</span> <span class="fu">exampleGet</span>(): <span class="dt">Call</span>&lt;<span class="dt">ExampleResponse</span>&gt;</span></code></pre></div>
</div>
<h1 id="おまけ: baseUrlにslashなし&amp;API宣言にslashありは動かない">おまけ: baseUrlにslashなし&amp;API宣言にslashありは動かない</h1>
<p>最終的に同じになりそうだから試してみたが、エラーが出て駄目でした。 baseUrlはslashで終わらないといけないらしい。</p>
<div class="line-block">java.lang.IllegalArgumentException: baseUrl must end in /: <a href="https://misskey.io/api">https://misskey.io/api</a></div>
]]></description>
    <pubDate>Tue, 04 Jan 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-01-04-android-retrofit2-api-declaration-should-not-start-with-slash.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-12-30-math-how-to-rasterize-line-with-begin-and-end-vertices-to-ascii-art</title>
    <link>https://cj-bc.github.io/blog/posts/2021-12-30-math-how-to-rasterize-line-with-begin-and-end-vertices-to-ascii-art.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>直線をAAにラスタライズする</h1>
  <div class="ui list">
    <div class="item">Posted on December 30, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on December 30, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p><a href="https://github.com/Cj-bc/brick-3d">Cj-bc/brick-3d</a> を作成している間、「二つの頂点を結ぶ直線をAAに落としこむ」作業が 必要になったのでメモ。 今回は二つの頂点は平面上にあるものとして扱いますが、他の次元でも同じだと思います。</p>
<div class="tldr">
<ul>
<li>二つの頂点を結ぶ直線の式は $ + t( - ) $ ( <span class="math inline"><em>t</em> ∈ [0..1]</span> )</li>
<li>tが0の時は <span class="math inline">$\vec{begin}$</span> 、1の時は <span class="math inline">$\vec{end}$</span> になる</li>
<li>tをよしなな感覚で0~1の間で取ってやり、それを一つめに示した式に入れる</li>
</ul>
</div>
<h1 id="前提知識">前提知識</h1>
<ul>
<li>ベクトルについてちょっと</li>
<li>媒介変数</li>
</ul>
<h1 id="ベクトルと媒介変数を用いた直線の式">ベクトルと媒介変数を用いた直線の式</h1>
<p>まず直線の式を考えます。二つの頂点は位置ベクトルとして捉えます。 この二点を <span class="math inline">$\vec{begin}$</span> と <span class="math inline">$\vec{end}$</span> とおくことにすると、 この2点間を結ぶベクトル <span class="math inline"><em>v⃗</em></span> の式は</p>
<p>となります。</p>
<p><img src="file:///images/vector-v-explained.png" class="ui rounded image" /></p>
<p>これはベクトルなので実数を掛けることができ、 0をかけると長さ0のベクトル、1を掛けるとそのままのベクトルが出来ます。</p>
<p>そこで、媒介変数 <span class="math inline"><em>t</em></span> を0から1の間の数を持たせてやると、 これは <span class="math inline"><em>v⃗</em></span> 上の点を表す式(=線分の式)になります。</p>
<p>このベクトルは位置ベクトルではないため空間上のどこに存在しても良い状態なので、 ベクトルの開始地点を <span class="math inline">$\vec{begin}$</span> に移してあげます。</p>
<p>これで直線の式になります。</p>
<h1 id="直線の式からその上にある頂点を計算する">直線の式からその上にある頂点を計算する</h1>
<p>媒介変数表示の式になっているので、後は <span class="math inline"><em>t</em></span> の値を少しずつ ずらしていってあげれば、線分上の頂点が得られます。</p>
<p>自分のプロジェクトではHaskellで書いていたのでそのまま書かせてもらうと:</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Vertex</span> <span class="ot">=</span> (<span class="dt">Flaot</span>, <span class="dt">Float</span>)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="co">-- | 先程の「媒介変数で表示した直線の式」</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Vertex</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="co">-- | 細分化したt。</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="co">-- Haskellでは, xからyまでの範囲の値のリスト [x..y]</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="co">-- をFloatで作れないため, 一度Int型で0~100までの値のリストを生成して</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a><span class="co">-- その全てを100で割っている</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a><span class="ot">ts ::</span> [<span class="dt">Float</span>]</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>ts <span class="ot">=</span> <span class="fu">fmap</span> (<span class="op">/</span> <span class="dv">100</span>) [<span class="dv">0</span><span class="op">..</span><span class="dv">100</span>]</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a><span class="co">-- | 直線上にある &#39;Vertex&#39; のリスト</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>vertices <span class="ot">=</span> <span class="fu">fmap</span> f ts</span></code></pre></div>
</div>
<p>という感じ(実際に使っているコードとは違う)</p>
<h1 id="おまけ: 実際に使っている部分">おまけ: 実際に使っている部分</h1>
]]></description>
    <pubDate>Thu, 30 Dec 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-12-30-math-how-to-rasterize-line-with-begin-and-end-vertices-to-ascii-art.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-12-21-qutebrwoser-extend-download-directory-suggestion</title>
    <link>https://cj-bc.github.io/blog/posts/2021-12-21-qutebrwoser-extend-download-directory-suggestion.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>Qutebrowserでのダウンロード先ディレクトリをrofiで選べるようにしてみた</h1>
  <div class="ui list">
    <div class="item">Posted on December 21, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on December 21, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Qutebrowserでは、ファイルをダウンロードする際に保存先を選ぶポップアップ？が出てくる。 しかし、これは前回使用したパスしかないし、タブキーでの補完もあまり上手く動かない(補完しようとすると 一つ上の階層を選択したりする)しで使い勝手があまりよくなかった。</p>
<p>私は、保存先がいくつかあってそれを使い分けるタイプなので、いっそのこと最初に表示する保存先の候補を リストから選択できるようにしよう、と思い立った。 Qutebrowserでも絞り込みとかはできるが、なんか挙動がいまいちに感じていたので、それならrofiを使ってやろう と思い立ったのがきっかけ。</p>
<h1 id="どう動くのか">どう動くのか</h1>
<p><a href="https://www.youtube.com/watch?v=XX9JRI-8QQw">ゆーちゅーぶってヤツにデモ動画を上げてみた</a>のでそちらを参照してほしい。 主には、今迄通りダウンロードをしようとするとrofiが(dmenuモードで)立ち上がり、 一つ選択したらそれが・選択されなかった場合は元のqutebrowserのアルゴリズムで選ばれたパスが ダウンロード先として表示される。</p>
<h1 id="技術的詳解">技術的詳解</h1>
<p>詳解ってほどでもないけど…</p>
<p>qutebrowserのブラウザに関連する処理は <code>qutebrowser/browser</code> に集められている。 その中でもダウンロードに関係するのは <code>qutebrowser/browser/downloads.py</code> である。 一目瞭然なので。 ここのうち、パスを割り出すのに使っている部分が <code>download_dir</code> なので ここに処理を挟み込んだ。</p>
<h2 id="Rofiを呼び出す際の注意点">Rofiを呼び出す際の注意点</h2>
<ul>
<li>標準入力に渡すファイルオブジェクトは <strong>必ず <code>seek(0)</code> すること</strong>
<ul>
<li>これを怠ると、読み込みのポインタがファイルの最後にあるので何も読めない</li>
</ul></li>
<li><code>tempfile.TemporaryFile</code> には <code>mode="w+"</code> オプション引数を付けてあげる
<ul>
<li>そうじゃないとバイナリを期待される。まぁどちらでも良いのかもだけどバイナリではないので。</li>
</ul></li>
<li><code>rofi -dmenu</code> の標準出力を <code>CompletedProcess.stdout</code> から取得すると、末尾に改行文字( <code>\n</code> )を含む
<ul>
<li>外してあげないと表示がうまくいかない。空白があるように見えた。</li>
</ul></li>
</ul>
<h2 id="Qutebrowserに新しい設定を組込む">Qutebrowserに新しい設定を組込む</h2>
<p>この実装では <code>downloads.location.favorite_paths</code> という新しい設定項目を 追加している。 これは、 <code>qutebrowser/config/configdata.yml</code> というYAMLファイルをいじるだけで良い (少なくともそれで動いている、公式の情報を元にしていないため何かしら足りない可能性はある)</p>
]]></description>
    <pubDate>Tue, 21 Dec 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-12-21-qutebrwoser-extend-download-directory-suggestion.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-12-02-blog-migrate-old-blog-posts</title>
    <link>https://cj-bc.github.io/blog/posts/2021-12-02-blog-migrate-old-blog-posts.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>古い形式のブログ記事を変換するおしごと</h1>
  <div class="ui list">
    <div class="item">Posted on December  2, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on December 30, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<h1 id="これまでの遷移">これまでの遷移</h1>
<table>
<tbody>
<tr class="odd">
<td>blog以前</td>
<td>Qiita flavored markdownでQiitaに投稿</td>
</tr>
<tr class="even">
<td>一番初めの時期(<a href="https://cj-bc.github.io/blog/posts/2020-08-02-helloHakylly.html">2020/08/02</a><code>[[https://cj-bc.github.io/blog/posts/2021-01-19-after-effect-markers.html][2021/01/19]]) | markdown+pandoc拡張(メタデータをyamlで管理) |
   | org移行期([[https://cj-bc.github.io/blog/posts/2021-01-31-org-file-test.html][2021/01/31]]</code> <a href="https://cj-bc.github.io/blog/posts/2021-05-19-emacs-org-roam-setup.html">2021-05-19</a></td>
<td>Org format(メタデータをyamlで管理</td>
</tr>
<tr class="odd">
<td>現在のフォーマット(<a href="https://cj-bc.github.io/blog/posts/2021-07-24-diary-allelosphere-vol1.html">2021/07/24</a>~)</td>
<td>Org format(メタデータをPropertyで管理)</td>
</tr>
</tbody>
</table>
<h1 id="なぜ移行するのか">なぜ移行するのか</h1>
<p>複数のフォーマットに対応したHakyllコードをかくのが そろそろ辛くなってきたからです。 特に、メタデータの取り扱い周りが厄介なのです。</p>
<p>Pandocでは、独自の構文としてメタデータを YAML フォーマットのヘッダーに保存することができます。 昔はこれを使っていたのですが、 Emacs+Org mode の構成で投稿を作成する際、それらをプロパティとして 扱えたら便利だなと感じるようになりました。</p>
<p>プロパティとして扱える利点としては、例えば現在の投稿にある <code>BLOG_POST_PROGRESS</code> を <code>org-agenda</code> から見ることによって、 作成中の投稿の一覧を容易に作成することができます。 これは、org modeの機能の一つであるプロパティを用いているからできること であって、pandocのYAML構文を用いようとしたらまた新しいプログラムを 書く必要がでてきます。それは面倒だし非効率なので、 今迄YAMLメタデータとして仕舞っていたデータも プロパティとして保存するように変更しました。</p>
<p>それに伴い、タイトルの取得の方法等も変わって昔の方法は使えなくなりました。 どちらにも対応することは不可能ではないでしょうが、 正直もう昔の方法を利用することは無いであろうこと・今後のメンテナンス性を 考えると非効率であることから、完全な移行をするに至りました。</p>
<h1 data-header-args=":results raw :noweb yes" id="移行スクリプト">移行スクリプト</h1>
<h2 id="技術選定">技術選定</h2>
<p>今回使っていくのは</p>
<ul>
<li><a href="https://pandoc.org/">pandoc</a></li>
<li><a href="https://www.nushell.sh/">nushell</a></li>
<li>awk</li>
<li>bash</li>
</ul>
<p>です</p>
<p>以下のコード内で、便宜上コードブロックの言語を <code>sh</code> にしていますが、 一部は実際はnushellのスクリプトです。 (Emacs上でOrg babelで実行する際は、 <code>:shbang #!/bin/nu</code> の効果で nushellのスクリプトとして実行されます。)</p>
<ol>
<li><p>pandoc</p>
<p>いわずと知れたフォーマット変換(等)ツール。 今回、markdown→org formatの変換を必要とするファイルもあるため必須です。 又、整形にも使います。</p></li>
<li><p>nushell</p>
<p>言わずと知れた‥というにはまだ早いので紹介します。 nushellは、色々な新しい面を持ちますが、今回の目的にそった紹介をする のであればデータ型を持つシェルです。 内部にリストやテーブル・日付型・サイズ型等色々な型を持つほか、 CVSやINI, TOML, ICS, XML, そして今回の本命YAML等のデータを 取り込むんことができます。</p>
<p>今回はこのYAMLを取り込めるという機能を目的に採用しました。 YAML形式で保存されているメタデータの取り出しから、それを新しいHeadingに 整形する部分までかnushellの役割です。</p>
<ol>
<li><p>経緯</p>
<p>とりあえずpandocを使うことは決定していましたが、 実はpandoc単体(フィルターなし)では「その内容を参照して あれこれする」ことができません。 というか、そういうニーズを満たすためのものがフィルターなんですが…</p>
<p>でもフィルター書くのはちょっと面倒なんだよね… 今はYAML形式のメタデータの情報を使いたいだけなので、 テキスト処理ならawkなりsedなりあるし わざわざフィルター書く程のものでもないように感じます。</p>
<p>なので、手軽にYAMLを使えるnushellを使ってみることにしました。</p></li>
</ol></li>
<li><p>awk</p>
<p>文字列処理ならsedかawkでしょ、ということで使用。 今回は、記事からYAML形式のメタデータ部分を取得するために使用します。</p></li>
<li><p>bash</p>
<p>nushellで全てを書こうとしたのですが、いかんせん新しいプロジェクトなので 未だ使い勝手が整ってなかったり出来無いことがあったりします。</p>
<p>私がnushellに慣れていない、というのもありますが、 テキストを読み込んだ時に謎にTableにされてしまい、それを頑張ってテキストに戻して… みたいなことをやるのに疲れてしまいました。 ということで、nushellの得意な部分はnushellに任せて、他の処理は手慣れたbashで 行おうということになりました。</p></li>
</ol>
<h2 id="1. YAML部分を取り出す">1. YAML部分を取り出す</h2>
<p>ここは単純なテキスト処理なのでawkを使います。(もっと良い方法があれば教えてください)</p>
<p>メタデータは <code>---</code> と <code>---</code> で囲まれているので、 「 <code>---</code> の次の行から次に <code>---</code> がくるまで」を出力します。</p>
<div class="ui segment">
<div class="ui top right attached label">
awk
</div>
<div class="sourceCode" id="extract-yaml-metadata" data-in-file="./2021-01-03-fomantic-ui.md" data-results="raw" wrap="SRC yaml"><pre class="sourceCode awk SourceCode"><code class="sourceCode awk"><span id="extract-yaml-metadata-1"><a href="#extract-yaml-metadata-1" aria-hidden="true"></a>   <span class="cf">BEGIN</span> { inside<span class="op">=</span><span class="dv">0</span>; }</span>
<span id="extract-yaml-metadata-2"><a href="#extract-yaml-metadata-2" aria-hidden="true"></a>   <span class="ot">/</span><span class="ss">---</span><span class="ot">/</span> {<span class="cf">if</span> (inside <span class="op">==</span> <span class="dv">0</span>) { inside<span class="op">=</span><span class="dv">1</span>; }</span>
<span id="extract-yaml-metadata-3"><a href="#extract-yaml-metadata-3" aria-hidden="true"></a><span class="cf">else</span> { inside<span class="op">=</span><span class="dv">0</span>; };</span>
<span id="extract-yaml-metadata-4"><a href="#extract-yaml-metadata-4" aria-hidden="true"></a><span class="kw">next</span>;</span>
<span id="extract-yaml-metadata-5"><a href="#extract-yaml-metadata-5" aria-hidden="true"></a>   }</span>
<span id="extract-yaml-metadata-6"><a href="#extract-yaml-metadata-6" aria-hidden="true"></a>   { <span class="cf">if</span> (inside <span class="op">==</span> <span class="dv">1</span>) { <span class="kw">print</span> <span class="dt">$0</span>; }; }</span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
yaml
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml SourceCode"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="fu">title</span><span class="kw">:</span><span class="at"> ブログの見た目を整える</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="fu">author</span><span class="kw">:</span><span class="at"> Cj-bc</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="fu">tags</span><span class="kw">:</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="at">  </span><span class="kw">-</span><span class="at"> hakyll</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="at">  </span><span class="kw">-</span><span class="at"> ブログ</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="at">  </span><span class="kw">-</span><span class="at"> haskell</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="fu">date</span><span class="kw">:</span><span class="at"> Jan 03, 2021</span></span></code></pre></div>
</div>
<h2 id="2. Yaml部分からメタデータを取得する">2. Yaml部分からメタデータを取得する</h2>
<p>先程のawkスクリプトを適用してあげて…</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="bu">let</span> target = (if (<span class="va">$nu</span>.env <span class="kw">|</span> <span class="kw">select</span> <span class="ex">TARGET</span> <span class="kw">|</span> <span class="ex">empty?</span>) <span class="dt">{&quot;&quot;}</span> <span class="dt">{</span><span class="va">$nu</span><span class="dt">.env.TARGET}</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">if</span> <span class="kw">(</span><span class="va">$target</span> <span class="kw">|</span> <span class="ex">empty?</span><span class="kw">)</span> <span class="kw">{</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>^<span class="ex">echo</span> <span class="st">&quot;usage: TARGET=&lt;TARGET_FILENAME&gt; blog-migration-script--createHeader.nu&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="bu">exit</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="kw">}</span> {}</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="bu">let</span> metadata = (awk <span class="st">&#39;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="st">&lt;&lt;extract-yaml-metadata&gt;&gt;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="st">&#39;</span> <span class="va">$target</span> <span class="kw">|</span> <span class="ex">from</span> yaml)</span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb3" data-org-language="sh" data-tangle="no" data-shebang="#!/bin/nu"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&lt;&lt;migration-script&gt;&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>echo <span class="va">$metadata</span></span></code></pre></div>
</div>
<p>─────────────────────────────────────────────────────────────────────── 0 ブログの見た目を整える Cj-bc [table 3 rows] Jan 03, 2021</p>
<h2 id="3. メタデータを加工して新しいヘッダーを作成する">3. メタデータを加工して新しいヘッダーを作成する</h2>
<p>さて、これで投稿のタイトルと諸々のデータは取れるようになりました。 あとはこれを加工して、新しいヘッダーを作成します。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb4" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>   <span class="op">&lt;&lt;nu-getAuthor&gt;&gt;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>   &lt;&lt;nu-formatTags<span class="op">&gt;&gt;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>   &lt;&lt;nu-formatDate<span class="op">&gt;&gt;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>   echo $&quot;* (<span class="va">$metadata</span>.title)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>:PROPERTIES:</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>:DATE: (formatDate <span class="va">$metadata</span>)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>:TAGS: (<span class="va">$metadata</span>.tags | reduce -f &#39;:&#39; { <span class="va">$acc</span> + <span class="va">$it</span> + &#39;:&#39; })</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>:AUTHOR: (getAuthor <span class="va">$metadata</span>)</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>:BLOG_POST_KIND: Memo</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>:BLOG_POST_PROGRESS: Published</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>:BLOG_POST_STATUS: Normal</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>:END:</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>   &quot;</span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb5" data-org-language="sh" data-tangle="no"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="op">&lt;&lt;migration-script&gt;&gt;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>echo <span class="va">$newHeading</span></span></code></pre></div>
</div>
<ul>
<li>ブログの見た目を整える</li>
</ul>
<ol>
<li><p>タグをOrg形式に変換する</p>
<p>org形式のタグはタグ名を <code>:</code> で囲んだものになります。 タグ名はメタデータ内にリストとして持っているので、nushellの <code>reduce</code> コマンドで整形します。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb6" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>   <span class="ex">def</span> formatTags [tags: table] {</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="va">$tags</span> <span class="kw">|</span> <span class="ex">reduce</span> -f <span class="st">&#39;:&#39;</span> { <span class="va">$acc</span> + <span class="va">$it</span> + <span class="st">&#39;:&#39;</span> }</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>   }</span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb7" data-org-language="sh" data-tangle="no"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="op">&lt;&lt;nu-formatTags&gt;&gt;</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>formatTags <span class="va">$metadata</span>.tags</span></code></pre></div>
</div>
<p>:hakyll:ブログ:haskell:</p></li>
<li><p>記事の日付を変換する</p>
<p>昔のフォーマットでは <code>月 日, 年</code> となっているので、これを org形式の <code>[年-月-日 曜日]</code> に変換します。</p>
<p>最初は nushell の <code>parse</code> コマンドでパースしてうんたら…って 考えていたけれど、曜日を出す方法や月番号周りの変換に悩んでいました。 で、その間に GNU coreutils の <code>date</code> コマンド(nushellは組込みで <code>date</code> コマンド持っているが、そっちではない)が全ての仕事を出来そうだとわかったので こちらでやることにしました。</p>
<p>GNU coreutilsの <code>date</code> コマンドはデフォルトでは現在時刻を吐きますが、 <code>--date</code> オプションに文字列を渡してあげることで別の日付にすることが可能です。 このオプションに元の文字列をセットして、それをorg形式にフォーマットしなおします。</p>
<p>nushellでは、前述の通りそれ自体が提供している <code>date</code> コマンドが存在し、 GNU coreutilsの <code>date</code> コマンドはそのままでは使用することができません。 そのため、<a href="https://www.nushell.sh/book/escaping.html">nushell bookの"Escaping to the System"</a>を参考にコマンド名の前に <code>^</code> を付けることでnushell独自のコマンドを呼び出さず、GNU coreutilsの <code>date</code> コマンドを呼びだします。</p>
<p>尚、GNU coreutilsの <code>date</code> コマンドは環境変数 <code>LANG</code> に応じて曜日名の 出力などを変化させます。ここでは英語表記になってほしいので <code>LANG=C</code> にしています。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb8" data-org-language="sh" data-tangle="no" data-noweb-ref="nu-formatDate"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>   <span class="ex">def</span> formatDate [metadata] {</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="va">LANG=</span>C ^<span class="ex">date</span> --date <span class="st">$&quot;(</span><span class="va">$metadata</span><span class="st">.date)&quot;</span> +[%Y-%m-%d %a] <span class="kw">|</span> <span class="fu">tr</span> -d <span class="st">&#39;\n&#39;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>   }</span></code></pre></div>
</div>
<p>"[2021-01-03 Sun]"</p></li>
<li><p>デフォルトの筆者を設定する</p>
<p>いくつかの記事はAUTHORが記載されていないので、 その場合はデフォルト値を使うようにしてあげます。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb9" data-org-language="sh" data-tangle="no" data-noweb-ref="nu-getAuthor"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>    <span class="ex">def</span> getAuthor [metadata] {</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>    <span class="kw">if</span> <span class="kw">(</span><span class="va">$metadata</span> <span class="kw">|</span> <span class="kw">select</span> <span class="ex">author</span> <span class="kw">|</span> <span class="ex">empty?</span><span class="kw">)</span> <span class="kw">{</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a><span class="st">&quot;Cj-bc&quot;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>    <span class="kw">}</span> <span class="kw">{</span> <span class="va">$metadata</span><span class="ex">.author</span> <span class="kw">}</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>    }</span></code></pre></div>
</div></li>
</ol>
<h2 id="4. 元の記事を一段階下げる">4. 元の記事を一段階下げる</h2>
<p>さて、今迄作ってきたheadingを、元の記事と組合せる前段階をします。 トップレベル(level1)のheadingは一つだけであってほしいので、 元の記事のレベルを一段階下げます。これはpandocを用いて行うことができます。</p>
<p>但し、その前にYAMLヘッダーを取り除いてあげます。</p>
<div class="ui segment">
<div class="ui top right attached label">
awk
</div>
<div class="sourceCode" id="cb10" data-in-file="./2021-05-14-haskell-make-Ixed-instance.org" wrap="src org" data-noweb-ref="awk-trim-yaml-header"><pre class="sourceCode awk SourceCode"><code class="sourceCode awk"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>     <span class="cf">BEGIN</span> { inside<span class="op">=</span><span class="dv">0</span>; }</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>     <span class="ot">/</span><span class="ss">---</span><span class="ot">/</span> {<span class="cf">if</span> (inside <span class="op">==</span> <span class="dv">0</span>) { inside<span class="op">=</span><span class="dv">1</span>; }</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="cf">else</span> { inside<span class="op">=</span><span class="dv">2</span>; };</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="kw">next</span>;</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>     }</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>     { <span class="cf">if</span> (inside <span class="op">==</span> <span class="dv">2</span>) { <span class="kw">print</span> <span class="dt">$0</span>; }; }</span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
org
</div>
<pre class="org SourceCode"><code>
     * ~Ixed~ とは

     数学的解説はわかりませんごめんなさい。誰か補足があれば [[https://github.com/Cj-bc/blog][blogのレポジトリ]] にissueでも残してください()
     Haskellなのでとりあえず hoogleを参照します。
     ~Ixed~ の定義は以下の通りです

     #+begin_src haskell
class Ixed m where
  -- |
  -- /NB:/ Setting the value of this &#39;Traversal&#39; will only set the value in
  -- &#39;at&#39; if it is already present.
  --
  -- If you want to be able to insert /missing/ values, you want &#39;at&#39;.
  --
  -- &gt;&gt;&gt; Seq.fromList [a,b,c,d] &amp; ix 2 %~ f
  -- fromList [a,b,f c,d]
  --
  -- &gt;&gt;&gt; Seq.fromList [a,b,c,d] &amp; ix 2 .~ e
  -- fromList [a,b,e,d]
  --
  -- &gt;&gt;&gt; Seq.fromList [a,b,c,d] ^? ix 2
  -- Just c
  --
  -- &gt;&gt;&gt; Seq.fromList [] ^? ix 2
  -- Nothing
  ix :: Index m -&gt; Traversal&#39; m (IxValue m)
  default ix :: At m =&gt; Index m -&gt; Traversal&#39; m (IxValue m)
  ix = ixAt
  {-# INLINE ix #-}
     #+end_src

     ~Ixed~ は =Lens= の提供する型の一つで、 ~Map~ のような型の値に対して
     値を ~traverse~ するシンプルな ~Traversal~ を提供するものです。

     簡潔に言うと、
     *リスト等の要素にLensでアクセスできるようにするやつ*
     みたいなざっくりとした理解をしています。


     また、これに関連するオープンな型ファミリーとして ~Index~ と ~IxValue~ があります

     #+begin_src haskell
type family Index (s :: *) :: *

-- | This provides a common notion of a value at an index that is shared by both &#39;Ixed&#39; and &#39;At&#39;.
type family IxValue (m :: *) :: *
     #+end_src

     ~Ixed~ において、 ~Index~ はインデックスの型、 ~IxValue~ はそこに格納されている
     値の型です。

     * 作る

     とりあえず作り始めます。

     前提として、今回~Ixed~のインスタンスを作るのは以下の型です。
     元のファイルは [[https://github.com/Cj-bc/playground/blob/0fb982f28f7ab0444ffd2ad59eacc3cd904b99ba/haskell/hit-n-blow/src/HitNBlow/Type.hs#L15-20][Cj-bc/playground -- hit-n-blow]] で使われているものです。

     #+begin_src haskell
-- | Represents each Pin
data Pin = Red | Blue | Green | White | Purple deriving (Show)

-- | One Set of Pins that user will guess 
data Lane = Lane (Maybe Pin) (Maybe Pin) (Maybe Pin) (Maybe Pin) (Maybe Pin)
    deriving (Show)
     #+end_src



     ~Ixed~ の定義に特に制限がかかれていないので、 ~ix~ を定義することにします。
     そのために、 ~ix~ で使用される ~Index~ と ~IxValue~ を定義することにします。

     ** Index
 ~Index~ はあまり説明がありませんが、型の情報からすると恐らく「添字に使う型」
 の定義であろうと推測が出来ます。
 (名前が ~Index~ であること、 ~ix~ において最初に取ること等。又、
 既にあるインスタンスを確認するのも良い方法だと思います。)

 ~Lane~ において添字は ~Int~ です。

 #+begin_src haskell
   type instance Index Lane = Int
 #+end_src

     ** IxValue
 同様ですが、今度はそれぞれの中身の型を定義します。

 #+begin_src haskell
   type instance IxValue Lane = Maybe Pin
 #+end_src

     ** Ixed
 ~Ixed~ 本体に行きます!!

 ~ix~ の型は

 #+begin_src haskell
   ix :: Index m -&gt; Traversal&#39; m (IxValue m)
 #+end_src

 で、今回は ~m~ が ~Lane~ なので具体的な型にすると

 #+begin_src haskell
   ix :: Int -&gt; Traversal&#39; Lane (Maybe Pin)
 #+end_src

 ということになります。

 で、 ~Lens~ 少ししか分からんので一つ疑問が浮かびます

 *&gt;&gt;&gt;&gt;&gt; ~Traversal&#39;~ ってナニよ!!!!! &lt;&lt;&lt;&lt;&lt;*

     ** Traversal&#39; ってナニよ!

 はい。名前は知ってるけど使い方良く分からずに放置してた子ですね。
 定義によると

 #+begin_src haskell
   type Traversal&#39; s a = Traversal s s a a

   type Traversal s t a b = forall f. Applicative f =&gt; (a -&gt; f b) -&gt; s -&gt; f t
 #+end_src

 ついでなので [[https://hackage.haskell.org/package/lens-5.0.1/docs/Control-Lens-Type.html#t:Traversal][~Traversal~]] の定義も載せておきました。
 ~Lens~ と同じように、実体はただの関数ですね。

 ~Lens~ よりも制限の緩い型で ~Traversable~ の型関数である ~traverse~ の一般化らしいです。
 しっかりと理解はしていないが、まぁ型を考えれば作れてしまうのでとりあえずは
 ふんわりと掴んだ状態で作ってみます。

 あ、ちなみに ~Traversal&#39;~ は単純に、値の更新等した時に型が変化しないものですね。

 参考:

 - [[https://fumieval.hatenablog.com/entry/2015/07/14/223329][lensパッケージのオプティクス(弱い順) -- モナドとわたしとコモナド]]

     ** ~ix~ を作る
 さて、 ~Traversal&#39;~ がわかったので ~ix~ を作れ(る気がし)ます。
 ~Traversal&#39;~ を置き換えてみると:

 #+begin_src haskell
   ix :: Int -&gt; Traversa&#39; Lane (Maybe Pin)
   ix :: Int -&gt; Traversal Lane Lane (Maybe Pin) (Maybe Pin)
   ix :: Int -&gt; (forall f. Applicative f =&gt; (Maybe Pin -&gt; f (Maybe Pin) -&gt; Lane -&gt; f Lane
 #+end_src

 となります(forallの位置は少し自信がないけど多分あってる)

 ~Int~ は元々 ~Index m~ だった部分なので、今興味のあるインデックス(に該当する数字)が来るのがわかります。

 又、元の ~Traversal&#39;~ の部分も要は「中身( ~Maybe Pin~ )に作用する関数を受け取り、作用させた
 結果を返す」わけなので、その通りに実装します。

 #+begin_src haskell
   instance Ixed Lane where
     ix 1 = \g l@(Lane a b c d e) -&gt; Lane &lt;$&gt; g a &lt;*&gt; b &lt;*&gt; c &lt;*&gt; d &lt;*&gt; e
     ix 2 = \g l@(Lane a b c d e) -&gt; Lane a &lt;$&gt; g b &lt;*&gt; c &lt;*&gt; d &lt;*&gt; e
     ix 3 = \g l@(Lane a b c d e) -&gt; Lane a b &lt;$&gt; g c &lt;*&gt; d &lt;*&gt; e
     ix 4 = \g l@(Lane a b c d e) -&gt; Lane a b c &lt;$&gt; g d &lt;*&gt; e
     ix 5 = \g l@(Lane a b c d e) -&gt; Lane a b c d &lt;$&gt; g e
     ix _ = \_ l -&gt; pure l
 #+end_src

 多分動いた!!
</code></pre>
</div>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="pandocを用いたheadingレベル下げの例" data-org-language="sh" data-shbang="#!/bin/bash" data-tangle="no"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="pandocを用いたheadingレベル下げの例-1"><a href="#pandocを用いたheadingレベル下げの例-1" aria-hidden="true"></a>     <span class="ex">pandoc</span> -f org --shift-heading-level-by=1 -t org <span class="op">&lt;(</span><span class="bu">echo</span> <span class="st">&quot;</span></span>
<span id="pandocを用いたheadingレベル下げの例-2"><a href="#pandocを用いたheadingレベル下げの例-2" aria-hidden="true"></a><span class="st">     * Leve1 header example</span></span>
<span id="pandocを用いたheadingレベル下げの例-3"><a href="#pandocを用いたheadingレベル下げの例-3" aria-hidden="true"></a><span class="st">hello!</span></span>
<span id="pandocを用いたheadingレベル下げの例-4"><a href="#pandocを用いたheadingレベル下げの例-4" aria-hidden="true"></a></span>
<span id="pandocを用いたheadingレベル下げの例-5"><a href="#pandocを用いたheadingレベル下げの例-5" aria-hidden="true"></a><span class="st">     ** Inner level2 header</span></span>
<span id="pandocを用いたheadingレベル下げの例-6"><a href="#pandocを用いたheadingレベル下げの例-6" aria-hidden="true"></a><span class="st">     &quot;</span><span class="op">)</span></span>
<span id="pandocを用いたheadingレベル下げの例-7"><a href="#pandocを用いたheadingレベル下げの例-7" aria-hidden="true"></a></span></code></pre></div>
</div>
<p>** Leve1 header example</p>
<p>hello!</p>
<p><strong>*</strong> Inner level2 header</p>
<h2 id="5. 3.と4.を組み合わせる">5. 3.と4.を組み合わせる</h2>
<p>ここからはbashを使います。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb12" data-org-language="sh" data-shebang="#!/bin/bash"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>   [[ <span class="ex">-z</span> <span class="va">$1</span> ]] <span class="kw">&amp;&amp;</span> <span class="kw">{</span> <span class="bu">echo</span> <span class="st">&quot;usage: migration-script.sh TARGETFILE&quot;</span><span class="kw">;</span> <span class="bu">exit</span><span class="kw">;</span> <span class="kw">}</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>   <span class="va">target=$1</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a>   <span class="va">extensions=(</span>emoji task_lists</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a> <span class="ex">backtick_code_blocks</span> fenced_code_attributes</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a> <span class="ex">header_attributes</span> raw_html</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true"></a>)</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true"></a>   <span class="kw">function</span><span class="fu"> formatExtension()</span> <span class="kw">{</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true"></a><span class="bu">echo</span> <span class="st">&quot;+</span><span class="va">${extensions[@]}</span><span class="st">&quot;</span> <span class="kw">|</span> <span class="fu">tr</span> <span class="st">&#39; &#39;</span> <span class="st">&#39;+&#39;</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true"></a>   <span class="kw">}</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true"></a></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true"></a>   <span class="va">format=$(filename=($(</span><span class="bu">echo</span> <span class="va">$target</span> <span class="kw">|</span> <span class="fu">tr</span> -s <span class="st">&#39;.&#39;</span> <span class="st">&#39; &#39;</span><span class="va">))</span>;</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true"></a>     <span class="kw">case</span> <span class="st">&quot;</span><span class="va">${filename[-1]}</span><span class="st">&quot;</span><span class="kw"> in</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true"></a>  <span class="st">&quot;md&quot;</span><span class="kw">)</span> <span class="bu">echo</span> <span class="st">&quot;markdown</span><span class="va">$(</span><span class="ex">formatExtension</span><span class="va">)</span><span class="st">&quot;</span><span class="kw">;;</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true"></a>  <span class="ex">*</span>) <span class="bu">echo</span> <span class="st">&quot;org&quot;</span><span class="kw">;;</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true"></a>     <span class="kw">esac</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true"></a>  <span class="va">)</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true"></a></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true"></a>   <span class="fu">cat</span> <span class="op">&lt;(</span><span class="va">TARGET=$target</span> <span class="ex">./blog-migration-script--createHeader.nu</span><span class="op">)</span> <span class="op">&lt;(</span><span class="fu">awk</span> <span class="st">&#39;</span></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true"></a><span class="st">   &lt;&lt;awk-trim-yaml-header&gt;&gt;</span></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true"></a><span class="st">   &#39;</span> <span class="va">$target</span> <span class="kw">|</span> <span class="ex">pandoc</span> -f <span class="st">&quot;</span><span class="va">${format}</span><span class="st">&quot;</span> --shift-heading-level-by=1 -t org<span class="op">)</span></span></code></pre></div>
</div>
<p>usage: migration-script.sh TARGETFILE</p>
<ol>
<li><p>ここでnushellを使わなかった理由</p>
<p>nushellの <code>echo</code> はListで出力してくるので、 GNU coreutilsの <code>echo</code> を使います。 又、 <code>^echo $newHeading (pandoc...)</code> だと <code>$newHeading</code> と <code>(pandoc...)</code> の間に改行が作成されず、 <code>$newHeading</code> の後ろに空行を追加して おいてもなんか消されてしまうので以下のような方法を取っています。</p></li>
</ol>
<h2 id="7. 全ファイルに対して実行する">7. 全ファイルに対して実行する</h2>
<p>あとはこれを全てのファイルに対して実行してあげれば良いわけです! <em>これまでの遷移</em>から、 2021/05/19以前の投稿が古いフォーマットを使用している ことがわかるので、それ以前のファイルのみを探し出します。</p>
<p>この取得はちょっと面倒で、昔のファイルでも最近変更していたりするので <code>find</code> コマンドが使えません( <code>-newer</code> 系を使いたいが、一定の日付より前のみに 変更しているという根拠はない)。 しかし、私のブログは(ありがたいことに)ファイル名が日付で始まっているので、それをglob展開して取得することにします。</p>
<p>そしてその各ファイルに先程のスクリプトを適用してあげて、変形します。</p>
<ol>
<li><p>まずはGit管理されているファイルに実行する</p>
<p>ただ、念の為にまずはGitにコミットされているファイルのみを対象にします。コミットさえされていれば失敗しても大丈夫なので… Gitに認識されていないファイルは <code class="sourceCode bash" data-org-language="sh"><span class="fu">git</span> status --short FILENAME</code> が <code>?? &lt;ファイル名&gt;</code> となるので、それを使って 判定します。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb13" data-org-language="sh" wrap="accordion"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>   <span class="kw">function</span><span class="fu"> filter</span> <span class="kw">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a><span class="bu">local</span> <span class="va">filterFunction=$1</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a><span class="kw">while</span> <span class="bu">read</span> <span class="va">candidate</span>; <span class="kw">do</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>    <span class="va">$filterFunction</span> <span class="st">&quot;</span><span class="va">$candidate</span><span class="st">&quot;</span> <span class="kw">\</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>      <span class="kw">&amp;&amp;</span> <span class="bu">echo</span> <span class="st">&quot;</span><span class="va">$candidate</span><span class="st">&quot;</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a><span class="kw">done</span> <span class="op">&lt;</span> <span class="op">&lt;(</span><span class="fu">cat</span> /dev/stdin<span class="op">)</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>   <span class="kw">}</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true"></a></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true"></a>   <span class="kw">function</span><span class="fu"> map</span> <span class="kw">{</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true"></a><span class="bu">local</span> <span class="va">f=$1</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true"></a><span class="kw">while</span> <span class="bu">read</span> <span class="va">target</span>; <span class="kw">do</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true"></a>    <span class="va">$f</span> <span class="st">&quot;</span><span class="va">$target</span><span class="st">&quot;</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true"></a><span class="kw">done</span> <span class="op">&lt;</span> <span class="op">&lt;(</span><span class="fu">cat</span> /dev/stdin<span class="op">)</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true"></a>   <span class="kw">}</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true"></a></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true"></a>   <span class="kw">function</span><span class="fu"> filterGitKnownFile</span> <span class="kw">{</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true"></a><span class="bu">local</span> <span class="va">filename=$1</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true"></a></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true"></a><span class="bu">local</span> <span class="va">gitStatusResult=</span><span class="st">&quot;</span><span class="va">$(</span><span class="fu">git</span> status --short <span class="va">$filename)</span><span class="st">&quot;</span> </span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true"></a><span class="kw">[[</span> <span class="ot">!</span> <span class="st">&quot;</span><span class="va">$gitStatusResult</span><span class="st">&quot;</span><span class="kw"> ]]</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true"></a>   <span class="kw">}</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true"></a></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true"></a>   <span class="kw">function</span><span class="fu"> convertFile</span> <span class="kw">{</span></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true"></a><span class="bu">local</span> <span class="va">target=$1</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true"></a><span class="ex">./migration-script.sh</span> <span class="va">$target</span> <span class="op">&gt;</span> <span class="va">${target}</span>.new</span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true"></a><span class="fu">mv</span> <span class="va">${target}</span>.new <span class="va">$target</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true"></a>   <span class="kw">}</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true"></a></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true"></a>   <span class="kw">set</span> <span class="ex">-e</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true"></a>   <span class="fu">ls</span> 2020-* 2021-0<span class="dt">{1,2,3,4}</span>* <span class="kw">|</span> <span class="fu">grep</span> <span class="st">&quot;\(md\|org\)$&quot;</span> <span class="kw">|</span> <span class="ex">filter</span> <span class="st">&quot;filterGitKnownFile&quot;</span>  <span class="kw">|</span> <span class="ex">map</span> convertFile</span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true"></a>   <span class="ex">convertFile</span> 2021-05-04-xmonad-use-stack-for-compile.org</span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true"></a>   <span class="ex">convertFile</span> 2021-05-10-xmonad-list-of-layouts.org </span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true"></a></span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true"></a>   <span class="bu">echo</span> <span class="st">&quot;Finished!&quot;</span></span></code></pre></div>
</div>
<div class="accordion">
<p>Finished!</p>
</div></li>
</ol>
]]></description>
    <pubDate>Thu, 02 Dec 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-12-02-blog-migrate-old-blog-posts.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-11-27-qutebrowser-you-should-set-locale-properly-to-upload-files</title>
    <link>https://cj-bc.github.io/blog/posts/2021-11-27-qutebrowser-you-should-set-locale-properly-to-upload-files.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>qutebrowserでファイルのアップロードができないのはLANGのせいかもしれない</h1>
  <div class="ui list">
    <div class="item">Posted on November 27, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on December 21, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Qutebrowserでファイルアップロードする時、パスにUTF-8文字列が入っている場合 <code>LANG</code> が <code>ja_JP.UTF-8</code> じゃないと上手くアップロードできないことがあった。 少なくともGoogle Driveで確認済。</p>
<p>なのできちんと <code>LANG</code> 設定しましょうね。</p>
]]></description>
    <pubDate>Sat, 27 Nov 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-11-27-qutebrowser-you-should-set-locale-properly-to-upload-files.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-11-22-blog-import-all-qiita-posts-to-my-blog</title>
    <link>https://cj-bc.github.io/blog/posts/2021-11-22-blog-import-all-qiita-posts-to-my-blog.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>Qiitaの記事を全部引っ越ししている [WIP]</h1>
  <div class="ui list">
    <div class="item">Posted on November 22, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November 29, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>長らくの間私は <a href="https://qiita.com/Cj-bc">Qiita</a>に記事を書いていましたが、今や自分のページを持つに 至りました。</p>
<p>依然技術系の記事は別に出しても良いのですが、とりあえず このブログには全ての記事を載せておきたかったのでQiitaの記事を引っ越して こようと思います。</p>
<h1 id="行いたいこと">行いたいこと</h1>
<ul>
<li>Qiitaにある全ての記事を、ほぼそのまま持ってくる
<ul>
<li>メタ情報(投稿日時やタグなど)はできるだけ保持する</li>
<li>(管理上の都合で)org文書にコンバートする</li>
</ul></li>
<li>画像データもローカルに保存しなおす</li>
</ul>
<h1 id="注意すること">注意すること</h1>
<ul>
<li>URIエンコードされているものはデコードする</li>
</ul>
<h1 id="使うもの">使うもの</h1>
<dl>
<dt><a href="https://qiita.com/api/v2/docs">Qiita API v2</a></dt>
<dd>あたり前だがQiitaのAPI。「特定のユーザーの公開記事」なら認証なしで引っ張ってこれる
</dd>
<dt><a href="https://www.nushell.sh/">nushell</a></dt>
<dd>Rust製の、データの扱いに長けたシェル。JSONを素で扱えて楽なので使用する。
</dd>
<dt>node.js</dt>
<dd>いわずもがな。Qiita APIが、コンテンツをURIエンコードして返してくるのでデコードするのに使う
</dd>
</dl>
<h1 id="作業">作業</h1>
<h2 id="TODO 1. Qiitaから情報を取得する"><span class="todo TODO">TODO</span> 1. Qiitaから情報を取得する</h2>
<p>まずはQiitaから情報を引っ張ってきます。 これは <code>/users/:user_id/items</code> エンドポイントを使用します。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">curl</span> https://qiita.com/api/v2/users/Cj-bc/items</span></code></pre></div>
</div>
<p>これで、指定したユーザーの投稿のリストが取得できます。 各投稿はディクショナリで、そのキーの完全なリストは<a href="https://qiita.com/api/v2/docs#投稿">Qiita APIドキュメントの「投稿」</a>に記載されています。</p>
<p>ここでは、今回使うものとして以下のキーを紹介します:</p>
<dl>
<dt><code>body</code></dt>
<dd><strong>Markdown形式で</strong> 表現された本文を保持します。 これは <strong>URLエンコードされています</strong> 。
</dd>
<dt><code>created_at</code></dt>
<dd>この投稿が作成された日時です。ISO8601形式で秒数まで記載されています。
</dd>
<dt><code>title</code></dt>
<dd>その投稿のタイトルです。
</dd>
</dl>
<p>これらのキーの値を用いて:</p>
<ol>
<li>APIからデータを取得</li>
<li><em>本文を <code>body</code> から取得</em></li>
<li><code>created_at</code> と <code>title</code> からファイル名を構築する</li>
<li>そのファイルに本文を保存する</li>
</ol>
<p>という処理がしたい。 これを何を用いてやるか…という話なのですが、ここで「JSONデータを扱いやすい」という理由でnushellが出てきます。</p>
<p>最初はjqとか使おうとしてたけど、</p>
<ul>
<li>そもそもjqはあまり知らない</li>
<li>ファイル名を構築してそこへのリダイレクトが出来なさそう(少なくとも知らない)</li>
<li>文字列に他の処理をかけたい場合がある</li>
</ul>
<p>というのでjqではなくnushellにしました。</p>
<ol>
<li><p>1. APIからデータを取得</p>
<p>nushellでは、ビルトインの <code>fetch</code> コマンドで HTTPの <code>GET</code> リクエストを送信できます。</p>
<div class="ui segment">
<div class="ui top right attached label">
nu
</div>
<pre class="nu SourceCode"><code>fetch https://qiita.com/api/v2/users/Cj-bc/items
</code></pre>
</div>
<p>こうすると、JSONをnushellのtableに変換して返してくれます。</p></li>
<li><p>2. 本文を <code>body</code> から取得</p>
<p>このAPIは、「投稿のリスト」を返してくるので、それぞれに対してbodyを取得してあげる。</p>
<dl>
<dt><code>each</code></dt>
<dd>標準入力にリストを取り、その各要素に対してコードブロックを適用します
</dd>
<dt><code>{}</code></dt>
<dd>コードブロックです。この中の <code>$it</code> は、このコードブロックに渡されるパラメーターを示します。
</dd>
<dt><code>{|x| }</code></dt>
<dd>コードブロックは名前付きでも定義することができます。この場合、 <code>$it</code> の変わりに <code>$x</code> を同じ意味で使用できます。(ついでの解説)
</dd>
</dl>
<div class="ui segment">
<div class="ui top right attached label">
nu
</div>
<pre class="nu SourceCode"><code>fetch https://qiita.com/api/v2/users/Cj-bc/items | each {$it.body}
</code></pre>
</div></li>
<li><p><span class="todo TODO">TODO</span> 3. <code>created_at</code> と <code>title</code> からファイル名を構築する</p>
<p>現在、ブログ記事のファイル名は <code>&lt;日付&gt;-&lt;タイトル&gt;</code> のケバブケースになっている。 なのでこの形に合うように整形する。</p>
<dl>
<dt><code>$"&lt;text&gt;"</code></dt>
<dd><code>$</code> から始まる文字列は、文字列埋め込みです。 <code>()</code> で囲んであげた部分を式として評価し、文字列に埋め込みます。
</dd>
<dt><code>str substring &lt;range&gt;</code></dt>
<dd>指定の範囲のスライスを作成します。
</dd>
<dt><code>str kebab-case</code></dt>
<dd>標準入力で来た文字列をケバブケースに変換します。
</dd>
</dl>
<div class="ui segment">
<div class="ui top right attached label">
nu
</div>
<pre class="nu SourceCode"><code>fetch https://qiita.com/api/v2/users/Cj-bc/items | each {$&quot;($it.created_at | str substring [0,10])-($it.title | str kebab-case).md&quot;}
</code></pre>
</div></li>
</ol>
<h2 id="TODO 2. HTMLエンコードを外す"><span class="todo TODO">TODO</span> 2. HTMLエンコードを外す</h2>
<p>APIから取得した <code>body</code> は HTMLエンコードされている(e.g. <code>-&gt;</code> が <code>-&amp;gt;</code> になるなど) ので、これをデコードしてあげます。</p>
<div class="waring">
<p><em>HTML エンコード</em> と <em>URI エンコード</em> は(異なります。</p>
</div>
<p>多分色々な方法が色々な言語にあると思いますが、 一番最初に思い付いた簡単かつ確実なのはnodeを使うことだったのでそうします。 <code>decodeURI</code> (<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/decodeURI">参考</a>) 使えばよさそう。</p>
<dl>
<dt><code>console.log</code></dt>
<dd>標準出力に出力するために使用します
</dd>
<dt><code>fs.readFileSync("/dev/stdin", "utf8")</code></dt>
<dd>標準入力から読むために使用します
</dd>
<dt><code>decodeURI</code></dt>
<dd>URIエンコードをデコードする関数です。
</dd>
</dl>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb5" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ex">node</span> -e <span class="st">&#39;console.log(encodeURI(&quot;https://qiita/てすともーど!!!&gt;&quot;))&#39;</span> <span class="kw">|</span> <span class="ex">node</span> -e <span class="st">&#39;console.log(decodeURI(fs.readFileSync(&quot;/dev/stdin&quot;, &quot;utf8&quot;)))&#39;</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
example
</div>
<pre class="example SourceCode"><code>https://qiita/てすともーど!!!&gt;
</code></pre>
</div>
<h2 id="TODO 3. ファイルに保存する"><span class="todo TODO">TODO</span> 3. ファイルに保存する</h2>
<p><code>save</code> で標準入力からきたものをファイルに保存できます。 つかったものだけ</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb7" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ex">fetch</span> https://qiita.com/api/v2/users/Cj-bc/items?per_page=86 <span class="kw">|</span> <span class="ex">each</span> { <span class="va">$it</span>.body <span class="kw">|</span> <span class="ex">save</span> <span class="st">$&quot;(</span><span class="va">$it</span><span class="st">.created_at | str substring [0 10])-(</span><span class="va">$it</span><span class="st">.title|str kebab-case).md&quot;</span> }</span></code></pre></div>
</div>
<p><a href="https://qiita.com/saba_can00/items/02ff28a16a0d312a5259">https://qiita.com/saba_can00/items/02ff28a16a0d312a5259</a></p>
]]></description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-11-22-blog-import-all-qiita-posts-to-my-blog.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-11-18-emacs-display-line-numbers-type</title>
    <link>https://cj-bc.github.io/blog/posts/2021-11-18-emacs-display-line-numbers-type.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>行番号を表示するdisplay-line-numbers-modeの表示形式について</h1>
  <div class="ui list">
    <div class="item">Posted on November 18, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November 18, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>help:display-line-numbers-mode は、 行番号をWindowの左側に表示してくれるモード。 (help:linum-mode も似たような効果があるが、 help:display-line-numbers-mode の方がカスタマイズ出来るので こちらを使っている。</p>
<p>表示形式は help:display-line-numbers-type を設定することで 変更できる。</p>
<table>
<tbody>
<tr class="odd">
<td><code>t</code></td>
<td>絶対的(absolute)な行数を表示する</td>
</tr>
<tr class="even">
<td><code>relative</code></td>
<td>現在の行からの相対的な行数を表示する</td>
</tr>
<tr class="odd">
<td><code>visible</code></td>
<td>現在の行から、「見た目上の行数」を表示する</td>
</tr>
</tbody>
</table>
<p><code>visible</code> は例えば、evilユーザーかつ何かしらの ナローイングしてる時に便利。</p>
<p>Normal modeで他の行を見にいきたい時、 <code>&lt;相対的な行数&gt;k</code> / <code>&lt;相対的な行数&gt;j</code> とかすると思うのだけど、 これはナローイングされている内部は見にいかずに「見た目上の行数」 を基にして動作するため、 <code>visible</code> にしていると便利</p>
]]></description>
    <pubDate>Thu, 18 Nov 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-11-18-emacs-display-line-numbers-type.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-11-15-xmonad-order-of-managehook</title>
    <link>https://cj-bc.github.io/blog/posts/2021-11-15-xmonad-order-of-managehook.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>XMonadのManageHook表記順番について</h1>
  <div class="ui list">
    <div class="item">Posted on November 15, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November 15, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p><a href="https://hackage.haskell.org/package/xmonad-0.17.0/docs/XMonad-Core.html#t:ManageHook">ManageHook</a> は、XMonadの重要な要素の一つで、ウィンドウ毎に 設定をしたり <a href="https://hackage.haskell.org/package/xmonad-0.17.0/docs/XMonad-Core.html#t:X">Xモナド</a> のアクションを実行したりするためのもの。</p>
<h1 id="やりたかったこと">やりたかったこと</h1>
<p>条件に一致するウィンドウをFloat化し、レイアウトを調節する。</p>
<h1 id="ポイント: 順序に気をつける">ポイント: 順序に気をつける</h1>
<p>ポイントは、 <strong><a href="https://hackage.haskell.org/package/xmonad-0.17.0/docs/XMonad-Core.html#t:ManageHook">ManageHook</a>の中身に<a href="https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Monoid.html#t:Endo">Endo</a>が使われている</strong> ことです。 Endoは、関数のモノイドを提供するためのラッパーで、これは 結合に <code>.</code> (関数合成)を用います。 (参考: <a href="https://blog.miz-ar.info/2019/02/monoid-for-haskellers/#_a_-gt_a_Endo">Haskellerのためのモノイド完全ガイド</a>)</p>
<p>これはつまり、二つの <code>ManageHook</code> <code>a ::ManageHook</code> / <code>b ::ManageHook</code> があった場合、これをモノイドとして結合 (e.g. <code>a &lt;&gt; b</code>) した 際の実行順序は後ろからかけた方(例の場合は <code>b</code>) が先に実行されるということです。</p>
<p>なので、「Float化してからレイアウト調整する」のであれば 先にFloatさせる = 先に <code>doFloat</code> する</p>
<p>眠いのでちょっとあとでまた整理するかもzzz</p>
]]></description>
    <pubDate>Mon, 15 Nov 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-11-15-xmonad-order-of-managehook.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>

    </channel>
</rss>
