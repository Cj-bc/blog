<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>CLI! CLI! CLI!</title>
        <link>https://cj-bc.github.io/blog</link>
        <description><![CDATA[Cj-bc's personal blog posts.]]></description>
        <atom:link href="https://cj-bc.github.io/blog/feeds/rss/general.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 03 Nov 2021 00:00:00 UT</lastBuildDate>
        <item>
    <title>2021-11-03-learnt-about-clean-architecture</title>
    <link>https://cj-bc.github.io/blog/posts/2021-11-03-learnt-about-clean-architecture.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>クリーンアーキテクチャーについて少し学んだ</h1>
  <div class="ui list">
    <div class="item">Posted on November  3, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on November  4, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>今迄あまり設計というものに触れてきていなかったのだけど、今回初めて「クリーンアーキテクチャ」という概念を少し学んだ。 実をいうと SOLID原則すら触れていなかった。名前は知ってたけどねぇ…</p>
<p>関数型を使ってることが多いのもあるけど、古いものと考えていた節は正直ある。 いざ触れてみるとやっぱり為になることが多いねぇ…</p>
<p><a href="https://github.com/Cj-bc/3dShell">Cj-bc/3dShell</a>の設計に悩んだ挙句、部分的に考え方を取り入れてみている。</p>
<p>以下は、調べている間に感じたことの個人的なメモで <strong>技術的に但しいかは保証できない</strong> ので注意。 何かしら「これは違うぞ!!」というのがあれば、 <a href="https://twitter.com/Cj-bc">Twitter</a>にでも直接直リプライ等で指摘していただけるとありがたいです</p>
<h1 id="クリーンアーキテクチャについて軽いメモ">クリーンアーキテクチャについて軽いメモ</h1>
<ul>
<li>クリーンアーキテクチャは「こうやって作ると良い設計になる」というだけであり、別段正解の使い方が一つあるわけではない</li>
<li>サンプル実装もあるにはあるがあくまでサンプル
<ul>
<li>別にもっと層があっても少なくてもいい</li>
</ul></li>
<li>アーキテクチャはそれぞれの事例に合わせて作るべき</li>
<li>SOLID原則をつきつめるとこれになる感じがある。</li>
<li>Onion Architectureや<a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)">Hexagonal architecure</a>等の共通点を取り出した(ような)もの
<ul>
<li>なので図式には共通点が色々ある</li>
</ul></li>
<li>永続化の仕組みやフロントエンド、入力の取得方法等を個別のクラスに切り分けることができるので、パーツ毎の作成が楽
<ul>
<li>「DB決まってないけどフロント作って!」みたいな無茶ぶりができる</li>
<li>テストする時にMockにいれかえたり等できる。</li>
</ul></li>
<li>インターフェースを介したやりとりには <code>DTO</code> (Data Transfer Object) を作成して行う
<ul>
<li>ただDBとのやりとりに <code>DTO</code> 使ってない例が結構あるのでそこの匙加減わからんなぁ</li>
</ul></li>
</ul>
<h2 id="大事な要素">大事な要素</h2>
<ul>
<li><strong>「ドメイン・ビジネスロジックを守る」</strong> のが何よりも大事</li>
<li>外から内側への依存</li>
<li>インターフェースを用いることにより、「具象」ではなく「抽象」への依存にする</li>
</ul>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://qiita.com/nrslib/items/a5f902c4defc83bd46b8#humble-view">実装クリーンアーキテクチャ – @nrslib qiita.com</a></li>
<li><a href="https://ja.wikipedia.org/wiki/SOLID">wiki:SOLID</a></li>
<li><a href="https://gist.github.com/mpppk/609d592f25cab9312654b39f1b357c60">クリーンアーキテクチャ完全に理解した – @mpppk github.com</a></li>
</ul>
]]></description>
    <pubDate>Wed, 03 Nov 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-11-03-learnt-about-clean-architecture.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-10-15-emacs-package-making-evil-textobj-parameter</title>
    <link>https://cj-bc.github.io/blog/posts/2021-10-15-emacs-package-making-evil-textobj-parameter.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>evil-textobj-parameterを作成中です</h1>
  <div class="ui list">
    <div class="item">Posted on October 15, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on October 15, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p><a href="https://github.com/sgur/vim-textobj-parameter">sgur/vim-textobj-parameter</a>のevil版である<a href="https://github.com/Cj-bc/evil-textobj-parameter">Cj-bc/evil-textobj-parameter</a> を作っています。</p>
<h1 id="基本的な仕様">基本的な仕様</h1>
<ul>
<li>キーバインドは提供していないので、 <code>define-key</code> で設定してください。</li>
<li><code>i2,</code> はないですが、それ以外はオリジナルと同じ挙動にしようとしています。</li>
</ul>
<h1 id="現状">現状</h1>
<h2 id="出来ること">出来ること</h2>
<ul>
<li>Inner textobjectは動きます</li>
<li>Outer textobjectは最後のパラメーター以外の時は動きます</li>
</ul>
<h2 id="出来無いこと・欠けていること">出来無いこと・欠けていること</h2>
<ul>
<li>適切なライセンスの表記
<ul>
<li>そもそもライセンスに制約がないかの確認をまだしていない</li>
</ul></li>
<li>Outer textobjectが、最後のパラメーターの上にカーソルがある 状態で使うとうまく動きません。これの修正</li>
<li>内部処理、多分 <code>evil-common</code> とかを上手く使えばもっとよく書ける</li>
</ul>
<p>—-</p>
<p>とりあえず適当な報告まで</p>
]]></description>
    <pubDate>Fri, 15 Oct 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-10-15-emacs-package-making-evil-textobj-parameter.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-10-14-elisp-how-to-write-package</title>
    <link>https://cj-bc.github.io/blog/posts/2021-10-14-elisp-how-to-write-package.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>Elispパッケージを書く際の諸メモ</h1>
  <div class="ui list">
    <div class="item">Posted on October 14, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on October 15, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>初めて<a href="https://github.com/Cj-bc/evil-textobj-parameter">きちんとしたElispパッケージ</a>を作成しているので、パッケージとして書く 場合の注意点とか。</p>
<h1 id="参考リンク">参考リンク</h1>
<dl>
<dt><a href="info:elisp#Packaging">info:elisp#Packaging</a></dt>
<dd>ほぼほぼ全てここに書いてある
</dd>
<dt><a href="info:elisp#Tips">info:elisp#Tips</a></dt>
<dd>コメントの書き方のTipsとか
</dd>
</dl>
<h1 id="ヘッダーのテキスト作成">ヘッダーのテキスト作成</h1>
<p>Elispファイルは大体同じようなコメント行があるが、 どうやらメタ情報を書いていたりして形式があるらしい。</p>
<ul>
<li><a href="info:elisp#Library Headers">info:elisp#Library Headers</a></li>
</ul>
<p>以下は<a href="info:elisp#Library Headers">上記リンク</a>にある、コメントの一例</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>;;; foo.el --- Support for the Foo programming language  -*- lexical-binding: t; -*-

;; Copyright (C) 2010-2021 Your Name

;; Author: Your Name &lt;yourname@example.com&gt;
;; Maintainer: Someone Else &lt;someone@example.com&gt;
;; Created: 14 Jul 2010
;; Keywords: languages
;; URL: https://example.com/foo

;; This file is not part of GNU Emacs.

</code></pre>
</div>
<h2 id="最初の行">最初の行</h2>
<p>一番最初の行は特定のフォーマットになっている必要がある。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>;;; FILENAME --- DESCRIPTION  -*- lexical-binding: t; -*-
</code></pre>
</div>
<h2 id="ヘッダーコメント">ヘッダーコメント</h2>
<table>
<tbody>
<tr class="odd">
<td><code>Author</code></td>
<td>作者の名前とメアド。複数いる場合は、次の行に <code>;;</code> とタブ(若しくは最低2つ以上のスペース)を置いた後に書く</td>
</tr>
<tr class="even">
<td><code>Maintainer</code></td>
<td>現状メンテナンス(バグレポートの対処とか)する人。書式は <code>Author</code> と同じで、省略された場合 <code>Author</code> になる。</td>
</tr>
<tr class="odd">
<td><code>Created</code></td>
<td>オプショナル。ファイルが最初に作られた日の記録、歴史上の興味以上の意味はない。</td>
</tr>
<tr class="even">
<td><code>Version</code></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="フッターコメント">フッターコメント</h2>
<p>ファイルの区切りを明示することで、ファイルの全体を持っているかがわかる。</p>
<p>(正直「一部の欠けたファイル」になることって今もうないと思うので 必要性はあんまりわからないな？？？)</p>
]]></description>
    <pubDate>Thu, 14 Oct 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-10-14-elisp-how-to-write-package.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-09-17-xmobar-reason-utf8-wasnt-rendered</title>
    <link>https://cj-bc.github.io/blog/posts/2021-09-17-xmobar-reason-utf8-wasnt-rendered.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>xmobarでwithutf8してるのにUTF8出来なかった理由</h1>
  <div class="ui list">
    <div class="item">Posted on September 17, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on September 17, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p><code>LANG</code> の設定を確認して。 <code>bashrc</code> 等で設定していても、xmonadから呼び出される場合は それらは反映されない。</p>
<p>xmobarを呼び出している場所でそのまま設定できる 詳しい方法は以下</p>
</blockquote>
</div>
<p>xmobarは、ビルド時のフラグ <code>with_utf8</code> を付けることで UTF-8文字列を扱えるようになる。 そしてこのフラグはデフォルトで <code>True</code> (=有効)なので、特に 何もしなくても使えるはずだった。</p>
<p>が、上手くいかなかった。</p>
<h1 id="試したが上手くいかなかったこと">試したが上手くいかなかったこと</h1>
<ul>
<li>xmobarのビルドフラグの確認
<ul>
<li>archlinuxユーザーなので<a href="https://github.com/archlinux/svntogit-community/blob/packages/xmobar/trunk/PKGBUILD">PKGBUILD</a>を確認したがフラグは全て有効になっている</li>
</ul></li>
<li>フォントの確認
<ul>
<li>普段使いのフォントなので、日本語は対応しているはず</li>
</ul></li>
</ul>
<h1 id="判明した原因">判明した原因</h1>
<p>bashからではなくxmonadから起動していた影響で 環境変数が伝搬されておらず、 <code>LANG=ja_JP.UTF-8</code> でない環境で 実行されていた。</p>
<p>証拠に、ターミナルから <code class="sourceCode bash" data-org-language="sh"><span class="va">LANG=</span>C <span class="ex">xmobar</span></code> と実行してみると 日本語が表示できなくなった。</p>
<h1 id="解決策">解決策</h1>
<h2 id="XMonad.Hooks.DynamicLogを使用している場合"><a href="https://hackage.haskell.org/package/xmonad-contrib-0.16/docs/XMonad-Hooks-DynamicLog.html">XMonad.Hooks.DynamicLog</a>を使用している場合</h2>
<p>多分大半がこちらなのではないか…??</p>
<p>とは思うんだけど時間がない&amp;&amp;私やってないので割愛、 <a href="https://hackage.haskell.org/package/xmonad-contrib-0.16/docs/src/XMonad.Hooks.DynamicLog.html#xmobar">xmobar</a>関数の定義を少し弄ってあげた以下のような関数を作れば動くはず。 理由は [[* <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html">XMonad.Hooks.StatusBar</a> を使用している場合]] を参照。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>xmobar&#39; conf <span class="ot">=</span> statusbar <span class="st">&quot;LANG=ja_JP.UTF-8 xmobar&quot;</span> xmobarPP toggleStructsKey conf</span></code></pre></div>
</div>
<h2 id="XMonad.Hooks.StatusBar を使用している場合"><a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html">XMonad.Hooks.StatusBar</a> を使用している場合</h2>
<p>実はこちらの方が新しいらしく、もう <a href="https://hackage.haskell.org/package/xmonad-contrib-0.16/docs/XMonad-Hooks-DynamicLog.html">DynamicLog</a> は推奨されていないのだそうだ。</p>
<p><strong>知るか!!!!!</strong></p>
<p>と怒鳴ってもしかたないのだけど怒鳴られても仕方ない事情もある。 (それはそれで別で書こう。 )</p>
<p>さて。 <code>StatusBar</code> を使用している場合、 <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html#t:StatusBarConfig">StatusBarConfig</a> 型の 値を使っているはず。 今はみんなここで <code class="sourceCode haskell">statusBarProp <span class="st">&quot;xmobar&quot;</span> (<span class="fu">pure</span> xmobarPP)</code> とかしているのではないだろうか。</p>
<p>ここを以下のように書き換えればよい:</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>statusBarProp <span class="st">&quot;LANG=ja_JP.UTF-8 xmobar&quot;</span> (<span class="fu">pure</span> xmobarPP)</span></code></pre></div>
</div>
<p>そう、 <em>先頭に <code>LANG=ja_JP.UTF-8</code> を付け加えるだけ</em> である。 かんたん!!</p>
<ol>
<li><p>仕組み</p>
<p>実は <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html#v:statusBarProp">statusBarProp</a> の中を見てみても分かりづらいのだが、 <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html#t:StatusBarConfig">StatusBarConfig</a> から読み解くとわかる。</p>
<p><code>StatusBarConfig</code> では、 <code>sbStartUpHook</code> を使って 「ステータスバーを起動する <code>X ()</code> アクション」を定義している。</p>
<p><code>statusBarProp</code> 関数にて引数に取った文字列 ( <code>LANG=ja_JP.UTF-8 xmobar</code> なり <code>xmobar</code> なり)は <code>statusBarProp</code> → <code>statusBarPropTo</code> → <code>statusBarGeneric</code> → <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib-0.16.999/XMonad-Hooks-StatusBar.html#v:spawnStatusBar">spawnStatusBar</a> とそのまま受け渡されていき、</p>
<p>そこから<a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-Core.html#v:spawnPID">spawnPID</a>へと渡される。 そしてこの中では <a href="https://hackage.haskell.org/package/unix-2.7.2.2/docs/System-Posix-Process.html#v:executeFile">executeFile</a> に <strong>なんと <code>/bin/sh -c</code> の引数として</strong> 渡され、最終的に <code>execv</code> システムコールによって実行される。</p>
<p>ここが大事で、 <em>shの上で実行される</em> ことによって環境変数を その場で設定したりといったシェルの機能を使うことができる。</p></li>
</ol>
]]></description>
    <pubDate>Fri, 17 Sep 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-09-17-xmobar-reason-utf8-wasnt-rendered.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-09-12-akihabara-wado-first-try</title>
    <link>https://cj-bc.github.io/blog/posts/2021-09-12-akihabara-wado-first-try.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>秋葉原和堂に行ってきた</h1>
  <div class="ui list">
    <div class="item">Posted on September 12, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on September 12, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>今日は仕事が早めに終わったので、折角だからどこかで御飯食べて帰ろ~と 思った矢先に思い出したのが秋葉原和堂だった。 秋葉原和堂は存在こそ知っていたものの、その雰囲気と</p>
<p>—</p>
<p>意を決して階段を降りる。 そもそも地下なことも把握していなかった。 階段を降りつつ、最初で最後の踊り場で下を見てみると、そこには重い両開きの 扉が一つ。</p>
<p>「ドア」ではなく「扉」がもっともふさわしいと思うような、 「この世俗と奥の空間を区切る」ような雰囲気のある扉だった。</p>
<p>この扉の前で、既に少し雰囲気に圧倒されている。 扉の装飾も綺麗で、この身で触れることも躊躇うような美しさと重さのある 雰囲気を漂わせていた。</p>
<p>まだ引き返すこともできる。 まだ、ここなら取り止めることもできる。</p>
<p>そんな感情すらよぎる程に雰囲気に圧倒されていた。</p>
<p>先程もした気がするのだが、ここでもまた意を決して右側の扉に手をあてて、 力を入れ、ついにこの秋葉原和堂に踏み入れた。</p>
<p>扉を開けた先、すぐに目に飛び込んできたのは豪華な、それでいてもうるさくなくもの静かな 威厳のあるソファと絨毯だった。</p>
<p>誰が座るわけでもなくそこに置いてあったそれらは、恐らく装飾の一つにすぎないのだろうなと思うが ここの世界観・雰囲気を物語るには十分だった。</p>
<p>そこに目を引かれるのもつかの間、左手側に受付が見える。 店員さんが二名。</p>
<p>受付にはAirPayだとか様々なお土産・コラボグッズだとか近代的なものが置いてあるにも かかわらず「大正」の雰囲気に上手いこと溶け込んでいた。</p>
<p>店員さん方の服装も、大正時代にあったものと近しいのかは分からないけれどとても 綺麗で、溶け込んでいた。</p>
<p>~~</p>
<p>店員さんに関して一つ言えば、髪色を染めている方が何人もいらっしゃったにも係らず 服装やお店の雰囲気から少しも逸脱せずに溶け込んでいたのが本当に驚いた。</p>
<p>秋葉原和堂のツイッターに掲げられている「『大正浪漫』と『調合』がコンセプト」、 まさにこれを体現しているなと今特に思う。</p>
<p>~~</p>
<p>事前にTwitterやサイト等で色々と見ているものの「ご利用は始めて」なので 受付の店員さんに頼み方等を教わる。</p>
<p>ベル若しくは備え付けのQRコードから注文が可能らしい。 「大正」と「令和」のコンビネーション…調合…調合ってそういう意味なのか 分からないけど。</p>
<p>受付でカフェを選択し、メニューを受け取ってフロアへ進む。 進むといっても横を向いたらもうその場所なのである。 そちらを向いた瞬間に、一瞬固まってしまった。</p>
<p>今迄散々TwitterやInstagramで拝見させて頂いていた景色とはいえ、 実際に目の当たりにすると何だろうな、雰囲気が凄い違う。 本当に異世界に来たような、ここだけ時の流れが違うような、 非日常感がとても強い光景だった。 タイムトリップしたような気分になった。</p>
<p>なんとこの時はたまたまカフェ側には他のお客様がいらっしゃらなかったので、 自由に席は選び放題だった。とりあえず、壁を背にできるソファに座る。</p>
<p>とても、良い…</p>
<p>座って一息付き、テーブルの上を見渡してみると見付かるのが先程話にあったベルとQRコード。 QRコードは紙に印刷されていたが、ベルは本格的に「ベル」だった。 「ベルの音がなる機械」ではなく「ベル」だった。</p>
<p>そのベルは、正直初めて見たかもしれない…というくらいに想像通りの「ベル」で、中にある長い 部分が結構長かった。そしてここにも素敵な装飾…</p>
<p>メニューを開こうとして、メニューの表面の文様が見えたがこれもとても綺麗に出来ている。 なんだろう、実際には見たことがないが昔の本にありそうな装飾。 金色で縁取られ、花のような蔦のような模様が並んでいる。 綺麗…</p>
<p>綺麗なのはいいんだが、私は頼むものを決める必要がある。ずいぶんと(特に紅茶の種類で)悩んだ末、 料理はナポリタンで紅茶は「この料理にあう紅茶お勧めありますか？」にすることにした。</p>
<p>— 眠い。ので書きたい所先に書く —</p>
<p>清算を終え、和堂の扉に手をかける。 …ここから外の世界へ戻るのには少し時間が必要だった。 でも出なければならない。なぜならここはお店の入口なので…</p>
<p>少し躊躇ってから、覚悟をつけてえいっと開けて外に出た。 そして外に出たのと同時に「令和現代日本」に帰ってきたのを感じた。 よくも悪くも私の本来生きている世界線。</p>
<p>最初はここから「秋葉原和堂」の世界へ入るのに躊躇していたけれど、 最後にはこちらに戻ってくるのを躊躇するようになってしまっていた。 かかっていた曲といい、内装といい、メニューといい、店員さんといい、 普段とはとても異なった世界だったけれど謎に安心感と落ち着きを感じていた。</p>
<p>普段大体この仕事終わりは精神的に相当疲れていて、家に帰ってからもすぐ疲れて寝て しまうことが多かった。 が、今日は秋葉原和堂のおかげで大分精神が楽。居心地の良さ、緊張の解れよう、リラックスさが 半端じゃない。 「また一週間頑張るか~~!!」という気力すら湧いてきた。</p>
<p>普段から通うには少し御高いけれども、一ヶ月に1回とか自分のご褒美として秋葉原和堂に来るのが良いのかも しれない、と感じた。</p>
<p>あとがき</p>
<p>あと眠いながら書いてるので誤字脱字諸々すまん頭がまわらない。 でも当日中にどうしても記録しておきたかった…</p>
]]></description>
    <pubDate>Sun, 12 Sep 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-09-12-akihabara-wado-first-try.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-09-08-homebrew-dfx</title>
    <link>https://cj-bc.github.io/blog/posts/2021-09-08-homebrew-dfx.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>Dfinity SDKのHomebrew formulae(非公式)を書いた</h1>
  <div class="ui list">
    <div class="item">Posted on September  8, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on September  8, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Dfinity SDKは標準のインストーラーが付属するが、 これをHomebrew管理したかったのでラッパーとなるように<a href="https://github.com/Cj-bc/homebrew-dfx">Formula</a>を書いた。</p>
<p>尚これは非公式なものであること・あまりHomebrewのformulaeとしては お行儀良くないことは留意していただきたい。</p>
<h1 id="使い方">使い方</h1>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">brew</span> tap cj-bc/dfx</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ex">brew</span> install dfx</span></code></pre></div>
</div>
<h1 id="技術的メモ">技術的メモ</h1>
<h2 id="環境変数を設定する">環境変数を設定する</h2>
<p><a href="https://docs.brew.sh/Formula-Cookbook#using-environment-variables">https://docs.brew.sh/Formula-Cookbook#using-environment-variables</a></p>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="dt">ENV</span>[<span class="st">&quot;DFX_INSTALL_ROOT&quot;</span>] = prefix</span></code></pre></div>
</div>
<h2 id="ビルド中の一時ディレクトリにファイルを保存する">ビルド中の一時ディレクトリにファイルを保存する</h2>
<p><a href="https://docs.brew.sh/Formula-Cookbook#variables-for-directory-locations">https://docs.brew.sh/Formula-Cookbook#variables-for-directory-locations</a></p>
<p><code>#{hoge}</code> はRubyの記法で、文字列の中に変数を埋め込むことができる。</p>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>system <span class="st">&quot;curl -fsSL https://sdk.dfinity.org/install.sh &gt; </span><span class="ot">#{</span>buildpath<span class="ot">}</span><span class="st">/install.sh&quot;</span></span></code></pre></div>
</div>
<h2 id="system 等で実行したいプログラムの標準入出力を操作する"><code>system</code> 等で実行したいプログラムの標準入出力を操作する</h2>
<p><a href="https://rubydoc.brew.sh/Formula.html">brewのrubydocのFormula.test</a>の部分に書かれているのだが、どうやら <code>open3</code> という ライブラリを使えるらしい。(筆者のRuby歴はHomebrew formulaeを除けば0)</p>
<p>ということでその例を拝借して書き換えてみると:</p>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>     require <span class="st">&quot;open3&quot;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>     <span class="dt">Open3</span>.popen3(<span class="st">&quot;sh&quot;</span>, <span class="st">&quot;-i install.sh&quot;</span>) <span class="kw">do</span> |stdin, stdout, _, th|</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="co"># ここでIO処理をする</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>     <span class="kw">end</span></span></code></pre></div>
</div>
<ol>
<li><p>ユーザーの入力を受け付けてそれをプログラムに渡す</p>
<p>今回の公式のインストールスクリプトは、ライセンスへの同意をキー入力で答える必要があります。 これのためには、homebrew側で受け取ったキー入力をスクリプトに渡してあげる必要があります。</p>
<p><code>stdin</code> を先程の <code>Open3.popen3</code> で設定した変数だとすると、以下のようにすることで 入力のバイパスが出来ました。</p>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>stdin &lt;&lt; <span class="dt">$stdin</span>.gets</span></code></pre></div>
</div>
<p>Rubyにおいて、 <code>$変数名</code> は「グローバル変数」を指します。 なので、グローバルにhomebrewが扱っている標準入力を <code>$stdin</code> として参照しています。</p></li>
<li><p>スレッドを待機させる必要がありそう</p>
<p>単純に <code>Open3.popen3</code> を使った場合、その処理を行っているスレッドは別スレッドとして非同期的に処理がされるようです。 なので、このままだとそちらの処理が終わる前にプログラムが進んでしまいます。</p>
<p>他の言語での <code>await</code> のような機能として、 <code>&lt;thread&gt;.join</code> を使います。</p>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>     <span class="dt">Open3</span>.popen3(<span class="st">&quot;sh&quot;</span>, <span class="st">&quot;-i&quot;</span>, <span class="st">&quot;</span><span class="ot">#{</span>buildpath<span class="ot">}</span><span class="st">/install.sh&quot;</span>)  <span class="kw">do</span> |stdin, stdout, stderr, t|</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="co"># やりたい処理</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>t.join</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>     <span class="kw">end</span>  </span></code></pre></div>
</div>
<p>とすることで、 <code>sh -i install.sh</code> が終了するまで待つことができます。</p></li>
</ol>
<h2 id="文字列にある文字列が含まれるかを確認する">文字列にある文字列が含まれるかを確認する</h2>
<div class="ui segment">
<div class="ui top right attached label">
ruby
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode ruby SourceCode"><code class="sourceCode ruby"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="dt">String</span><span class="co">#match?(/&lt;Regex&gt;/)</span></span></code></pre></div>
</div>
<p>を使うことで、正規表現 <code>&lt;Regex&gt;</code> がマッチしたなら <code>true</code>, しなかったら <code>false</code> を返してくれる。</p>
]]></description>
    <pubDate>Wed, 08 Sep 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-09-08-homebrew-dfx.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-09-08-dfinity-sdk-installer-unofficial-explained-memo</title>
    <link>https://cj-bc.github.io/blog/posts/2021-09-08-dfinity-sdk-installer-unofficial-explained-memo.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>Dfinity SDKのインストールスクリプトを読んでみたメモ</h1>
  <div class="ui list">
    <div class="item">Posted on September  8, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on September  8, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Internet Computerを使うためのSDKはDfinityから<a href="https://sdk.dfinity.org/install.sh">インストールスクリプト</a>が公開されていますが、 <strong>インターネットに転がっているスクリプトを何も考えずに実行してはいけない</strong> のでとりあえず読んでみたメモです。</p>
<p>一応書いておくと、別にDfinityが何か悪事をしているとかそういうことではなく、 単純にネットに置いてあるものは自己責任で使用するものなので確認しているだけです。</p>
<p>又、コード自体は転記するとTerm of Useに引っかかるかもわからなかったので載せていません。 (日本の法律上は引用なら大丈夫だと思うけどそもそも日本の会社ではないので…)</p>
<h1 id="全体の所感">全体の所感</h1>
<p>特に変な部分はなく安全そうだなと個人的には判断しました。 あとスクリプトの書き方的な意味で「こういう方法があるのか…」となっています。</p>
<p>流石きちんと書かれている…(尚rustupのスクリプトを借りてきていることが明記されています)</p>
<p><code>main</code> 関数にメインの処理を入れ、あとはユーティリティ関数が定義されている作りになっています。 コメントのつけ方的に元は別ファイルで管理してそう。</p>
<h1 id="プログラムの流れ">プログラムの流れ</h1>
<p>main関数内部での流れについて</p>
<ol>
<li>ANSIエスケープが可能かどうかの判定</li>
<li>フラグの読み込み</li>
<li>必要なコマンドの有無を確認</li>
<li>LICENSEの同意確認
<ol>
<li>同意しないならば終了</li>
</ol></li>
<li>アーキテクチャの確認
<ol>
<li>非対応アーキテクチャなら終了</li>
</ol></li>
<li>アンインストールスクリプトのインストール</li>
<li>SDKのダウンロード、展開、権限設定</li>
<li>インストール(mv)</li>
</ol>
<h1 id="インストール先ディレクトリの選定">インストール先ディレクトリの選定</h1>
<p>インストール先は以下の順番で選ばれます。</p>
<ol>
<li><code>DFX_INSTALL_ROOT</code> の値</li>
<li><code>/usr/local/bin</code></li>
<li>(macの場合) <code>/usr/local/bin</code></li>
<li><code>/usr/bin</code></li>
<li><code>$HOME/bin</code></li>
</ol>
<p>3番、普通2番と同じなのでちょっとよくわかんないですね…</p>
<h1 id="カスタマイズに使える環境変数">カスタマイズに使える環境変数</h1>
<p>SDK installerの中では、いくつかの環境変数が使われています。</p>
<table>
<thead>
<tr class="header">
<th>変数名</th>
<th>利用方法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>DFX_VERSION</code></td>
<td>DFX のバージョンを指定する</td>
</tr>
<tr class="even">
<td><code>DFX_INSTALL_ROOT</code></td>
<td>インストール先のディレクトリ</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>ちなみにアンインストーラーは <code>$HOME/.cache/dfinity/uninstall.sh</code> で固定らしいです。 (ハードコードされているのでスクリプトを弄らない限り変えることができない。)</p>
]]></description>
    <pubDate>Wed, 08 Sep 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-09-08-dfinity-sdk-installer-unofficial-explained-memo.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-09-02-emacs-projectile-replace</title>
    <link>https://cj-bc.github.io/blog/posts/2021-09-02-emacs-projectile-replace.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>ProjectileのReplaceが便利だった</h1>
  <div class="ui list">
    <div class="item">Posted on September  2, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on September  2, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Emacsのパッケージの一つである <code>projectile</code> に、 help:projectile-replace というコマンドがある。</p>
<p>Projectileの管理下のファイル全てに対して置換できるし、 一つ一つ確認して置換するかどうかを選べるのでとても便利。</p>
]]></description>
    <pubDate>Thu, 02 Sep 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-09-02-emacs-projectile-replace.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-08-26-haskell-dot-and-infix-fmap</title>
    <link>https://cj-bc.github.io/blog/posts/2021-08-26-haskell-dot-and-infix-fmap.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>. と <$> の順序のメモ</h1>
  <div class="ui list">
    <div class="item">Posted on August 26, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 26, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<p>Haskellにおいてしょっちゅうお世話になる演算子二人組を連れてきたよ!</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">infixr</span> <span class="dv">9</span> <span class="op">.</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="kw">infixl</span> <span class="dv">4</span> <span class="op">&lt;$&gt;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="ot">(&lt;$&gt;) ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div>
</div>
<p>…でもたまに分からなくなるよ。</p>
<h1 id="考えたいケース">考えたいケース</h1>
<p>以下はまだわかる</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>(<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]</span></code></pre></div>
</div>
<p>でも以下のように書くと、 <strong>"Why NOT?"</strong> とか言って書き換えを提案されるよ!</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">&lt;$&gt;</span> (<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="co">-- why not</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]</span></code></pre></div>
</div>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>Found: print &lt;$&gt; (++ " ") &lt;$&gt; getLine Why not: print . (++ " ") &lt;$&gt; getLine</p>
</blockquote>
</div>
<p>で、素直にこれで書き換えられるのも分かるのだけど きちんと論理的に考えてみるのです。</p>
<h1 id="論理的に考えるあるよ">論理的に考えるあるよ</h1>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]</span></code></pre></div>
</div>
<p>解釈を考えるあるよ。基本的に左から読まれるわけだけど(ほんとか？)、 今回は中置演算子で繋がれているので <code>infix</code> の値を確認するよ。</p>
<p><code>infix</code> は、 <em>値が大きければ大きい程優先される</em> 。 冒頭でも書いたけど、 <code class="sourceCode haskell">(<span class="op">.</span>)</code> は <code>infix 9</code> で <code class="sourceCode haskell">(<span class="op">&lt;$&gt;</span>)</code> は <code>infix 4</code> 。</p>
<p>なので、先に <code>.</code> での束縛が行われるよ。つまり:</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>((<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>)) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]</span></code></pre></div>
</div>
<p>こうだね。 今度はそれぞれの型を考えてみるよ。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>)<span class="ot"> ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>(<span class="op">+</span> <span class="dv">1</span>)<span class="ot"> ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span><span class="ot"> ::</span> <span class="dt">Num</span> a&#39; <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a&#39;) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a&#39;</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>)<span class="ot"> ::</span> <span class="dt">Num</span> a&#39; <span class="ot">=&gt;</span> a&#39; <span class="ot">-&gt;</span> a&#39;</span></code></pre></div>
</div>
<p>これを <code>&lt;$&gt;</code> と一緒にしてみると</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>)<span class="ot"> ::</span> <span class="dt">Num</span> a&#39; <span class="ot">=&gt;</span> a&#39; <span class="ot">-&gt;</span> a&#39;</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="ot">(&lt;$&gt;) ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span><span class="ot"> ::</span> (<span class="dt">Num</span> a&#39;, <span class="dt">Functor</span> f) <span class="ot">=&gt;</span> f a&#39; <span class="ot">-&gt;</span> f a&#39;</span></code></pre></div>
</div>
<p>なるほど。ここで晴れて <code>[1..5]</code> を適用できる。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>(<span class="op">*</span> <span class="dv">2</span>) <span class="op">.</span> (<span class="op">+</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]<span class="ot"> ::</span> <span class="dt">Num</span> a&#39; <span class="ot">=&gt;</span> [a&#39;]</span></code></pre></div>
</div>
<p>わーい!</p>
<h1 id="まとめ(?)">まとめ(?)</h1>
<p>型パズル、単純に楽しかった!</p>
]]></description>
    <pubDate>Thu, 26 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-08-26-haskell-dot-and-infix-fmap.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2021-08-24-xmonad-how-to-access-window-properties-from-layout</title>
    <link>https://cj-bc.github.io/blog/posts/2021-08-24-xmonad-how-to-access-window-properties-from-layout.html</link>
    <description><![CDATA[<div class="ui center aligned icon header">
  <h1>XMonadのLayoutからWindowのプロパティにアクセスする</h1>
  <div class="ui list">
    <div class="item">Posted on August 24, 2021</div>
    <div class="item">
      <i class="history icon"></i>
      Updated on August 24, 2021
    </div>
  </div>
    
</div>
<div class="info">
  
  
  
</div>

<h1 id="Tl;Dr">Tl;Dr</h1>
<ul>
<li><code>LayoutClass</code> のインスタンスの定義で、 <code>a</code> を <code>Window</code> に固定する
<ul>
<li>どこかに影響あるかもしれない、未確認</li>
</ul></li>
<li><code>doLayout</code> の中で <code>Query</code> を使ってあげる</li>
</ul>
<h1 id="モチベーション">モチベーション</h1>
<p>ダッシュボードとして機能するworkspaceを作成したい。 なので所定の位置に各アプリケーションが配置されてほしいが、 何もしない状態だと各アプリケーションのタイトル(<code>WM_NAME</code>)等には アクセスできず判断できない。</p>
<p>なんとかならないものか</p>
<h1 id="ManageHookを参考にする">ManageHookを参考にする</h1>
<p>managehookでは、ウィンドウのプロパティにアクセスして制御を行っている。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>title <span class="st">&quot;This is example emacs&quot;</span> <span class="op">--&gt;</span> doShift <span class="st">&quot;Editor&quot;</span></span></code></pre></div>
</div>
<p>など。 ここにヒントを得れば何らかの方法がありそうだなと検討が付く</p>
<h1 id="Query を探る"><code>Query</code> を探る</h1>
<p>managehookで使われているのは <code>Query</code> という型。これは <code>X</code> を基底 モナドに持つ <code>ReaderT</code> で、 <code>runQuery</code> で実行することで <code>X a</code> を 戻り値として取ることができる。</p>
<p><a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-Core.html#t:Query"><code>Query</code> と <code>runQuery</code> の実装</a>は以下</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="~Query~ と ~runQuery~ の実装"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="~Query~ と ~runQuery~ の実装-1"><a href="#~Query~ と ~runQuery~ の実装-1" aria-hidden="true"></a>   <span class="kw">newtype</span> <span class="dt">Query</span> a <span class="ot">=</span> <span class="dt">Query</span> (<span class="dt">ReaderT</span> <span class="dt">Window</span> <span class="dt">X</span> a)</span>
<span id="~Query~ と ~runQuery~ の実装-2"><a href="#~Query~ と ~runQuery~ の実装-2" aria-hidden="true"></a><span class="kw">deriving</span> (<span class="dt">Functor</span>, <span class="dt">Applicative</span>, <span class="dt">Monad</span>, <span class="dt">MonadReader</span> <span class="dt">Window</span>, <span class="dt">MonadIO</span>)</span>
<span id="~Query~ と ~runQuery~ の実装-3"><a href="#~Query~ と ~runQuery~ の実装-3" aria-hidden="true"></a></span>
<span id="~Query~ と ~runQuery~ の実装-4"><a href="#~Query~ と ~runQuery~ の実装-4" aria-hidden="true"></a><span class="ot">   runQuery ::</span> <span class="dt">Query</span> a <span class="ot">-&gt;</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> a</span>
<span id="~Query~ と ~runQuery~ の実装-5"><a href="#~Query~ と ~runQuery~ の実装-5" aria-hidden="true"></a>   runQuery (<span class="dt">Query</span> m) w <span class="ot">=</span> runReaderT m w</span></code></pre></div>
</div>
<p>さて…どうやらこれで答えなのでは？ <code>X</code> モナドのアクションなので、あとはこれを <code>doLayout</code> 内部から呼んであげれば良さそう。</p>
<p><strong>…が、人生そう甘はないのである</strong></p>
<h1 id="Query では上手くいかない!？"><code>Query</code> では上手くいかない!？</h1>
<p>改めて <code>runQuery</code> の型を見てみよう。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">runQuery ::</span> <span class="dt">Query</span> a <span class="ot">-&gt;</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> a</span></code></pre></div>
</div>
<p>第二引数に取るのは <code>Window</code> である。 <a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-Core.html#v:doLayout">~doLayout~の型</a>も見てみよう</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">doLayout ::</span> layout a <span class="op">-</span> <span class="dt">Rectangle</span> <span class="ot">-&gt;</span> <span class="dt">Stack</span> a <span class="ot">-&gt;</span> <span class="dt">X</span> ([(a, <span class="dt">Rectangle</span>)], <span class="dt">Maybe</span> (layout a))</span></code></pre></div>
</div>
<p>このうち、ウィンドウの情報が格納されているのは <code>Stack a</code> の内部である。(<a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-Core.html#v:doLayout">コメント</a>より) そして <a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-StackSet.html#t:Stack"><code>Stack a</code> の定義</a> を見てみると</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>   <span class="kw">data</span> <span class="dt">Stack</span> a <span class="ot">=</span> <span class="dt">Stack</span> {<span class="ot"> focus  ::</span> <span class="op">!</span>a        <span class="co">-- focused thing in this set</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>   ,<span class="ot"> up     ::</span> [a]       <span class="co">-- clowns to the left</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>   ,<span class="ot"> down   ::</span> [a] }     <span class="co">-- jokers to the right</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>, <span class="dt">Eq</span>)</span></code></pre></div>
</div>
<p>となっており、 <em>保存されている値の型は <code>a</code> で定義されている</em> のだ。 これが何故問題になるか、というと <strong><code>runQuery</code> に <code>Stack a</code> の中の <code>Window</code> を食わせたいが、 型が定まっていないため型エラーを起こす</strong> ということだ。</p>
<p>ドキュメント的に、 <code>doLayout</code> には実際には <code>Stack Window</code> が渡されるであろうことは明白なのだが、 プログラムからするとそんな実行時の話は知らない。 というか型としてはエラーを起こすのが正解だと思う。</p>
<p>でも確実に <code>Window</code> がくるはずだし、困った…</p>
<h1 id="LayoutClass &lt;Layout&gt; Window にしちゃえ!!"><code>LayoutClass &lt;Layout&gt; Window</code> にしちゃえ!!</h1>
<p>えいやっ!というやっつけ感が凄いが、 <code>LayoutClass</code> のインスタンスを作る際に <code>a</code> の型を指定してしまえば 型エラーは起こらなくなる。 <code>doLayout</code> は <code>LayoutClass</code> の型クラス関数であり、 <code>doLayout</code> の型定義の中の <code>a</code> は <code>LayoutClass &lt;Layout&gt; a</code> によって束縛されているからだ。</p>
<p>これによって、 <code>Stack a</code> の型が固定される。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">LayoutClass</span> <span class="dt">MyLayout</span> <span class="dt">Window</span> <span class="kw">where</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ot">  doLayout ::</span> <span class="dt">MyLayout</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">Rectangle</span> <span class="ot">-&gt;</span> <span class="dt">Stack</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ([(<span class="dt">Window</span>, <span class="dt">Rectangle</span>)], <span class="dt">Maybe</span> (<span class="dt">MyLayout</span> <span class="dt">Window</span>))</span></code></pre></div>
</div>
<p>そうすれば、後は <code>Stack</code> から取り出した <code>Window</code> を <code>runQuery</code> にかけてあげれば良いだけになる。</p>
<h1 id="おまけ: 具体的な書き方">おまけ: 具体的な書き方</h1>
<p>ついでなので、ケース毎に使い方(書き方)を書いてみる。</p>
<h2 id="タイトルによって選択">タイトルによって選択</h2>
<p><a href="https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-ManageHook.html#v:title"><code>title</code></a>を使います。 <a href="https://github.com/Cj-bc/dotfiles/blob/master/dotfiles/xmonad/src/XMonad/Layout/Info.hs#L25-L31">私のxmonadに記載されているもの</a>と同じです。</p>
<p>最初に <code>[Window]</code> から 適切な <code>Window</code> だけ取り出すために <code>[X (Maybe Window)]</code> にしてあげて、 <code>X</code> を実行するために <code>sequence</code> (<code>X [Maybe Window]</code>)、 <code>find</code> で <code>Just</code> なもの(=求めていたWindow)をピックアップしてあげて (<code>X [Maybe (Maybe Window)]</code>)、二重になった <code>Maybe</code> を <code>join</code> で平たくしてあげています。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">     windowTitleIs ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Window</span>] <span class="ot">-&gt;</span> <span class="dt">X</span> (<span class="dt">Maybe</span> <span class="dt">Window</span>)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>     windowTitleIs name ws <span class="ot">=</span> <span class="fu">fmap</span> (join <span class="op">.</span> find isJust) <span class="op">.</span> <span class="fu">sequence</span> <span class="op">.</span> <span class="fu">flip</span> <span class="fu">fmap</span> ws <span class="op">$</span> \w <span class="ot">-&gt;</span> <span class="fu">flip</span> runQuery w <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>n <span class="ot">&lt;-</span> w<span class="ot">`hasTitle`</span>name</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="kw">if</span> n <span class="kw">then</span> <span class="fu">return</span> (<span class="dt">Just</span> w) <span class="kw">else</span> <span class="fu">return</span> <span class="dt">Nothing</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a><span class="ot">     hasTitle ::</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Query</span> <span class="dt">Bool</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>     hasTitle w name <span class="ot">=</span> (<span class="op">==</span> name) <span class="op">&lt;$&gt;</span> title</span></code></pre></div>
</div>
<p>ついで(？)なので思考メモを残しておきます。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="思考メモ"><pre class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="思考メモ-1"><a href="#思考メモ-1" aria-hidden="true"></a><span class="ot">allWindows ::</span> [<span class="dt">Window</span>]</span>
<span id="思考メモ-2"><a href="#思考メモ-2" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="思考メモ-3"><a href="#思考メモ-3" aria-hidden="true"></a><span class="fu">flip</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="思考メモ-4"><a href="#思考メモ-4" aria-hidden="true"></a><span class="fu">flip</span><span class="ot"> fmap ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> f a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f b</span>
<span id="思考メモ-5"><a href="#思考メモ-5" aria-hidden="true"></a><span class="fu">flip</span> <span class="fu">fmap</span><span class="ot"> allWindows ::</span> (<span class="dt">Window</span> <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [b]</span>
<span id="思考メモ-6"><a href="#思考メモ-6" aria-hidden="true"></a></span>
<span id="思考メモ-7"><a href="#思考メモ-7" aria-hidden="true"></a></span>
<span id="思考メモ-8"><a href="#思考メモ-8" aria-hidden="true"></a><span class="fu">flip</span> <span class="fu">fmap</span> allWindows <span class="op">&lt;$&gt;</span><span class="ot"> ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> f ([<span class="dt">Window</span>] <span class="ot">-&gt;</span> (<span class="dt">Window</span> <span class="ot">-&gt;</span> b)) <span class="ot">-&gt;</span> f [b]</span>
<span id="思考メモ-9"><a href="#思考メモ-9" aria-hidden="true"></a></span>
<span id="思考メモ-10"><a href="#思考メモ-10" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">X</span> (<span class="dt">Maybe</span> <span class="dt">Window</span>)</span>
<span id="思考メモ-11"><a href="#思考メモ-11" aria-hidden="true"></a></span>
<span id="思考メモ-12"><a href="#思考メモ-12" aria-hidden="true"></a><span class="fu">flip</span> <span class="fu">fmap</span> allWindows<span class="ot"> f ::</span> [<span class="dt">X</span> (<span class="dt">Maybe</span> <span class="dt">Window</span>)]</span>
<span id="思考メモ-13"><a href="#思考メモ-13" aria-hidden="true"></a></span>
<span id="思考メモ-14"><a href="#思考メモ-14" aria-hidden="true"></a><span class="fu">sequence</span><span class="ot"> ::</span> (<span class="dt">Traversable</span> t, <span class="dt">Monad</span> m) <span class="ot">=&gt;</span> t (m a) <span class="ot">-&gt;</span> m (t a)</span>
<span id="思考メモ-15"><a href="#思考メモ-15" aria-hidden="true"></a></span>
<span id="思考メモ-16"><a href="#思考メモ-16" aria-hidden="true"></a><span class="fu">sequence</span> <span class="op">$</span> <span class="fu">flip</span> <span class="fu">fmap</span> allwindows<span class="ot"> f ::</span> <span class="dt">X</span> [<span class="dt">Maybe</span> <span class="dt">Window</span>]</span>
<span id="思考メモ-17"><a href="#思考メモ-17" aria-hidden="true"></a></span>
<span id="思考メモ-18"><a href="#思考メモ-18" aria-hidden="true"></a><span class="ot">find ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="思考メモ-19"><a href="#思考メモ-19" aria-hidden="true"></a><span class="ot">(&lt;$&gt;) ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="思考メモ-20"><a href="#思考メモ-20" aria-hidden="true"></a></span>
<span id="思考メモ-21"><a href="#思考メモ-21" aria-hidden="true"></a>find<span class="ot"> isJust ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="思考メモ-22"><a href="#思考メモ-22" aria-hidden="true"></a>find isJust <span class="op">&lt;$&gt;</span><span class="ot"> ::</span> <span class="dt">Foldable</span> t, <span class="dt">Functor</span> f <span class="ot">=&gt;</span> f (t a) <span class="ot">-&gt;</span> f (<span class="dt">Maybe</span> a)</span>
<span id="思考メモ-23"><a href="#思考メモ-23" aria-hidden="true"></a>find jsJust <span class="op">&lt;$&gt;</span> <span class="fu">sequence</span> <span class="op">$</span> <span class="fu">flip</span> <span class="fu">fmap</span> allwindows<span class="ot"> f ::</span> <span class="dt">X</span> (<span class="dt">Maybe</span> (<span class="dt">Maybe</span> a))</span>
<span id="思考メモ-24"><a href="#思考メモ-24" aria-hidden="true"></a></span>
<span id="思考メモ-25"><a href="#思考メモ-25" aria-hidden="true"></a><span class="ot">join ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> m (m a) <span class="ot">-&gt;</span> m a</span>
<span id="思考メモ-26"><a href="#思考メモ-26" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> join ::</span> (<span class="dt">Monad</span> m, <span class="dt">Functor</span> f) <span class="ot">=&gt;</span> f (m (m a)) <span class="ot">-&gt;</span> f (m a)</span>
<span id="思考メモ-27"><a href="#思考メモ-27" aria-hidden="true"></a></span>
<span id="思考メモ-28"><a href="#思考メモ-28" aria-hidden="true"></a><span class="ot">($) ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b</span>
<span id="思考メモ-29"><a href="#思考メモ-29" aria-hidden="true"></a><span class="fu">fmap</span> join <span class="op">$</span><span class="ot"> ::</span> (<span class="dt">Monad</span> m, <span class="dt">Functor</span> f) <span class="ot">=&gt;</span> f (m (m a)) <span class="ot">-&gt;</span> f (m a)</span>
<span id="思考メモ-30"><a href="#思考メモ-30" aria-hidden="true"></a></span>
<span id="思考メモ-31"><a href="#思考メモ-31" aria-hidden="true"></a><span class="fu">fmap</span> join <span class="op">$</span> find jsJust <span class="op">&lt;$&gt;</span> <span class="fu">sequence</span> <span class="op">$</span> <span class="fu">flip</span> <span class="fu">fmap</span> allwindows<span class="ot"> f ::</span> <span class="dt">X</span> (<span class="dt">Maybe</span> a)</span></code></pre></div>
</div>
]]></description>
    <pubDate>Tue, 24 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2021-08-24-xmonad-how-to-access-window-properties-from-layout.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>

    </channel>
</rss>
