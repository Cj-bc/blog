<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>CLI! CLI! CLI!</title>
        <link>https://cj-bc.github.io/blog</link>
        <description><![CDATA[Cj-bc's personal blog posts.]]></description>
        <atom:link href="https://cj-bc.github.io/blog/feeds/rss/tag/hakyll.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 26 Sep 2023 00:00:00 UT</lastBuildDate>
        <item>
    <title>2023-09-26-unity-xrinteractiontoolkit-textmeshpro-get-character-at-raycast-interactor</title>
    <link>https://cj-bc.github.io/blog/posts/2023-09-26-unity-xrinteractiontoolkit-textmeshpro-get-character-at-raycast-interactor.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>XR ray Interactorの先にあるTMPText上の文字を取得する</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on September 26, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on September 27, 2023
	</div>

	

	
	<a title="All pages tagged &#39;unity&#39;." href="/tags/unity.html" class="ui tag label">unity</a>
	
      </div>

    <div class="description">
      <p>TextMeshProの機能を使うと実は簡単に作れます。</p>
<h1 id="Tl;Dr">Tl;Dr</h1>
<ol>
<li>テキストを<a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TMP_Text.html">TextMeshPro.TMP<sub>Text</sub></a>の派生クラスを用いて作成する</li>
<li>1.のgameObjectに<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.EventTrigger.html">EventTrigger</a>を追加し、
<code>Pointer Click</code> イベント用のハンドラを書く
<ol>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.PointerEventData.html#UnityEngine_EventSystems_PointerEventData_worldPosition">PointerEventData.worldPosition</a>を<a
href="https://docs.unity3d.com/ScriptReference/Camera.WorldToScreenPoint.html">Camera.WorldToScreenPoint</a>を用いてスクリーン座標へ変換する</li>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingCharacter_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_System_Boolean_">TMP<sub>TextUtilities</sub>.FindIntersectingCharacter</a>で文字のインデックスを取得する</li>
<li>インデックスを元に、<a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TMP_Text.html#TMPro_TMP_Text_text">TMP<sub>Text</sub>.text</a>から取得する</li>
</ol></li>
</ol>
<h1 id="バージョン情報">バージョン情報</h1>
<table class="ui celled table">
<thead>
<tr class="header">
<th>パッケージ等</th>
<th>バージョン</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Unity</td>
<td>2022.1.24f1</td>
</tr>
<tr class="even">
<td>TextMeshPro</td>
<td>3.0.6</td>
</tr>
<tr class="odd">
<td>XR Interaction Toolkit</td>
<td>2.0.4</td>
</tr>
<tr class="even">
<td>UnityUI</td>
<td>1.0.0</td>
</tr>
</tbody>
</table>
<h1 id="工程">工程</h1>
<p>最初2工程は前回の記事と同じ内容になります。簡単のためこちらにも記載しています。</p>
<h2 id="テキストメッシュを作成する">テキストメッシュを作成する</h2>
<p>XR Interaction Toolkit対応のCanvasを作り、その子供に<a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TextMeshProUGUI.html">TextMeshProUGUI</a>を
作成します。便宜上、このgameObjectを「テキストメッシュ」と呼ぶことにし
ます。</p>
<h2
id="テキストメッシュがXR Ray Interactorのイベントに反応出来るようにする">テキストメッシュがXR
Ray Interactorのイベントに反応出来るようにする</h2>
<p>テキストメッシュは、デフォルトではEventSystemのイベントに反応しません。
そこで、<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.EventSystems.EventTrigger.html">EventTrigger</a>を用いてXR
Ray Interactorのイベントに反応出来るよ うにします。</p>
<p>!写真</p>
<p>テキストメッシュにEventTriggerコンポーネントを追加し、
<code>Pointer Click</code> イベントを追加します。</p>
<p>そのコールバック関数として、 <code>BaseEventData</code> を受け取って
<code>void</code> を返 す関数を作成します。ここでは、
<code>pointerClick</code> として定義しておくことに します。(写真では
<code>BufferUI.pointerClick</code> となっています)</p>
<div class="ui segment">
<div class="ui top right attached label">
csharp
</div>
<div class="sourceCode" id="cb1"><pre
class="sourceCode csharp SourceCode"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">.</span><span class="fu">EventSystems</span><span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> TMPro<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> PointerClickExample <span class="op">{</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// 作成したテキストメッシュへの参照</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> TMP_Text m_text<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">pointerClick</span><span class="op">(</span>BaseEventData d<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">var</span> pointerEv <span class="op">=</span> d <span class="kw">as</span> PointerEventData<span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>pointerEv <span class="op">==</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span><span class="op">;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div>
<h2
id="交差点がどの文字上にあるのかを取得する">交差点がどの文字上にあるのかを取得する</h2>
<p><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingCharacter_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_System_Boolean_">TMPro.TMP<sub>TextUtilities</sub>.FindIntersectingCharacter</a>を用いると、与えた点
と交わっている文字を取得することが出来ます。</p>
<p>しかし、その際与える座標は ワールド座標系 <u>ではありません</u> 。
<code>camera</code>
引数で与えたカメラのスクリーン座標系である必要があるようです。</p>
<p>"あるようです"というのは、ドキュメント上には記載がなく自分で試した時に
上手くいったのがそれだったからです。又、インターネットで調べた所
<code>Input.mousePosition</code>
を用いているものが多くあり、それもスクリーン座標
系であるからという推測でもあります。</p>
<ol>
<li><p>イベントの発生したカメラのスクリーン座標系の座標を取得する</p>
<p>pointerClickイベントが発生した時のRaycastとの交差点は、 <a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.PointerEventData.html#UnityEngine_EventSystems_PointerEventData_pressPosition">PointerEventData.pressPosition</a>で取得出来ます。これは
<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.PointerEventData.html#UnityEngine_EventSystems_PointerEventData_pressEventCamera">PointerEventData.pressEventCamera</a>のカメラのスクリーン座標系の座標となっ
ています。</p>
<ol>
<li><p>(おまけ)
<code>PointerEventData.pointerPressRaycast.worldPosition</code>
からの取得</p>
<p>カメラのワールドToスクリーン座標変換関数を用いると、これからも取得する
ことが出来ます。</p>
<div class="ui segment">
<div class="ui top right attached label">
csharp
</div>
<div class="sourceCode" id="cb2"><pre
class="sourceCode csharp SourceCode"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>pointerEv<span class="op">.</span><span class="fu">pressEventCamera</span><span class="op">.</span><span class="fu">WorldToScreenPoint</span><span class="op">(</span>pointerEv<span class="op">.</span><span class="fu">pointerPressRaycast</span><span class="op">.</span><span class="fu">worldPosition</span><span class="op">)</span></span></code></pre></div>
</div></li>
</ol></li>
<li><p>文字インデックスから文字を取得する</p>
<p><code>FindIntersectingCharacter</code> を用いて、
<code>TMP_Text.text</code> のインデックス
を取得することが出来ます。そのインデックスを用いることで、文字を取得す
ることが出来ます。</p>
<p>文字が見付からなかった際は -1
を返すようなので、そこで条件分岐が必要で す。</p>
<div class="ui segment">
<div class="ui top right attached label">
csharp
</div>
<div class="sourceCode" id="cb3"><pre
class="sourceCode csharp SourceCode"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">.</span><span class="fu">EventSystems</span><span class="op">;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> TMPro<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> PointerClickExample <span class="op">{</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// 作成したテキストメッシュへの参照</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> TMP_Text m_text<span class="op">;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">pointerClick</span><span class="op">(</span>BaseEventData d<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">var</span> pointerEv <span class="op">=</span> d <span class="kw">as</span> PointerEventData<span class="op">;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>pointerEv <span class="op">==</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span><span class="op">;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        <span class="dt">var</span> pos <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>pointerEv<span class="op">.</span><span class="fu">pressPosition</span><span class="op">.</span><span class="fu">x</span><span class="op">,</span> pointerEv<span class="op">.</span><span class="fu">pressPosition</span><span class="op">.</span><span class="fu">y</span><span class="op">,</span> 0f<span class="op">);</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        <span class="dt">var</span> idx <span class="op">=</span> TMP_TextUtilities<span class="op">.</span><span class="fu">FindIntersectingCharacter</span><span class="op">(</span>m_text<span class="op">,</span> pos<span class="op">,</span> pointerEv<span class="op">.</span><span class="fu">pressEventCamera</span><span class="op">,</span> <span class="kw">false</span><span class="op">);</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>idx <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>            Debug<span class="op">.</span><span class="fu">Log</span><span class="op">(</span><span class="st">&quot;文字が見付かりませんでした&quot;</span><span class="op">);</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="kw">else</span> <span class="op">{</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>            Debug<span class="op">.</span><span class="fu">Log</span><span class="op">(</span>$<span class="st">&quot;index: {idx}, 選択された文字: {m_text.text[idx]}&quot;</span><span class="op">);</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div></li>
</ol>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Tue, 26 Sep 2023 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2023-09-26-unity-xrinteractiontoolkit-textmeshpro-get-character-at-raycast-interactor.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2023-09-26-unity-xrinteractiontoolkit-retrive-ugui-event</title>
    <link>https://cj-bc.github.io/blog/posts/2023-09-26-unity-xrinteractiontoolkit-retrive-ugui-event.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>XR Interaction Toolkit からuGUIイベントに反応する</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on September 26, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on September 27, 2023
	</div>

	

	
	
	
      </div>

    <div class="description">
      <p>uGUI上に表示した文字列へのイベントを取りたかったです。最初は
Interactable として扱うのかなと色々試しましたが、実際の所マウスイベン
トとして扱ってよいということがわかりました。</p>
<h1 id="Tl;Dr">Tl;Dr</h1>
<ul>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.5/api/UnityEngine.XR.Interaction.Toolkit.IXRInteractable.html">IXRInteractable</a>等の
Interactableは <u>関係ない</u></li>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.5/manual/ui-setup.html">UI
interaction setup | XR Interaction Toolkit | 2.5.1</a> に従えばよい</li>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/manual/script-EventTrigger.html">EventTrigger</a>を用いる際は、Rayでの選択は
<code>Pointer Click</code> として扱える</li>
</ul>
<h1 id="やること">やること</h1>
<h2 id="XR Interaction Toolkit 対応のCanvasを作成する">XR Interaction
Toolkit 対応のCanvasを作成する</h2>
<p>XR Interaction
Toolkitを導入している状態であれば、ヒエラルキービューか ら
<code>XR&gt;UI Canvas</code> で作成することが出来ます。</p>
<p>EventSystemが作成されない場合は、同様に
<code>XR&gt;UI EventSystem</code> を追加して ください。</p>
<h2
id="(おまけ) 任意のイベントを受け取るためには EventTrigger を追加する">(おまけ)
任意のイベントを受け取るためには <code>EventTrigger</code>
を追加する</h2>
<p>ボタン等は <code>OnClick</code>
イベントを受け取ることが出来ますが、それ以外のコ ンポーネント(<a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/api/TMPro.TextMeshProUGUI.html">TMPro.TextMeshProUGUI</a>など)でも受け取りたい場合、
<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/manual/script-EventTrigger.html">EventTrigger</a>を使用出来ます。</p>
<p>uGUI上でコントローラーのトリガー入力を受け取りたい場合は<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.EventTrigger.html#UnityEngine_EventSystems_EventTrigger_OnPointerClick_UnityEngine_EventSystems_PointerEventData_">PointerClick</a>を
使用出来ます。コールバックは<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.PointerEventData.html">PointerEventData</a>型の引数を取りますが、実際
に <code>EventTrigger</code> に設定する際は<a
href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/api/UnityEngine.EventSystems.BaseEventData.html">BaseEventData</a>型の引数を受け取って自分
でキャストする必要があります。</p>
<p>具体的には以下のような形となるかと思います。参考までに <a
href="https://github.com/Cj-bc/TextObjectsVR/blob/000720cab35d0ed1da84187bbf33bce77682d21a/Assets/Scripts/Buffer/BufferUI.cs#L36-L53">TextObjectsVRでの具体的な使用例</a>も置いておきます。</p>
<div class="ui segment">
<div class="ui top right attached label">
csharp
</div>
<div class="sourceCode" id="cb1"><pre
class="sourceCode csharp SourceCode"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">void</span> <span class="fu">pointerClick</span><span class="op">(</span>BaseEventData d<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">var</span> pointerEv <span class="op">=</span> d <span class="kw">as</span> PointerEventData<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> <span class="op">(</span>pointerEv <span class="op">==</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span><span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// イベントに対応するスクリプト</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</div>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Tue, 26 Sep 2023 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2023-09-26-unity-xrinteractiontoolkit-retrive-ugui-event.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2023-08-30-unity-textmeshpro-detect-char-under-cursor</title>
    <link>https://cj-bc.github.io/blog/posts/2023-08-30-unity-textmeshpro-detect-char-under-cursor.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>Text Mesh Proでカーソル下の文字を取得する</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on August 30, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on September 27, 2023
	</div>

	

	
	<a title="All pages tagged &#39;unity&#39;." href="/tags/unity.html" class="ui tag label">unity</a>
	
      </div>

    <div class="description">
      <p>実は公式の機能で出来ることを知ったのでメモ。</p>
<p><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingCharacter_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_System_Boolean_">TMPro.TMP<sub>TextUtilities</sub>.FindIntersectingCharacter</a>を用いればよい。
実際の使用例はExtras &amp;
Examplesの中に仕舞われているので参照するとよい。</p>
<p>個人的にはVRで使いたいので、実装してみたらまた記事を書く。</p>
<p>尚、他にもあるので下記リンクを参照:</p>
<ul>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingLine_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_">FindIntersectingLine</a></li>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingLink_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_">FindIntersectingLink</a></li>
<li><a
href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/api/TMPro.TMP_TextUtilities.html#TMPro_TMP_TextUtilities_FindIntersectingWord_TMPro_TMP_Text_UnityEngine_Vector3_UnityEngine_Camera_">FindIntersectingWord</a></li>
</ul>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Wed, 30 Aug 2023 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2023-08-30-unity-textmeshpro-detect-char-under-cursor.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2023-08-30-tcpip-why-use-ip-along-with-mac-address</title>
    <link>https://cj-bc.github.io/blog/posts/2023-08-30-tcpip-why-use-ip-along-with-mac-address.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>何故MACアドレスだけでなくIPアドレスを使用するのか？</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on August 30, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on September 27, 2023
	</div>

	

	
	
	
      </div>

    <div class="description">
      <p>Twitter(現X)にて</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>MACアドレスが世界中でユニークなんだったら、IPアドレスを使わずにMACアド
レスだけで通信できるのでは？」という質問があって</p>
</blockquote>
</div>
<p>という<a
href="https://twitter.com/yuhkun/status/1696525100651274472">Tweet</a>(現Post)があり、
<u>自分の理解をもう一度確認するために</u> 自分なり
の説明を書いておこうと思います。</p>
<p><strong>敢えて何も(引用したTweetのリプすらも)確認せず書いているので、参考にはしないでください。</strong></p>
<p>そして間違いがあればマサカリを投げて下さい (<a
href="https://twitter.com/mihe_himari">twitter@mihe<sub>himari</sub></a>,
<a
href="https://misskey.io/@cj_bc_sd">@cj<sub>bcsd</sub>@misskey.io</a>,
<a
href="https://misskey.neos.love/@cj_bc_sd">@cj<sub>bcsd</sub>@misskey.neos.love</a>)。</p>
<p>後にマスタリングTCP/IP等を参考にしつつ添削記事も出そうと思います。</p>
<h1 id="理由1: MACアドレスのユニークさは保証されていない">理由1:
MACアドレスのユニークさは保証されていない</h1>
<p>MACアドレス、というか物理アドレスはリンク内でユニークになる必要がある
ものの、グローバルにユニークである必要はありません。
そのため、根本的に一意に特定出来ることが保証されていません。</p>
<h1 id="理由2: ルーティングが難しい">理由2: ルーティングが難しい</h1>
<p>MACアドレスはベンダーIDとベンダー内での識別子とから構成されています。
製品の識別を行うことは出来ますが、物理的なネットワーク内の位置の特定に
は用いることが出来ません。</p>
<h2
id="MACアドレスのみを用いたルーティングの試行と問題点">MACアドレスのみを用いたルーティングの試行と問題点</h2>
<p>MACアドレスのみを用いてルーティングすることを考えてみます。どのノード
に目的のノードが繋がっているかが分からないため、繋がっている全てのノード
へパケットを送信し、自分自身が宛先であれば受け取り、そうでなければ周り
の全てのノードへ転送する…といった方法で配達することしか出来ません。</p>
<ol>
<li><p>問題点</p>
<p>これは単純に負荷が無駄に多いのは勿論、同じパケットが同じノードを何度も
通ってしまう問題が出てきます。これはTTL(Time to Live)を設定するなどし
て制限することが出来ますが、そうすると今度は物理的に遠くにあるノードへ
到達しない可能性が出てきてしまいます。</p>
<p>ネットワーク内でどのノードがどのノードに繋がっているのかが把握出来ない
と、通信をする経路を決定するためのルートを組むことが難しいです。</p></li>
</ol>
<h2 id="IPアドレスが解決する方法">IPアドレスが解決する方法</h2>
<p><strong>[NOTE]</strong>
全ての論理アドレスについて同じであるか自信がなかったのでIPアドレスに限
定した話をします。又、TCP/IPにおけるルーティングはIPプロトコルのみで行
われるのではないですが、論理アドレスの必要性の話に留めるので詳しくは書
きません。</p>
<p>IPアドレスは、アドレスの階層化によってルーティングの問題を解決します。
アドレスはネットワーク部とホスト部に分かれており、同一リンク内ではネッ
トワーク部を共有しています(はず)。これにより、リンク内のノードを識別す
ることが出来るようになります。</p>
<p>又、ネットワーク部の存在によりノードがどのネットワークに所属するかが分
かるため、周辺のノードがどのネットワークに接続しているのかを記録してお
けば「ネットワークAに所属するノードへのパケットはノードXに送ればいい」
「ネットワークBに所属するノードへのパケットはノードYに送ればいい」といっ
たように転送先を狭めることが出来ます。</p>
<h1 id="理由3: 複数種類のリンクを跨ぐ可能性がある">理由3:
複数種類のリンクを跨ぐ可能性がある</h1>
<p>これは書いている間にキーワードを見てしまい思い出したので、ちょっと忘れ
ていた項目ではあります。</p>
<p>勉強する上では「物理アドレス=MACアドレス」というように思いがちですが
(私もまぁ意識してなくて忘れてたわけですが)、実際は物理アドレスはリンク
によって異なっており、互換性は担保されていません。</p>
<p>WiFiはEthernetと同じくMACアドレスを使用しているため問題なく扱うことが
出来ますが、他のリンクを用いるとなるとMACアドレスでは通信が出来なくなっ
てしまいます。</p>
<p>そのため、複数種類のリンクを越えて使えるアドレスとして、論理アドレスが
必要となっています。</p>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Wed, 30 Aug 2023 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2023-08-30-tcpip-why-use-ip-along-with-mac-address.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2023-08-16-emacs-move-from-lsp-mode-to-eglot</title>
    <link>https://cj-bc.github.io/blog/posts/2023-08-16-emacs-move-from-lsp-mode-to-eglot.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>lsp-modeからEglotへ乗り換える</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on August 16, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on August 17, 2023
	</div>

	

	
	<a title="All pages tagged &#39;emacs&#39;." href="/tags/emacs.html" class="ui tag label">emacs</a>
	
      </div>

    <div class="description">
      <p>Emacs29.1から、LSPクライアントとしてEglotが標準搭載されるようになりま
した。今迄は<a
href="https://github.com/emacs-lsp/lsp-mode/">lsp-mode</a>を使っていたのですが、そもそもあまりきちんと使えて
いなかったのでこの機に一旦eglotに移ってみようと思います。</p>
<h1 id="前提">前提</h1>
<ul>
<li>筆者自身、普段そこまでLSPサーバーの機能を使用せずにコーディングしています</li>
<li>複雑な設定等の移行の参考にはならない可能性があります</li>
</ul>
<h1 id="現在のlsp-modeの設定">現在のlsp-modeの設定</h1>
<p>私はパッケージマネージャーとして<a
href="https://github.com/conao3/leaf.el">conao3/leaf.el</a>を使用しているので、その設定を載せます。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(leaf lsp-mode
  :commands lsp
  :ensure t
  :hook
  (sh-mode-hook . lsp)
  (haskell-mode-hook . lsp)
  (kotlin-mode-hook . lsp)
  (c++-mode . lsp)
  :custom
  (lsp-keymap-prefix .  &quot;M-l&quot;)
  :bind
  (&quot;M-l&quot;. nil)
  )
</code></pre>
</div>
<p>割とシンプル。いくつかのmodeでlspコマンドを実行するのと、lspで用いる
prefix keyを"M-l"にしているだけです。これをEglot用に写していきます。</p>
<h1 id="lsp-modeの無効化">lsp-modeの無効化</h1>
<p>lsp-modeを完全に消してしまってもいいのですが、一旦eglotの使い勝手を見
るという意味でlsp-modeも無効にしつつ置いておくことにします。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(remove-hook &#39;sh-mode-hook &#39;lsp)
(remove-hook &#39;sh-mode-hook lsp)
(remove-hook &#39;haskell-mode-hook lsp)
(remove-hook &#39;kotlin-mode-hook lsp)
(remove-hook &#39;c++-mode lsp)
</code></pre>
</div>
<h1 id="Eglotの設定">Eglotの設定</h1>
<p>まずはhookを設定して…後は特にすることなし!!!…え???</p>
<p>EglotはLSPクライアントとしての機能を提供するために、独自のコマンドでは
なく「Emacsで良く使われている他のパッケージ」を用いるので、lsp-modeと
同じキー配置にしたいのでなければキーマップの設定もほぼ要らないと思いま
す。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(leaf eglot
  :hook
  (sh-mode-hook . eglot)
  (haskell-mode-hook . eglot)
  (kotlin-mode-hook . eglot)
  (c++-mode . eglot)
  )
</code></pre>
</div>
<h1 id="lsp-modeのコマンドとの対応">lsp-modeのコマンドとの対応</h1>
<p>正直に言うと私自身あまりきちんとlsp-modeを使っていないのですが、代替コ
マンド(と思われる)の一覧を残しておきます。</p>
<p>尚この表は<a
href="https://emacs-lsp.github.io/lsp-mode/page/keybindings/">lsp-modeのkeybindingsドキュメント</a>で扱われているもののうち、
外部パッケージとの連携を必要としないもののみに絞っています。</p>
<table class="ui celled table">
<thead>
<tr class="header">
<th>Description</th>
<th>lsp-modeコマンド</th>
<th>eglotコマンド</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Start server</td>
<td>lsp</td>
<td><code>eglot</code></td>
</tr>
<tr class="even">
<td>Restart server</td>
<td>lsp-workspace-restart</td>
<td><code>eglot-reconnect</code></td>
</tr>
<tr class="odd">
<td>Shutdown server</td>
<td>lsp-workspace-shutdown</td>
<td><code>eglot-shutdown</code></td>
</tr>
<tr class="even">
<td>Describes current session</td>
<td>lsp-describe-session</td>
<td></td>
</tr>
<tr class="odd">
<td>Disconnect the buffer from the language server keeping the server
running.</td>
<td>lsp-disconnect</td>
<td>-</td>
</tr>
<tr class="even">
<td>format this document.</td>
<td>lsp-format-buffer</td>
<td><code>eglot-format-buffer</code>, <code>eglot-format</code> with no
region</td>
</tr>
<tr class="odd">
<td>format the region, or if none is selected, the current line.</td>
<td>lsp-format-region</td>
<td><code>eglot-format</code></td>
</tr>
<tr class="even">
<td>Add new project root to the list of workspace folders.</td>
<td>lsp-workspace-folders-add</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Remove project root from the list of workspace folders.</td>
<td>lsp-workspace-folders-remove</td>
<td>-</td>
</tr>
<tr class="even">
<td>Remove project root from the workspace blacklist.</td>
<td>lsp-workspace-blacklist-remove</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Toggle code-lens overlays.</td>
<td>lsp-lens-mode</td>
<td>-</td>
</tr>
<tr class="even">
<td>Toggle client-server protocol logging.</td>
<td>lsp-toggle-trace-io</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Toggle symbol highlighting.</td>
<td>lsp-toggle-symbol-highlight</td>
<td>-</td>
</tr>
<tr class="even">
<td>Toggle minor mode for showing information for current line in
sideline. (requires <code class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-sideline-mode</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Toggle minor mode for showing hover information in child frame.
(requires <code class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-doc-mode</td>
<td>-</td>
</tr>
<tr class="even">
<td>Toggle signature auto activate.</td>
<td>nil</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Toggle on type formatting.</td>
<td>nil</td>
<td>-</td>
</tr>
<tr class="even">
<td>Find definitions of the symbol under point.</td>
<td>lsp-find-definition</td>
<td><code>xref-find-definitions</code></td>
</tr>
<tr class="odd">
<td>Find references of the symbol under point.</td>
<td>lsp-find-references</td>
<td><code>xref-find-references</code></td>
</tr>
<tr class="even">
<td>Find implementations of the symbol under point.</td>
<td>lsp-find-implementation</td>
<td><code>xref-find-references</code>,
<code>eglot-find-implementation</code></td>
</tr>
<tr class="odd">
<td>Find type definitions of the symbol under point.</td>
<td>lsp-find-type-definition</td>
<td><code>xref-find-references</code>,
<code>eglot-find-typeDefinition</code></td>
</tr>
<tr class="even">
<td>Find declarations of the symbol under point.</td>
<td>lsp-find-declaration</td>
<td><code>xref-find-references</code>,
<code>eglot-find-declaration</code></td>
</tr>
<tr class="odd">
<td>Find all meaningful symbols that match pattern.</td>
<td>xref-find-apropos</td>
<td>-</td>
</tr>
<tr class="even">
<td>Display the type signature and documentation of the thing at
point.</td>
<td>lsp-describe-thing-at-point</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Activate signature help.</td>
<td>lsp-signature</td>
<td>-</td>
</tr>
<tr class="even">
<td>Trigger display hover information popup and hide it on next
typing.</td>
<td>lsp-ui-doc-glance</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Rename the symbol (and all references to it).</td>
<td>lsp-rename</td>
<td><code>eglot-rename</code></td>
</tr>
<tr class="even">
<td>Perform the source.organizeImports code action, if available.</td>
<td>lsp-organize-imports</td>
<td><code>eglot-code-action-organize-imports</code></td>
</tr>
<tr class="odd">
<td>Execute code action.</td>
<td>lsp-execute-code-action</td>
<td><code>eglot-code-actions</code></td>
</tr>
<tr class="even">
<td>Highlight symbol at point.</td>
<td>lsp-document-highlight</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Peek definitions to the identifier at point. (requires <code
class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-peek-find-definitions</td>
<td>-</td>
</tr>
<tr class="even">
<td>Peek references to the identifier at point. (requires <code
class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-peek-find-references</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Peek implementation locations of the symbol at point. (requires
<code class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-peek-find-implementation</td>
<td>-</td>
</tr>
<tr class="even">
<td>Peek symbols in the workspace. (requires <code
class="verbatim">lsp-ui</code>)</td>
<td>lsp-ui-peek-find-workspace-symbol</td>
<td>-</td>
</tr>
</tbody>
</table>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Wed, 16 Aug 2023 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2023-08-16-emacs-move-from-lsp-mode-to-eglot.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2023-07-20-latex-japanese-article-to-pdf</title>
    <link>https://cj-bc.github.io/blog/posts/2023-07-20-latex-japanese-article-to-pdf.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>LaTeXで日本語PDF文書を書く時の走り書きメモ</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on July 20, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on July 20, 2023
	</div>

	

	
	<a title="All pages tagged &#39;latex&#39;." href="/tags/latex.html" class="ui tag label">latex</a><a title="All pages tagged &#39;pdf&#39;." href="/tags/pdf.html" class="ui tag label">pdf</a>
	
      </div>

    <div class="description">
      <p>時間があまりないが、忘れると困るレベルに苦手だったLaTeXで日本語を含んだPDFが出力出来たので走り書きのメモ。
後にきちんと書く。</p>
<p>とりあえず <a
href="https://texwiki.texjp.org/?LaTeX入門">texwiki.texjp.org</a>
読んどけば、大学で習ってない民でも結構なんとかなる。なんと2023年でも更新されていてありがたい。</p>
<h1 id="環境">環境</h1>
<p>archlinux上でTeXLiveを使っている。</p>
<h1 id="とりあえずPDFにする">とりあえずPDFにする</h1>
<p><code>YOUR_FILE.tex</code> から <code>YOUR_FILE.pdf</code>
を作成するためには</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre
class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> platex YOUR_FILE</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> dvipdfmx YOUR_FILE</span></code></pre></div>
</div>
<h1 id="独自のstyファイルを使う">独自のstyファイルを使う</h1>
<p><code>TEXMFHOME/tex/latex</code> ないし
<code>TEXMFLOCAL/tex/latex</code> 以下に <code>sty</code>
ファイルを置き、 <code>sudo mktexlsr</code> すればよい。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre
class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> tlmgr conf</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="va">TEXMFHOME</span><span class="op">=</span>/home/me/texmf</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="va">TEXMFLOCAL</span><span class="op">=</span>/usr/local/share/texmf:/usr/share/texmf</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span></code></pre></div>
</div>
<h1 id="BibTeX">BibTeX</h1>
<p><a
href="https://texwiki.texjp.org/?文献引用">https://texwiki.texjp.org/?文献引用</a></p>
<p>4回コマンドを実行する。
<strong>TeXファイルとBibTeXファイルの名前は拡張子以外合わせるぽい？</strong></p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb3" data-org-language="sh"><pre
class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> platex YOUR_FILE</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> pbibtex YOUR_FILE</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> platex YOUR_FILE</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> platex YOUR_FILE</span></code></pre></div>
</div>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Thu, 20 Jul 2023 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2023-07-20-latex-japanese-article-to-pdf.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2023-06-02-yozakura-mia-as-valorant-agent</title>
    <link>https://cj-bc.github.io/blog/posts/2023-06-02-yozakura-mia-as-valorant-agent.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>夜桜みあVALORANTエージェント化計画</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on June  2, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on July 12, 2023
	</div>

	

	
	<a title="All pages tagged &#39;夜桜みあ&#39;." href="/tags/%E5%A4%9C%E6%A1%9C%E3%81%BF%E3%81%82.html" class="ui tag label">夜桜みあ</a>
	
      </div>

    <div class="description">
      <h1 id="はじめに">はじめに</h1>
<p>みあちゃんお誕生日おめでとうございます!!!! (この記事は<a
href="https://twitter.com/yozakura_mia">夜桜みあ</a>ちゃんの2023年度お誕生日のリスナー有志お祝い企画の参加記事です)</p>
<p>「夜桜みあxバトルもの」ということで、みあちゃんをVALORANTのエージェントにした場合どうなるんやろか？
というのをふと思い立ったので考えてみました。尚、思った以上に難航してしまい完成まで出来ていないのですが、一旦出来た範囲でということで…!!</p>
<p>又、この記事では制作過程(思考過程)に関しても纏めてあるため謎に長くなっています。最終的な結果のみ見た
い場合は、冒頭のみを見れば十分だと思います。残りは私の趣味です。</p>
<h1 id="根本的なアイデア">根本的なアイデア</h1>
<p>「夜桜みあの世界観と性格を、"VALORANTのエージェントとして"ゲームに落とし込んだらどうなるだろうか？」
というのが根本的なアイデアです。そのため、夜桜みあの持つ世界観のみならず、VALORANTの世界に入り込んで
も違和感がないもの、というのを目指しています。</p>
<h1 id="(未)完成版: エージェント「夜桜みあ」">(未)完成版:
エージェント「夜桜みあ」</h1>
<p>ロールはセンチネル。</p>
<h2 id="シグネチャーアビリティ: キャットス">シグネチャーアビリティ:
キャットス</h2>
<p>猫耳魔法のキャットス。使用すると猫耳が生え、前方左右n°ずつ(調整必要、30・30とか？)の範囲の聴力が強化
される。再使用で解除する。再使用までのクールダウンはない。</p>
<p>キャットス発動中は、前方以外からの音をクロネコ宅急便からの音以外ほぼ遮断する。</p>
<p>聴力強化範囲でオペレーターの音が鳴ると、一時的に音が一切聞こえなくなる。又、キャットス中はフラッシュ
を喰らった際の持続時間が増加する。</p>
<p>発動すると、詠唱の一部が他のエージェントにも聞こえる。これは「アビリティが実行されていることを知れる
必要がある」から。</p>
<ol>
<li><p>使い道の例</p>
<ol>
<li><p>防衛時</p>
<p>他のアビリティを設置した後、メインに向けて発動しておくことで、進行を把握出来る。又、敵が来ているのを
把握した上でアレスを用いた壁抜きをすることも可能。(夜桜みあはアレスがすきだったため)</p></li>
</ol></li>
<li><p>詳細</p>
<p>猫耳を用いるので遠くの音まで聞こえるようになる一方、指向性が強くなるので他の範囲が聞こえなくなってい
ます。クロネコ宅急便の音は魔法で繋がっているので聞こえます。</p>
<p>ゲームバランス的な観点から言うと、「音」が大分重要なゲームである以上そこを強化するアビリティはコスト
も相応にしておく必要があると考えました。又、サイファーのカメラと同じように即座に使えるアビリティであ
る関係で、スキル中も周りの音が聞こえているとどこでも使えてしまい強すぎます。
そこで、視界方向以外の情報を下げることで、「目的としたエリア以外の情報を取りすぎない」「きちんと安全
確保されていない場所で使いづらくなる」というリスクを与えることを目的としています。</p></li>
<li><p>このスキルへの対策</p>
<p>敵がキャットスを発動している場合、安全に音を立てられる範囲が狭まります。対策としてオペレーターを先に
撃つことで一時的に無効化出来ますが、オペレーターの存在を開示する必要があります。ゆっくりとドライで上
がっていくことが一番です。</p>
<p>(正直、プロの試合とか見てるとドライよくあるからこれスキル弱すぎるか…?って思ったりする)</p></li>
</ol>
<h2 id="アビリティ: フローレ">アビリティ: フローレ</h2>
<p>設置型アビリティ。設置した場所に桜吹雪を起こし、その上を通るエージェントの視界を悪化させると共にスロー
効果を付与する。視界悪化はあくまでも花吹雪による物理的なものであるので、例えばレイナのウルトやヴァイ
パーウルトのように敵を強調表示するスキルには効果がない。</p>
<p>敵を検知して自動で発動するか、それとも手動にするか、などは今現在詰められていない。</p>
<h2 id="アビリティ: クロネコ宅急便">アビリティ: クロネコ宅急便</h2>
<p>設置型アビリティ。アラボ等と同じような立ち位置…なはず。</p>
<p>(正直最初からあるけど一番内容が決まっていない存在)</p>
<h2 id="アルティメット: 「みあこんぐ!」/「おつみあ~!」">アルティメット:
「みあこんぐ!」/「おつみあ~!」</h2>
<p>名前が使いたかっただけみたいな所があり…はい…どちらの名前もアルティメットぽくて良いなというので記
録を残しておきます。他スキルとシナジーのあるウルトが上手く思い付いていないので現状未実装です。ただ、
夜桜みあがヴァイパーのウルトすきらしかったので領域展開系にしたいなとは思っています(詳しくは後述)</p>
<h1 id="ボツアイデアs">ボツアイデアs</h1>
<p>せっかくなのでボツ案を先に出しておこうと思います。</p>
<h2 id="コンセプト: フラッシュ系スキル持ちセンチネル">コンセプト:
フラッシュ系スキル持ちセンチネル</h2>
<p>既存センチネルの特徴を出してみた時、</p>
<ul>
<li>サイファー → モク代わりのケージ →
コントローラー寄りのセンチネル</li>
<li>チェンバー → ？？？とりあえずデュエリスト寄りのセンチネル</li>
<li>キルジョイ → モロトフ代わりのナノスワ</li>
<li>セージ → モロトフと似た役割(進行止め、顔出し阻止)のスローオーブ</li>
</ul>
<p>といった具合に定番アビリティの「モロトフ」「モク」を持つエージェントはいるものの、フラッシュのみは持
つエージェントが存在していなかったので思い付きました。</p>
<p>しかしセンチネルの「足止めする必要がある」という役割を考えると、一瞬しか効果のない上に避けることので
きるフラッシュは強いアビリティとはいえないと思われます。そういうことでボツとなりました。
恐らくフラッシュ系持ちのセンチネルは実装されないんじゃなかろうか…?</p>
<h2 id="キャットス: 聴覚情報を視覚的に表示する">キャットス:
聴覚情報を視覚的に表示する</h2>
<p>猫耳による聴覚強化をどう行うか、というのを考えていた時の案の一つ。イメージとしては、サイファーやリコ
ン等のように表示する感じ。視覚的に表示するのは強そうに見えるが、慣れているプレイヤーは大体頭の中で補
完出来ている範囲の情報でしかなくて弱いかなと判断した。又、敵対した際に「新たな戦略を練る必要性」を生
み出すことが出来ないし、対策のしようがないので却下。</p>
<h2 id="キャットス: 聴覚情報をミニマップに表示">キャットス:
聴覚情報をミニマップに表示</h2>
<p>こちらも同じく聴覚強化の案の一つ。赤点表示のようなものを考えていたが、上記とほぼ同様の理由(慣れたプ
レイヤーに恩恵はないし、敵対した際の対策が打てない)ので却下</p>
<h2 id="フローレ: フラッシュアビリティ化">フローレ:
フラッシュアビリティ化</h2>
<p>ディジーと同じように、画面にエフェクトを乗せる形での視界妨害アビリティとする案。センチネルにするとなっ
た際、センチネルとの相性が悪いので却下。(詳しくは制作過程にて)</p>
<h2 id="フローレ: スモーク化">フローレ: スモーク化</h2>
<p>桜吹雪が舞うことで視界を悪化させ、進行を食い止める案。コントローラーではないので、しっかりとしたスモー
クにすることは出来ないのでそこまで進行を食い止めることが出来そうにはなく、他のアビリティ候補に遅延出
来そうなものが少ないので却下。遅延スキルとして使いたいので。</p>
<h2 id="フローレ: 敵重火器の制圧">フローレ: 敵重火器の制圧</h2>
<p>敵の重火器に桜を咲かせ、一定期間銃撃が行えないようにする案。今迄存在していないタイプのアビリティでは
あるが、これとKAY/Oのナイフ類を組み合わせた場合の絶望感が半端ないので却下。アビリティが使えなくとも
フィジカルで勝てる、最終的にはフィジカルが大事なゲーム性だと感じたため。</p>
<p>あと純粋に実装が難しそう(唐突な現実)</p>
<h2 id="クロネコ: タレット的運用">クロネコ: タレット的運用</h2>
<p>設置型にし、敵を見付けると攻撃してくれるという案。「キルジョイとの差別化は？」という課題があるのと、
敵になった際に猫を撃つの嫌だな…という個人的感情から却下。</p>
<h2 id="クロネコ: 索敵">クロネコ: 索敵</h2>
<p>スカイの犬やウィングマン的に索敵を行う案。ロールが固まりきっておらず、イニシエーターにするか悩んでい
た時の案であり、センチネルとした際に却下。</p>
<h2 id="クロネコ: デバフ要員">クロネコ: デバフ要員</h2>
<p>「黒猫が前をよぎるとよくない」みたいな伝承から、設置された場所を敵が通るとデバフを与える、という案。
クロネコをデバフ付与系の設置アビリティにしてしまうと、エリアを見るためのアビリティが無くなっていしま
うので却下。</p>
<p>ちなみに個人的にはあの伝承を全く信じていないし、黒猫かわいくてすきなのでいつも「なんでそんな酷い噂を
言うの…」と思っている。</p>
<h1 id="制作過程">制作過程</h1>
<p>なんか綺麗な流れみたいに解説を書きますが、実際の過程としては、暇があれば色々考えてメモして調べて考え
て…というのを繰り返しているので全くもってこの通りではないです。</p>
<h2
id="面白そうかどうかのアイデア出し">面白そうかどうかのアイデア出し</h2>
<p>まずは、そもそもこれが面白そうかどうか？を探りたかったので難しいことを考えずにひたすらアイデアを出し
ました。一番初期に出たアイデアは以下の通りです。</p>
<ol>
<li><p>能力系</p>
<ul>
<li>フローレ！はスモークになりそう。桜が散って目をふさぐ</li>
<li>もしくは、一種のフラッシュにも。</li>
<li>スペシャルは「みあこんぐ！」とか？
<ul>
<li>「おつみあ~!」の方がかわいい説はある</li>
<li>どっちもその名前が使いたいだけ</li>
</ul></li>
<li>キャットス(猫耳魔法)は聴覚強化に使えそう？
<ul>
<li>全方位聴力強化だと強すぎるので、向いている方n°だけ強化、とか？</li>
</ul></li>
<li>キルジョイのイメージ強いけどスカイとかも使うのでイニシもあり
<ul>
<li>ヴァロキャラとしてのコンセプトも大事</li>
<li>猫耳、黒猫さんのことを考えると情報管理系？音情報に焦点を当ててみたいかも</li>
<li>そうするとフェイドが天敵になる（アストラのウルトもか）</li>
</ul></li>
<li>「一緒に戦うとか戦略的に戦うとかすき」とのことなので、黒猫さんをその立ち位置に置きたい</li>
<li>黒猫さんが敵を探知するタイプのセンチ？</li>
<li>「黒猫さんは買うものではない」ので黒猫さん関連をシグネチャアビリティにして、他は魔力を使うので購入にする…？</li>
<li>本来は詠唱魔法だが、戦闘中に詠唱する余裕はないので即時に発動できるような魔法道具を使っている。本来何も買わなくてもいいはずなのに買うのは、その魔法道具を買っているから。</li>
</ul>
<p>キャラクターのコンセプトを研究したい</p>
<ul>
<li>ソーヴァ: 発見</li>
<li>セージ: 遅延</li>
<li>キルジョイ:</li>
</ul></li>
</ol>
<h2
id="VALORANTのエージェントの作り方の調査">VALORANTのエージェントの作り方の調査</h2>
<p>漠然としたアイデアは出て、方向性として面白そうだなとなったのできちんと落とし込む作業に入ります。夜桜
みあのFAであると同時に、VALORANTのFAでもあるので、きちんとVALORANTにも失礼がないように&amp;現実的である
ようにするためVALORANTのエージェントの制作過程を調べることとしました。</p>
<p>ここで、VALORANT公式ブログがとても役に立ちます。何故か知らないですがVALORANTは割とブログに開発陣の話
がよく載っており、マップの作成時の話やバランス調整に何を考えているのか、はたまた「<a
href="https://playvalorant.com/ja-jp/news/dev/how-we-got-to-the-best-performing-valorant-servers-since-launch/">VALORANTがいかにし
てリリース以降最高のサーバー環境を実現したか</a>」といった完全に技術屋に寄ったものまで公開されています
(個人的にすごく楽しい)。そして勿論その一環として、エージェント開発時のエピソードや解説等が一部公開さ
れているのです。</p>
<p>ということで、主に参考になったものについてメモを見てみましょう。</p>
<ol>
<li><p><span class="todo TODO">TODO</span>
VALORANTエージェント開発エピソード：フェイド</p>
<p><a
href="https://playvalorant.com/ja-jp/news/game-updates/valorant-agent-insights-fade/">https://playvalorant.com/ja-jp/news/game-updates/valorant-agent-insights-fade/</a></p>
<p>イニシエーターのエージェント「フェイド」を開発する際に、どのようなことを考え、どのような理由で現在の
アビリティや特性へ至ったのかを解説している記事です。作業プロセスについては後述する資料と比べるとそこ
まで書かれていないですが、「いかにして既存エージェントと差別化したか」「どうやって立ち位置を持たせた
か」「エージェントの世界観とゲーム性をどう合わせ持たせたか」等を読み取ることが出来ます。</p>
<ul>
<li>フェイドは、現状ソーヴァしかいない偵察兵を増やすために考案された</li>
<li>「悪夢」というのはとても特徴的な「力の源」となる</li>
<li>役割が被らない様に、「遠距離・高精度」なソーヴァに対して「近距離・局所的」なスキルを持たせた</li>
<li>コンセプトとして「賞金首狩り」を持ち、獲物を追い詰めてゆく</li>
<li>ナイトフォールの「広範囲」なアビリティは、「イニシエーターの標準的アルティメット」</li>
</ul></li>
<li><p><span class="todo TODO">TODO</span> エージェントデザインの過程 //
Dev Diaries - VALORANT - YouTube</p>
<p><a href="https://www.youtube.com/watch?v=Nv09DpFkfb4">YouTube
link</a></p>
<p>キルジョイとレイナを題材として、エージェントをデザインする際の全般的な話が聞けます。これは、実際にど
のような流れでエージェントを制作しているのかを知るのに役立ちます。例えば、最初に何を意識しているのか、
どういった事を念頭に置きながら制作しているのか、など。</p>
<ol>
<li><p>ターゲットプレイヤーの決定</p>
<ul>
<li>まずは「誰がターゲットプレイヤーなのか」を考えるところから始める。
<ul>
<li>「誰が、どんな人が使いたいと思うべきなのか」 &amp;
「何故そうなるべきなのか」</li>
</ul></li>
<li>レイナの場合は、「キルを獲得することを楽しみ、最多キルでチームに貢献するのがすきな人」がターゲット</li>
<li>この時点では「どのようなアビリティーを持つか」を考えていない。</li>
</ul></li>
<li><p>Roster Impactを考慮したテストプレイの実装</p>
<p>テストプレイの段階では、「そのエージェントが実際にゲームプレイにどのような影響を与えるのか」を考えま
す。エージェントは、「新しい展開を生み出し」たり、「新しい課題を生み出し」たり、「新しい構成を生み出
し」たりする必要があり、「使うプレイヤーが楽しいだけ」や「何かかっこいいもの」ではいけません。</p>
<p>キルジョイを例に取ると、セージは「遅延すること」に長けたセンチネルで、サイファーは「広範囲を管理する
こと」に長けたセンチネル。それに対し、キルジョイは「サイトを要塞化し、相手にリスクを負わせる」ことに
長けたセンチネルです。ちなみにこの動画当時、まだチェンバーはいない模様です。</p>
<p>同じセンチネルでも、大分異なるプレイスタイルとなるように設計されているのです。
守りつつキルを取ることが主体となります。</p></li>
<li><p>何の「戦術ツール」を持つか？を決める: 妨害アビリティは必須</p>
<p>アイデンティティとなるスキルの他に、戦術ツールを持つ必要がある。
視界を塞いだりなどの敵を妨害するためのツールはどのキャラクターにも必要なものとなる。何故なら、それら
は必ず必要なアビリティとなるためそれを持たないとピックされづらくなってしまうから。</p></li>
<li><p>テストプレイをする</p>
<p>「ターゲットプレイヤー」に楽しんでもらえるかをテストする必要があります。ここで大切なのは、「ターゲッ
トプレイヤーではない人に気に入られる必要はない」ということです。例えば、キルジョイは計画を建ててサイ
トの要塞化を行い防衛しつつ戦うのがすきなプレイヤーをターゲットにしていますが、その人達には「沢山キル
を取りたいプレイヤー」をターゲットとするレイナは恐らく刺さらないでしょう。</p>
<p>テストプレイ中では、色々な変更が入ります。最初から上手くいくことはありません。</p></li>
<li><p>ゲームバランスの調整:</p>
<p>ゲームバランスを調整する際は、キャラクターの強さを簡単に調整出来るようなコントロールパネルを用意して
いるようです。「キャラクターのアイデンティティを変えるのは最終手段」と言っていますが、これは恐らくア
ビリティの考え直しみたいな話をしているのかな？と思っています。</p>
<p>スキルのバランスは「持つスキル全体を考慮して」考えており、個々のスキル毎に考えているわけではないよう
です。</p></li>
<li><p>まとめ: 新たなエージェントを加えることの意味</p>
<p>新たなエージェントを加えるというのは、「新しい可能性」を追加するということ。昔ながらの爆破ゲーにある
ような「戦術ループ」は基礎としてあり、そこへ「回復」「ダッシュ」「視界を遮る」といった例外を加えるの
がvALORANT流、ということのようです。</p></li>
</ol></li>
<li><p>パッチ5.12でのチェンバーの変更について</p>
<p><a
href="https://playvalorant.com/ja-jp/news/game-updates/valorant-chamber-changes-for-patch-5-12/">https://playvalorant.com/ja-jp/news/game-updates/valorant-chamber-changes-for-patch-5-12/</a></p>
<ul>
<li>エージェント設計の原則として、「カウンタープレイ」「計画性」がある。
<ul>
<li>カウンタープレイは、(恐らく)そのエージェントへの対抗手段・対策手段のこと</li>
<li>計画性は、アビリティを適当に使っていれば勝てる、みたいなのを排除すること</li>
<li>チェンバーの例では、「トレードマークの範囲制限により、敵チェンバーの位置が推測しやすくなる」など</li>
</ul></li>
<li>「裏取りの監視はサイファーの強みであるべきで、センチネル全員の基本性能ではありません」</li>
<li>「エージェントのアビリティーは戦略サイクルの各段階にさまざまな影響を与えますが、アビリティーの実行
は明確であり、敵に反撃の余地を与えるものでなければいけません」
<ul>
<li>対抗手段は用意する必要がある</li>
<li>アビリティを実行していることが分かる必要がある(レイナのウルトが叫ぶのとかはそれ？)</li>
</ul></li>
<li>チェンバーは「高精度を誇り、リスクを取ってエリアを制圧するセンチネル」というアイデンティティー</li>
</ul></li>
<li><p>ネオン＆ゼリの共同開発秘話</p>
<p><a
href="https://playvalorant.com/ja-jp/news/dev/co-developing-neon-zeri/">https://playvalorant.com/ja-jp/news/dev/co-developing-neon-zeri/</a></p>
<ul>
<li>「パワーの源」という概念があり、VALORANTの場合は「テクノロジー」と「レディアント」</li>
<li>「ネオン及びゼリが何故速いのか」を説明する「パワーの源」が必要だった</li>
</ul></li>
</ol>
<h2 id="お断り">お断り</h2>
<p>先程の「エージェントの作り方」で得た知識を元に、「実際に存在しうるようなエージェント」に仕立てる作業
をするわけですが、本来のエージェントを作る順序とは大きく異なり</p>
<ul>
<li>先にエージェントの人物像が存在する</li>
<li>ある程度スキルとして使いたいもの(魔法等)が存在する</li>
</ul>
<p>という条件が存在しています。そのため、ある程度の制約と妥協(「力の源」の定義や、スキルと人物像とのマッ
チ具合等)は行う必要があります。(優先順位的に、"夜桜みあであること"が最上位であるため)</p>
<h2
id="ターゲットプレイヤー・コンセプトを決める">ターゲットプレイヤー・コンセプトを決める</h2>
<p>まずは、「どういったプレイを好む人に使われてほしいのか」ということを考える必要があります。これに関し
ては、「夜桜みあを実装したい」という目的上「夜桜みあに使われてほしい」ということになります。しかしそ
れだとペルソナとしては曖昧すぎるので、具体的に「どういったプレイスタイルを好んでいるか」を推測してい
く必要があります。</p>
<ol>
<li><p>プレイスタイルの推測: ピックデータ</p>
<p>雰囲気や後述する言動からどういうエージェントを使っているかは分かるものの、せっかくなのできちんとデータが取りたい…と
いうことで、今迄のVALORANT配信で使われている(or
「使える」と言っている)エージェントを調べた結果がこれです。</p>
<p>補足:</p>
<ul>
<li>本来、時系列上の変化も考慮するべきですが、
<del>やりかたよく分からない</del>
ちょっとそこまでやるのはやりすぎな気がするのでやりません</li>
<li>合わせピックか否かも考慮しようとしましたが、どちらにせよピックプールは一定だったので考慮せずとも良いと判断しました。</li>
<li>サンプル数が少ないため、ランク・アンレ双方混ぜて集計しています。</li>
<li><a
href="https://www.youtube.com/watch?v=BDGYmgotBy4">フラッシュ縛りの回</a>は除外しています。</li>
<li>統計学んだはずだけど苦手分野なのできちんと意味のあるデータになっていない可能性があります、ユルシテ。</li>
</ul>
<table id="配信上のエージェントピック" class="ui celled table">
<thead>
<tr class="header">
<th>エージェント</th>
<th>ロール</th>
<th>ピック数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>キルジョイ</td>
<td>センチネル</td>
<td>8</td>
</tr>
<tr class="even">
<td>セージ</td>
<td>センチネル</td>
<td>6</td>
</tr>
<tr class="odd">
<td>スカイ</td>
<td>イニシエーター</td>
<td>1</td>
</tr>
<tr class="even">
<td>ヴァイパー</td>
<td>コントローラー</td>
<td>1</td>
</tr>
<tr class="odd">
<td>レイズ</td>
<td></td>
<td>1</td>
</tr>
</tbody>
</table>
<table id="ピックプール" class="ui celled table">
<thead>
<tr class="header">
<th>マップ</th>
<th>セージ</th>
<th>キルジョイ</th>
<th>スカイ</th>
<th>ヴァイパー</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>フラクチャー</td>
<td></td>
<td>x</td>
<td>x</td>
<td>x</td>
</tr>
<tr class="even">
<td>スプリット</td>
<td>x</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>バインド</td>
<td>x</td>
<td>x</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>ブリーズ</td>
<td>x</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>これより、データからも圧倒的にキルジョイが多用されており、センチネルがメインであることが分かります。</p>
<ol>
<li><p>データソース</p>
<ul>
<li><a
href="https://www.youtube.com/watch?v=j7YSVkeDQcc">【#VALORANT女子】#み♡も
は戦場でお茶会をします（？）【Vtuber】 - YouTube</a>
<ul>
<li>Fracture(スカイ), Split(セージ)</li>
</ul></li>
<li><a
href="https://www.youtube.com/watch?v=0PiBto5cMH8">【VALORANT】はじめてのソロ…！🔫爆弾のおつかいをします【Vtuber】
- YouTube</a>
<ul>
<li>Icebox(ヴァイパー), Haven(キルジョイ)</li>
</ul></li>
<li><a
href="https://www.youtube.com/watch?v=nrKoFExkQTE">【VALORANT】じょしヴァロラント♡みあおぢさんが武器買ってあげちゃおうね…【#Vtuber】
- YouTube</a>
<ul>
<li>Bind(キルジョイ), Fracture(キルジョイ), ブリーズ(セージ)</li>
</ul></li>
<li><a
href="https://www.youtube.com/watch?v=TEs3Erk6DyQ">【VALORANT】配信で初めてのヴァロ！！フルパで臨みます…！【Vtuber】
- YouTube</a>
<ul>
<li>Bind(キルジョイ)、 Icebox(キルジョイ), Fracture(セージ)</li>
</ul></li>
<li><a
href="https://www.youtube.com/watch?v=Gai4AE9IB0g">【VALORANT】~うぇーいヴァロラントアンレ！~【魂のソウル】
- YouTube</a> (本人枠なし)
<ul>
<li>Bind(セージ), Accent(レイズ), Haven(セージ), Accent(キルジョイ)</li>
</ul></li>
<li><a
href="https://www.youtube.com/watch?v=h2tOU36GWvk">【VALORANT】~フルパヴァロラントうぃずそらいろのふたり~【魂のソウル】【夜桜みあ】【裏咲無形】【夢河かのん】【踊場そよぎ】
- YouTube</a>
<ul>
<li>[2022-01-11 Tue]</li>
<li>TODO ブリーズ(キルジョイ), Accent(キルジョイ), Fracture(セージ)</li>
</ul></li>
</ul></li>
</ol></li>
<li><p>プレイスタイルの推測: 雑談より</p>
<p><a href="https://youtu.be/iP0eZqrorZc?t=3650">#み♡も
マシュマロ雑談企画</a>
ですきなロールに関する話がいくつか聞けます。「キルジョイがすき」「センチネ
ルが全体的にすき」「元々、何かと一緒に戦うのとか戦略的に戦うとかがすき」という発言があるのは大分参考
になります。</p>
<p>ゴリ押しヴァイパーウルトで領域展開するのがすきらしい。「呼んでくれたらセンチネルかデュエやるよ!」と
言っていたり、「イニシも若干使う」と言っていたり、なんだかんだ色々使いはするらしい。なるほど。</p></li>
<li><p>結論</p>
<p>上記のデータより、</p>
<ul>
<li>戦略的に戦うのがすき</li>
<li>何かと一緒に戦うのがすき</li>
<li>ゴリ押し領域展開がすき</li>
</ul>
<p>ということがわかります。正直これだとまだセンチネルという枠組み以上に絞り込むことは難しい(ゴリ押し領
域展開だけは特徴として出ているけれども)です。もう少し色々な配信を見直したりプレイスタイルの観察等す
ればよかったのですが、 <del>流石に気持ち悪い気がする</del>
そこまでの時間がないので、ここから先は自由に決定出
来るものとすることにしました。</p></li>
</ol>
<h2
id="VALORANT視点でコンセプトを決める">VALORANT視点でコンセプトを決める</h2>
<p>立ち回りについて自由に決定出来るといわれても困るので(オープンクエスチョンが苦手)、ここはVALORANT側の
視点から考えてみます。</p>
<p>「エージェントデザインの過程」の動画によると、新しく追加されるエージェントは、「現在の環境に何かする」
必要があります。動画では、「新しい展開を生み出し」たり、「新しい課題を生み出し」たり、「新しい構成を
生み出し」たり等が例示されていました。そこで、既存のセンチネルの分析をし、現状存在していないコンセプ
トが何か無いかを探っていくことにします。</p>
<ol>
<li><p>エージェントの分析: 戦術ツールの視点から</p>
<p>「エージェントデザインの過程」によると、各エージェントは戦術ツールを持つ必要があります。ここでの戦術
ツールは、具体的に明示されていませんでしたが、恐らくCSGOでいうところのフラッシュ・モク・モロトフ等に
値するスキルのことだと考えられます。</p>
<ol>
<li><p>キルジョイ(モロトフ系)</p>
<p>ナノスワームがモロトフの役割を果たしています。これは、相手の侵入を防ぎ、時間を稼ぐのに良いツールだと
思われます。又、攻撃側の際は解除阻止にも使えるやつですね。</p></li>
<li><p>サイファー(モク系)</p>
<p>サイバーケージをモク代わりに使うことが出来ます。上手い人のプレイをたまに見ると、ケージを上手く使って
射線を変えるなどの立ち回りをしたりすることがよくあります。</p></li>
<li><p>セージ(モロト…フ…?)</p>
<p>よく考えたらよく分かんなくなってきた。足止めスキルとして持つスローオーブがまさに戦術ツールであり、相
手の居場所を限定して入ってこれなくするという観点からモロトフ系と同様な役割を持っているように思われま
す。</p></li>
<li><p>チェンバー(？？？)</p>
<p>こいつ何…??</p></li>
</ol></li>
<li><p>エージェントの分析: 想定されている立ち回り</p>
<ol>
<li><p>キルジョイ: 籠城して守る</p>
<p>サイト中を徹底して</p></li>
<li><p>サイファー: 情報収集・裏取り警戒</p>
<p>「パッチ5.12でのチェンバーの変更について」にて「裏取りの監視はサイファーの強みであるべき」と書かれて
おり、攻撃時は</p></li>
<li><p>セージ: ひたすらに遅延</p>
<p>壁を建てるのもスローオーブも遅延用途。ヒールオーブも蘇生も「遅延要員を倒させない」という面で遅延用ス
キルと考えられます。情報を取ったり、サイト中で耐えるという動きは仕辛いけれどその分「侵入されるまでの
遅延をする」のが役割なのではないかなと考えています。</p></li>
<li><p>チェンバー: 安全なワンピック</p>
<p>「パッチ5.12でのチェンバーの変更について」にて「高精度を誇り、リスクを取ってエリアを制圧するセンチネ
ル」というアイデンティティであるとの記述があります。</p>
<p>基本的には「生きのこること」が大切となるセンチネルに於いて、ハイリスクを冒すのは難しいように思うもの
の、そこをランデブーで補完しているんでしょうね。</p></li>
</ol></li>
<li><p>エージェントの分析: ○○寄りのセンチネル</p>
<p>割と区分として、</p></li>
</ol>
<h2
id="センチネルにふさわしいスキルセットとは？">センチネルにふさわしいスキルセットとは？</h2>
<ol>
<li><p>センチネルの特徴: 状態異常系スキルを持つ</p>
<p>あらためて考えてみると、センチネルは必ず状態異常を付与するアビリティを所持しています。セージはスロー
オーブ、キルジョイはアラームボット、チェンバーはトレードマークとツール・ド・フォース、サイファーはト
ラップワイヤーです。</p>
<p>ここからは推測ですが、センチネルの役割の一つに「ラッシュを止める」というものがある関係で「状態異常に
させることでエントリーしづらくさせる」という目的があるのではないかなと考えられます。</p></li>
<li><p>「センチネル」の役回りから考える、必要な能力</p></li>
</ol>
<h2 id="TODO カウンタープレイの実装"><span class="todo TODO">TODO</span>
カウンタープレイの実装</h2>
<p>まだできてない。</p>
<h2 id="スキルの価格帯設定">スキルの価格帯設定</h2>
<h1 id="TODO おわりに"><span class="todo TODO">TODO</span> おわりに</h1>
<p>おわりなので、本題とはちょっと離れた話をします。オフトピってﾔﾂ。</p>
<p>実は企画を聞いた当初は、普通に絵を書こうとしていました。バトルもの、ということでみあちゃんが良くやっ
ているゲームと組み合わせるか~~？？と思っていたのですが、最近よくやっているらしいApexは本家やっていな
くてよくわからんのでVALORANTを選択しました。でも絵が壊滅的にダメ(1年に1回しか描かないのでそれはそう)
で、行き詰まってしまい…色々悩んでいた時にこのアイデアが降ってきたので取り掛かってみた次第です。</p>
<p>ちなみに途中でアレス(夜桜みあがよく持つ武器)のスキンを考えようともしていましたが、そちらもデザインセ
ンスが間に合いませんでしたgg。</p>
<p>エージェント化の話に戻すと。5/21あたりに夢からアイデアを貰い突発的に考え始め(実は<a
href="https://twitter.com/cj_bc_sd/status/1660042761163378688">このツイート</a>がそう)、
「や~!おもしろそうだな!!色々アイデア浮かんだし!!!できそう!!!!」とかナメてかかったわけですが、見事に
間に合いませんでした…アイデハは浮かんでも、きちんと作ろうとするとボツになることの繰り返し…バラン
ス考えたりキャラ被り考えたりするのって難しいですね。本職の人やっぱすげぇや…</p>
<p>て、そうではなくて。や、そう("本職の人すごい")ではあるんですけど。色々考えること多くて、実は大分焦っ
て纏めた本文なのですけどとても楽しかったです。きちんと作り込めなくて悔しさは大分ある…リベンジした
い。</p>
<p>ちなみに作業中に大分色々なエージェントについて理解が深まったりしたのでとても楽しかったです。まぁ完全
に趣味みたいなことしてるのをFAちゅてええのか…?感はあるけど、お絵描きすきな人がお絵描きでFA作るのと
同じ感覚なので許されるやろ、しらんけど、という感情でいます。</p>
<h1 id="参考資料">参考資料</h1>
<ul>
<li><a
href="id:53c89468-dc7d-4597-a068-95112d654d46">エージェントデザインの過程
– VALORANT</a></li>
</ul>
<h2 id="夜桜みあの統計">夜桜みあの統計</h2>
<ol>
<li><p>エージェントピック</p>
<p>本来なら時系列を考慮したりするべきではありますが、正直統計は苦手なので</p>
<ul>
<li><a href="https://youtu.be/0PiBto5cMH8?t=1081">2022/06/17 - 18:01</a>
モクはヴァイパーしか出来ない</li>
</ul>
<ol>
<li><p>その他喋っていたこと</p></li>
<li><p>生データ</p></li>
</ol></li>
<li><p>マップ</p>
<table class="ui celled table">
<thead>
<tr class="header">
<th>マップ</th>
<th>得意下手</th>
<th>使うエージェント</th>
<th>情報日時</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>アイスボックス</td>
<td>苦手</td>
<td>キルジョイ・ヴァイパー</td>
<td>[2022-06-17 Fri]</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>モクはヴァイパーのみ</p></li>
</ol>
<h2 id="夜桜みあ・のあ情報">夜桜みあ・のあ情報</h2>
<ol>
<li><p>魔法: キャットス</p>
<p>猫耳を生やす魔法。猫耳を生やすことしか分かっていない。</p>
<p>1:11:46 <a
href="https://www.youtube.com/watch?v=l9nmg9zMDBA&amp;t=4168s">https://www.youtube.com/watch?v=l9nmg9zMDBA&amp;t=4168s</a></p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>夜空に舞う妖精よ 音を奏でるハープよ かわいいを創造し
&lt;不明瞭区間&gt; 姿を変えん キャットス</p>
</blockquote>
</div></li>
<li><p>魔法: フローレ</p>
<p>桜を咲かせる魔法。一応長文詠唱が存在するが、割と「フローレ!」だけでも詠唱は可能らしい。</p></li>
<li><p>黒猫</p>
<p>リスナーの呼称。</p></li>
<li><p>杖</p>
<p>あくまでもアクセサリーとしての存在であり、杖がなくとも詠唱で魔法が使える。ハープの部分は一応音が鳴る。</p>
<p>夜桜みあ曰く杖は重いらしい。コントローラーよりか重い。それはとても重いな。うん。</p>
<p>1:15:14 <a
href="https://www.youtube.com/watch?v=l9nmg9zMDBA&amp;t=4168s">https://www.youtube.com/watch?v=l9nmg9zMDBA&amp;t=4168s</a></p></li>
</ol>
<h2 id="Valorantの統計">Valorantの統計</h2>
<ol>
<li><p>スキルの価格帯</p>
<p>マダデキテナイ…orz</p></li>
</ol>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Fri, 02 Jun 2023 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2023-06-02-yozakura-mia-as-valorant-agent.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2023-05-03-ip-command-difference-between-ip-tuntap-add-name-and-dev</title>
    <link>https://cj-bc.github.io/blog/posts/2023-05-03-ip-command-difference-between-ip-tuntap-add-name-and-dev.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>ip tuntap addコマンドのdevとnameの違い</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on May  3, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on May  3, 2023
	</div>

	

	
	<a title="All pages tagged &#39;ip&#39;." href="/tags/ip.html" class="ui tag label">ip</a><a title="All pages tagged &#39;tuntap&#39;." href="/tags/tuntap.html" class="ui tag label">tuntap</a><a title="All pages tagged &#39;linux&#39;." href="/tags/linux.html" class="ui tag label">linux</a>
	
      </div>

    <div class="description">
      <p>ニッチですが、どちらも同じ効果がありそうだったので気になって調べてみたメモ。</p>
<h1 id="結論: 恐らくほぼ違いはない">結論: 恐らくほぼ違いはない</h1>
<p>実装を軽く見た感じ、処理上ではほぼ同じ扱いをしているように見えます。</p>
<p><a
href="https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/tree/ip/iptuntap.c#n176">iptuntap.c
« ip - iproute2/iproute2.git - Iproute2 routing commands and
utilities</a> の <code>parse_args</code> の実装が以下です</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb1"><pre
class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>matches<span class="op">(*</span>argv<span class="op">,</span> <span class="st">&quot;dev&quot;</span><span class="op">)</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>                        NEXT_ARG<span class="op">();</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>get_ifname<span class="op">(</span>ifr<span class="op">-&gt;</span>ifr_name<span class="op">,</span> <span class="op">*</span>argv<span class="op">))</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>                                invarg<span class="op">(</span><span class="st">&quot;</span><span class="sc">\&quot;</span><span class="st">dev</span><span class="sc">\&quot;</span><span class="st"> not a valid ifname&quot;</span><span class="op">,</span> <span class="op">*</span>argv<span class="op">);</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>matches<span class="op">(*</span>argv<span class="op">,</span> <span class="st">&quot;name&quot;</span><span class="op">)</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>                                NEXT_ARG<span class="op">();</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>matches<span class="op">(*</span>argv<span class="op">,</span> <span class="st">&quot;help&quot;</span><span class="op">)</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>                                usage<span class="op">();</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>ifr<span class="op">-&gt;</span>ifr_name<span class="op">[</span><span class="dv">0</span><span class="op">])</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>                                duparg2<span class="op">(</span><span class="st">&quot;name&quot;</span><span class="op">,</span> <span class="op">*</span>argv<span class="op">);</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> <span class="op">(</span>get_ifname<span class="op">(</span>ifr<span class="op">-&gt;</span>ifr_name<span class="op">,</span> <span class="op">*</span>argv<span class="op">))</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>                                invarg<span class="op">(</span><span class="st">&quot;</span><span class="sc">\&quot;</span><span class="st">name</span><span class="sc">\&quot;</span><span class="st"> not a valid ifname&quot;</span><span class="op">,</span> <span class="op">*</span>argv<span class="op">);</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span></code></pre></div>
</div>
<h1 id="処理の追跡">処理の追跡</h1>
<h2
id="ip tuntap add dev DEVNAME の処理"><code>ip tuntap add dev DEVNAME</code>
の処理</h2>
<p>先程の部分から、実際に実行される動作は以下です。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb2"><pre
class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>NEXT_ARG<span class="op">();</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="op">(</span>get_ifname<span class="op">(</span>ifr<span class="op">-&gt;</span>ifr_name<span class="op">,</span> <span class="op">*</span>argv<span class="op">))</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        invarg<span class="op">(</span><span class="st">&quot;</span><span class="sc">\&quot;</span><span class="st">dev</span><span class="sc">\&quot;</span><span class="st"> not a valid ifname&quot;</span><span class="op">,</span> <span class="op">*</span>argv<span class="op">);</span></span></code></pre></div>
</div>
<p><code>NEXT_ARG</code> は、~argv~
の指す先をインクリメントして次の引数を示すように
します。その際、必要な数引数がなかった場合はエラーを吐くようにしてある
ようです。(<a
href="https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/tree/include/utils.h#n51">実際のコード</a>)</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb3"><pre
class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define NEXT_ARG</span><span class="op">()</span><span class="pp"> </span><span class="cf">do</span><span class="pp"> </span><span class="op">{</span><span class="pp"> argv</span><span class="op">++;</span><span class="pp"> </span><span class="cf">if</span><span class="pp"> </span><span class="op">(--</span><span class="pp">argc </span><span class="op">&lt;=</span><span class="pp"> </span><span class="dv">0</span><span class="op">)</span><span class="pp"> incomplete_command</span><span class="op">();</span><span class="pp"> </span><span class="op">}</span><span class="pp"> </span><span class="cf">while</span><span class="op">(</span><span class="dv">0</span><span class="op">)</span></span></code></pre></div>
</div>
<p><code>invarg</code>
はエラー処理用の関数で、入ったらエラーを出力してそのまま終了 するので(<a
href="https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/tree/lib/utils.c#n792">utils.c
« lib - iproute2/iproute2.git - Iproute2 routing commands and
utilities</a>) 今は特に考慮しなくて良いかと。</p>
<p><code>get_ifname</code>
は第二引数に与えられた文字列が有効なものかを確認し、有効
であれば第一引数に与えられたポインタに書き込みます(<a
href="https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/tree/lib/utils.c#n846">utils.c
« lib - iproute2/iproute2.git - Iproute2 routing commands and
utilities</a>)。</p>
<p>なので、ここでやっていることとしては、argvが <code>DEVNAME</code>
を指すようにし た状態で
<code>get_ifname(ifr-&gt;ifr_name, \*argv)</code>
を呼び出しています。</p>
<h2
id="ip tuntap add name DEVNAME の処理"><code>ip tuntap add name DEVNAME</code>
の処理</h2>
<p>実際に動作する部分は以下(不要なelse文を除去してあります)</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb4"><pre
class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="op">(</span>matches<span class="op">(*</span>argv<span class="op">,</span> <span class="st">&quot;name&quot;</span><span class="op">)</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>        NEXT_ARG<span class="op">();</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="op">...</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="op">(</span>ifr<span class="op">-&gt;</span>ifr_name<span class="op">[</span><span class="dv">0</span><span class="op">])</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        duparg2<span class="op">(</span><span class="st">&quot;name&quot;</span><span class="op">,</span> <span class="op">*</span>argv<span class="op">);</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="op">(</span>get_ifname<span class="op">(</span>ifr<span class="op">-&gt;</span>ifr_name<span class="op">,</span> <span class="op">*</span>argv<span class="op">))</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        invarg<span class="op">(</span><span class="st">&quot;</span><span class="sc">\&quot;</span><span class="st">name</span><span class="sc">\&quot;</span><span class="st"> not a valid ifname&quot;</span><span class="op">,</span> <span class="op">*</span>argv<span class="op">);</span></span></code></pre></div>
</div>
<p><code>matches(*argv, "name") == 0</code> は真になるので
<code>NEXT_ARG</code> は呼ばれます。 <code>duparg2</code> は<a
href="https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/tree/lib/utils.c#n806">引数の重複時等用のもエラー処理用の関数</a>なので、本筋とは外れ
るので一旦置きます。そうすると、実質実行されるのは以下のようなコードと
なります。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb5"><pre
class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>NEXT_ARG<span class="op">();</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="op">(</span>get_ifname<span class="op">(</span>ifr<span class="op">-&gt;</span>ifr_name<span class="op">,</span> <span class="op">*</span>argv<span class="op">))</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        invarg<span class="op">(</span><span class="st">&quot;</span><span class="sc">\&quot;</span><span class="st">name</span><span class="sc">\&quot;</span><span class="st"> not a valid ifname&quot;</span><span class="op">,</span> <span class="op">*</span>argv<span class="op">);</span></span></code></pre></div>
</div>
<p>これは、 <code>ip tuntap add dev DEVNAME</code>
の処理と全く同じです…!!</p>
<h1 id="細かな違い">細かな違い</h1>
<p>先程のエラー処理を考えると、 <code>dev</code>
オプション(オプションなのか？)は複
数付けることが出来、最後に与えた値が有効な値となりそうです。他方、
<code>name</code>
は複数与えることが出来ず、そうした場合はエラーを返します。</p>
<p>又、devの後にnameを与えるとエラーになり、その逆(nameの後にdevを与える)
とdevの値で上書きされるものと考えられます。</p>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Wed, 03 May 2023 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2023-05-03-ip-command-difference-between-ip-tuntap-add-name-and-dev.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2023-04-21-emacs-migemo-setup</title>
    <link>https://cj-bc.github.io/blog/posts/2023-04-21-emacs-migemo-setup.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>Emacsでmigemoを使う環境を整える</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on April 21, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on May  3, 2023
	</div>

	

	
	<a title="All pages tagged &#39;emacs&#39;." href="/tags/emacs.html" class="ui tag label">emacs</a>
	
      </div>

    <div class="description">
      <h1 id="migemoとは">migemoとは</h1>
<p><a
href="https://github.com/koron/cmigemo/blob/master/doc/README_j.txt">migemo</a>とは、</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>Migemo はローマ字のまま日本語をインクリメンタル検索するため
のツールです。 かな漢字変換をすることなく日本語のインクリメン
タル検索を快適に行うことができます。</p>
<p>– <a href="http://0xcc.net/migemo/">http://0xcc.net/migemo/</a></p>
</blockquote>
</div>
<p>プログラマーでない人向けに少し解説をすると、プログラミングをしている際は、文字入力を英語を入力するモードに
切り替えていることが多く、その状態で日本語を検索しようとすると「一度日本語入力モードに切り替えて検索し、そ
の後元に戻す」というひとてまが発生します。migemoを用いると、その必要がなく「英語入力モードのままで日本語
を検索出来る」ようになります。
どうやらオリジナルのものは2000年に公開されているという割かし古いプログラムではありますが、その実装の一つ
である<a
href="https://github.com/koron/cmigemo">koron/cmigemo</a>は2022年でも更新が受け入れられているなどまだ使われているプログラムのようです。</p>
<p>名前は割と昔、SKKを調べ始めた頃から見ていましたがこれまで試してきておらず、ここにきて試してみようと思い
立った備忘録です。</p>
<h1 id="環境構成">環境構成</h1>
<p>migemo自体は「ローマ字から日本語の正規表現を組み立てて返す」という動作をするだけのプログラムです。そのた
め、実際に使用するには他のプラグイン等と組み合わせる必要があります。
今回は以下のような環境で使うための設定をしていきます</p>
<ul>
<li>Emacs (28.2)</li>
<li>ivy-swiper</li>
<li>AZIK使用したい</li>
</ul>
<h1 id="作業工程">作業工程</h1>
<h2 id="cmigemoのインストール">cmigemoのインストール</h2>
<p>まずはmigemo本体のインストールをします。migemoの実装は本家の<a
href="http://0xcc.net/migemo/">Ruby版</a>とその<a
href="https://www.kaoriya.net/software/cmigemo/">C版</a>とがあります。
なんかC版であるcmigemoの方が良いと見た気がするので、cmigemoを入れていきます。</p>
<p>archlinuxでは、AURにあるので取ってきます(勿論AURなので自己責任で…)</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre
class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">yay</span> <span class="at">-S</span> cmigemo-git</span></code></pre></div>
</div>
<h2 id="migemo.elの設定">migemo.elの設定</h2>
<p>Emacsから使用出来るようにするために、<a
href="https://github.com/emacs-jp/migemo">emacs-jp/migemo</a>を利用します。私は
<a
href="https://github.com/conao3/leaf.el">conao3/leaf.el</a>を使用しているので、以下のようにして設定を追記します。大
体の設定値は<a
href="https://github.com/emacs-jp/migemo#sample-configuration">Sample-configuration</a>のままにしています。</p>
<p>但し設定を変えた後は一度 <code>migemo-kill</code>
しないと反映されないため、既に migemoを使っていた場合は一度
<code>migemo-kill</code> を挟むようにしています。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(leaf migemo
  :ensure t
  :require t
  :custom
  (migemo-command . &quot;cmigemo&quot;)
  (migemo-options . &#39;(&quot;-q&quot; &quot;--emacs&quot;))
  (migemo-coding-system . &#39;utf-8-unix)
  (migemo-dictionary . &quot;/usr/share/migemo/utf-8/migemo-dict&quot;)
  (migemo-user-dictionary . nil)
  (migemo-regex-dictionary . nil)
  :config
  (when (and (processp migemo-process)
             (eq (process-status migemo-process) &#39;run))
    (migemo-kill))
  (migemo-init)
  )
</code></pre>
</div>
<p>この時点で、 <code>migemo-forward</code>
関数などが使用可能なはずです。</p>
<h2 id="ivy-migemo">ivy-migemo</h2>
<p>デフォルトの <code>migemo.el</code>
ではisearch用のラッパーは用意されていますが、
私はivy(swiper)を利用しているのでそれに対応させるためのパッケージを入
れます。これも設定は<a
href="https://github.com/ROCKTAKEY/ivy-migemo">ROCKTAKEY/ivy-migemo</a>のREADMEから直接使用しています。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(leaf ivy-migemo
  :after ivy migemo
  :ensure t
  :require t
  :custom
  (ivy-re-builders-alist . &#39;((t . ivy--regex-fuzzy)
                             (swiper . ivy-migemo-regex-fuzzy)
                             )))
</code></pre>
</div>
<p>私はfuzzy-matchingがすきなので <code>ivy--regex-fuzzy</code> /
<code>ivy-migemo-regex-fuzzy</code> を利用していますが、お好み で
<code>ivy-migemo-regex-plus</code> も用意されているようです。</p>
<h2 id="avy-migemo">avy-migemo</h2>
<p>avy-migemoはavyをmigemo対応させるやつ…なようですが、大分古くて更新が止まっているのでそのままだと上
手く動きません。今、夜で眠いのでまた対応させる気が出たら対応させて追記します。</p>
<p>(ちなみに色々先人は</p>
<h2 id="AZIK配列に対応させる">AZIK配列に対応させる</h2>
<p><a
href="https://asiamoth.com/200608052313/">MigemoでAZIK！（「mpxo」で「猛暑」を検索）
| 亜細亜ノ蛾</a>を参考にすると、辞書ファイルの
<code>roma2hira.dat</code>
を編集すれば良いとのことです。該当のファイルはarchlinux上では
<code>/usr/share/migemo/utf-8/roma2hira.dat</code>
にあるので、それを置き換えることにします。</p>
<p>上記参考記事ではAZIK for ATOK 2006 for
Windowsの辞書をゴニョゴニョしたとのことですが、該当リンクが切
れていることとライセンスの問題が何か面倒だった気がすること、実装によって微妙に変換規則が異なっている
ことがあること、どうせなら自分で使っている辞書を使えばいいや!と思ったことから、手元にあるlibskkが使
用している辞書(というか変換テーブル)をゴニョることにしました。</p>
<ol>
<li><p>変換テーブルの作成</p>
<p>libskkが使用している、ローマ字とかな文字の変換テーブルはJSONで書かれています。そのため、jqとsedでゴ
ニョればいい感じに取り出すことが出来ます。(ちなみに同様にして、tcodeやkzik等等他の配列へも対応出来る
はずです)</p>
<p>以下に、私の環境で使用したスクリプトを記載します。尚、エスケープ漏れ？のせいでファイルのうち一つが適
切なJSONとして認識されなかったため、前処理をしています。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb4" data-org-language="sh"
data-results="file"
data-file="/tmp/2023-04-23-emacs-migemo-setup--azik-array"><pre
class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">cat</span> /usr/share/libskk/rules/default/rom-kana/default.json /usr/share/libskk/rules/azik/rom-kana/default.json <span class="kw">|</span> <span class="fu">sed</span> <span class="st">&quot;s;</span><span class="dt">\\\\</span><span class="st">&#39;;&#39;;&quot;</span> <span class="kw">|</span> <span class="ex">jq</span>  <span class="at">-s</span> <span class="st">&#39;.[0] * .[1] | .define.&quot;rom-kana&quot; | map_values(.[1]) | to_entries | map_values(&quot;\(.key) \(.value)&quot;)&#39;</span>  <span class="kw">|</span> <span class="fu">sed</span> <span class="st">&#39;/^[^ ]\+/d;s/^ \+\|[&quot;,]//g&#39;</span></span></code></pre></div>
</div>
<ol>
<li><p>スクリプトの解説</p>
<ol>
<li><p>不正なクオーテーションの削除</p>
<p><code>/usr/share/libskk/rules/default/rom-kana/default.json</code>
にある以下の記述が、どうやらパースに失敗して
いるようです。エスケープ用のバックスペースが無ければ上手く動いたので、sedで取り除いています。</p>
<p>変換前:</p>
<div class="ui segment">
<div class="ui top right attached label">
javascript
</div>
<div class="sourceCode" id="cb5" data-org-language="js"><pre
class="sourceCode javascript SourceCode"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>{</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;n</span><span class="sc">\&#39;</span><span class="st">&quot;</span><span class="op">:</span> [<span class="st">&quot;&quot;</span><span class="op">,</span> <span class="st">&quot;ん&quot;</span> ]<span class="op">,</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
</div>
<p>変換後:</p>
<div class="ui segment">
<div class="ui top right attached label">
javascript
</div>
<div class="sourceCode" id="cb6" data-org-language="js"><pre
class="sourceCode javascript SourceCode"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>{</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;n&#39;&quot;</span><span class="op">:</span> [<span class="st">&quot;&quot;</span><span class="op">,</span> <span class="st">&quot;ん&quot;</span> ]<span class="op">,</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
</div>
<p>スクリプト該当部分:</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb7" data-org-language="sh"><pre
class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sed</span> <span class="st">&quot;s;</span><span class="dt">\\\\</span><span class="st">&#39;;&#39;;&quot;</span></span></code></pre></div>
</div></li>
<li><p>複数のrom-kana JSONのマージ</p>
<p>libskkでは、既存のJSONファイルをマージすることが出来ます。これにより、例えばAZIKでは基本的な配列は
そのままに拡張することが出来ます。これを使用するために、複数のJSONファイルをjqでマージします。
本来は、目的のファイル(<code>/usr/share/libskk/rules/azik/rom-kana/default.json</code>)の
<code>include</code> を読み、必
要なファイルを自動的に判別すると汎用性が出て良いと思うのですが、今回はそれは面倒なので必要なファイル
を直書きします。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb8" data-org-language="sh"><pre
class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ex">jq</span>  <span class="at">-s</span> <span class="st">&#39;.[0] * .[1] | .define.&quot;rom-kana&quot; | map_values(.[1]) | to_entries | map_values(&quot;\(.key) \(.value)&quot;)&#39;</span></span></code></pre></div>
</div>
<p>参考:</p>
<ul>
<li><a
href="https://dev.classmethod.jp/articles/merge_multiple_json/">複数のjsonファイルをjqを使ってmergeする
| DevelopersIO</a></li>
</ul></li>
<li><p>JSON書式から、migemoで使用可能な形式への変換</p>
<p>migemoで使用する形式は、</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>[ローマ字]&lt;空白&gt;[変換後の文字]</p>
</blockquote>
</div>
<p>となっています。この形式へと変換します。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb9" data-org-language="sh"><pre
class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sed</span> <span class="st">&#39;/^[^ ]\+/d;s/^ \+\|[&quot;,]//g&#39;</span></span></code></pre></div>
</div></li>
</ol></li>
</ol></li>
</ol>
<h1 id="トラブルシューティング">トラブルシューティング</h1>
<h2
id="migemo.elの設定を変えても反映されない">migemo.elの設定を変えても反映されない</h2>
<p>設定を変えた後は、一度 <code>(migemo-kill)</code> した後に
<code>(migemo-init)</code> しなおす必要があります。</p>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Fri, 21 Apr 2023 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2023-04-21-emacs-migemo-setup.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2023-04-12-pandoc-library-how-to-write-yaml-metadata-with-markdown-writer</title>
    <link>https://cj-bc.github.io/blog/posts/2023-04-12-pandoc-library-how-to-write-yaml-metadata-with-markdown-writer.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>PandocのwriteMarkdownでメタデータをYAML出力する</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on April 12, 2023</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on May  3, 2023
	</div>

	

	
	<a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" class="ui tag label">haskell</a><a title="All pages tagged &#39;pandoc&#39;." href="/tags/pandoc.html" class="ui tag label">pandoc</a>
	
      </div>

    <div class="description">
      <h1 id="やりたいこと">やりたいこと</h1>
<p>Pandocに限らず、いくつかのMarkdownを扱えるプログラムでは、Markdownファイルの冒頭にYAML形式のメタデータを持つことが
出来ます(frontmatterというやつです)。</p>
<p>例えば、以下のような:</p>
<div class="ui segment">
<div class="ui top right attached label">
markdown
</div>
<div class="sourceCode" id="cb1"><pre
class="sourceCode markdown SourceCode"><code class="sourceCode markdown"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">---</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="an">title:</span><span class="co"> PandocのwriteMarkdownでメタデータをYAML出力する</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="an">author:</span><span class="co"> cj.bc_sd</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="an">tags:</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">- haskell</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">- pandoc</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">---</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="fu"># Header1</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>...</span></code></pre></div>
</div>
<p>そこで、Pandocを用いて他のフォーマットから変換する際にこのYAML形式のメタデータを付与したいです。</p>
<h1 id="Tl;Dr">Tl;Dr</h1>
<ul>
<li><code>WriterOptions.writerExtensions</code> (<a
href="https://hackage.haskell.org/package/pandoc-3.1.2/docs/Text-Pandoc-Options.html#t:WriterOptions">src</a>)
に <code>Ext_yaml_metadata_block</code> (<a
href="https://pandoc.org/MANUAL.html#extension-yaml_metadata_block">解説</a>)を追加する</li>
<li><code>WriterOptions.writerTemplate</code>
に何かテンプレートを設定する(<code>Nothing</code> じゃなければ良い)
<ul>
<li>デフォルトのものを <code>compileDefaultTemplate "markdown"</code>
(<a
href="https://hackage.haskell.org/package/pandoc-3.1.2/docs/Text-Pandoc-Templates.html#v:compileDefaultTemplate">src</a>)で取ってきても良い</li>
<li>その場合、 <code>PandocPure</code> を使っている場合は適切に
<code>stFiles</code> を弄る必要がある(後述)</li>
</ul></li>
</ul>
<h1 id="解説">解説</h1>
<h2 id="前提: Pandocをライブラリとして利用して変換する">前提:
Pandocをライブラリとして利用して変換する</h2>
<p>Pandocをライブラリとして使う場合、以下のような流れで変換処理を行うことが出来ます:</p>
<ol>
<li><a
href="https://hackage.haskell.org/package/text-2.0.1/docs/Data-Text-IO.html#v:readFile"><code>Data.Text.IO.readFile</code></a>等を用いてファイルの内容を
<code>Text</code> として読み込みます</li>
<li><a
href="https://hackage.haskell.org/package/pandoc-3.1.2/docs/Text-Pandoc-Readers.html"><code>Reader</code></a>
のうちの一つを用いて元のコンテンツをパースして <a
href="https://hackage.haskell.org/package/pandoc-types-1.23/docs/Text-Pandoc-Definition.html#t:Pandoc"><code>Pandoc</code></a>型の値を得ます</li>
<li>必要なら <code>Pandoc</code> 型に処理をします</li>
<li><a
href="https://hackage.haskell.org/package/pandoc-3.1.2/docs/Text-Pandoc-Writers.html"><code>Writer</code></a>のうちの一つを用いて、
<code>Text</code> 型にできます</li>
</ol>
<p>今回は、書き出しはMarkdown形式で行うので、以下のようになります。</p>
<p><code>Reader</code>
は元のフォーマットに対応したものであれば何でも良いのですが、この記事では
元のフォーマットとしてOrgを想定し、 <code>readOrg</code>
を使用します。</p>
<p>又、 <a
href="https://hackage.haskell.org/package/pandoc-3.1.2/docs/Text-Pandoc-Class.html#v:runPure"><code>runPure</code></a>
は <a
href="https://hackage.haskell.org/package/pandoc-3.1.2/docs/Text-Pandoc-Class.html#v:runIO"><code>runIO</code></a>
にしても良いです。 <code>runPure</code> の場合は <code>runIO</code>
よりも少し工程が増えますが、純粋性を持たせることは出来ます。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb2"><pre
class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text.IO</span> <span class="kw">as</span> <span class="dt">TIO</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  rawContent <span class="ot">&lt;-</span> TIO.readFile <span class="st">&quot;/tmp/FILENAME.org&quot;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  txt <span class="ot">&lt;-</span> handleError <span class="op">.</span> runPure <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    pandocDoc <span class="ot">&lt;-</span> readOrg def rawContent</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    writeMarkdown def pandocDoc</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  TIO.writeFile <span class="st">&quot;/tmp/dist.md&quot;</span> txt</span></code></pre></div>
</div>
<p>以降は、これに変更を加えていく形で進めていこうと思います。</p>
<h2
id="Extyamlmetadatablock 拡張を有効化する">Ext<sub>yamlmetadatablock</sub>
拡張を有効化する</h2>
<p>まず、デフォルトの <code>WriterOptions</code>
ではYAML形式のメタデータブロックは生成されません。 <a
href="https://pandoc.org/MANUAL.html#extension-yaml_metadata_block"><code>Ext_yaml_metadata_block</code></a>を有効化する必要があります。
尚、</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb3"><pre
class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text.IO</span> <span class="kw">as</span> <span class="dt">TIO</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  rawContent <span class="ot">&lt;-</span> TIO.readFile <span class="st">&quot;/tmp/FILENAME.org&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  txt <span class="ot">&lt;-</span> handleError <span class="op">.</span> runPure <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> writerOpts <span class="ot">=</span> def { writerExtensions <span class="ot">=</span> extensionsFromList [<span class="dt">Ext_yaml_metadata_block</span>]}</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    pandocDoc <span class="ot">&lt;-</span> readOrg def rawContent</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    writeMarkdown writerOpts pandocDoc</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  TIO.writeFile <span class="st">&quot;/tmp/dist.md&quot;</span> txt</span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
diff
</div>
<div class="sourceCode" id="cb4"><pre
class="sourceCode diff SourceCode"><code class="sourceCode diff"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    txt &lt;- handleError . runPure $ do</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="va">+     let writerOpts = def { writerExtensions = extensionsFromList [Ext_yaml_metadata_block]}</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>      pandocDoc &lt;- readOrg def rawContent</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="st">-     writeMarkdown def pandocDoc</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="va">+     writeMarkdown writerOpts pandocDoc</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div>
<h2
id="Writerのテンプレートを明示的に指定する">Writerのテンプレートを明示的に指定する</h2>
<p>何故か、MarkdownのwriterではYAMLのfrontmatterを出力するためには明示的にテンプレートを指定する必要があります。
これは、<a
href="https://github.com/jgm/pandoc/blob/effca7f7cf7afeb381154f77e33a16b7b19c02b7/src/Text/Pandoc/Writers/Markdown.hs#L225-L229">テンプレートが明示的に指定されている時のみ
<code>Ext_yaml_metadata_block</code>
を確認する</a>ようになっているためです。</p>
<p>(…ドウシテ…??)</p>
<p>まぁ、これを行えばきちんとfrontmatterが出力されるはずです!</p>
<ol>
<li><p><code>PandocIO</code> モナド内で行う場合</p>
<p><code>PandocIO</code> モナドを用いている場合は、 <a
href="https://hackage.haskell.org/package/pandoc-3.1.2/docs/Text-Pandoc-Templates.html#v:compileDefaultTemplate"><code>compileDefaultTemplate</code></a>
を使ってテンプレートを取り出し、それを素直に <code>writerTemplate</code>
に設定すれば良いです。尚、Org文書ではメタデータを埋め込めないため <a
href="https://hackage.haskell.org/package/pandoc-types-1.23/docs/src/Text.Pandoc.Builder.html#setMeta"><code>setMeta</code></a>
を用いてコード内からメタデータを設定しています(<code>setMeta (T.pack "author") "test" pandocDoc</code>)</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb5"><pre
class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Builder</span> (setMeta)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text.IO</span> <span class="kw">as</span> <span class="dt">TIO</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text</span> <span class="kw">as</span> <span class="dt">T</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  rawContent <span class="ot">&lt;-</span> TIO.readFile <span class="st">&quot;/tmp/FILENAME.org&quot;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  result <span class="ot">&lt;-</span> runIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    tmpl <span class="ot">&lt;-</span> compileDefaultTemplate (T.pack <span class="st">&quot;markdown&quot;</span>)</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> writerOpts <span class="ot">=</span> def { writerExtensions <span class="ot">=</span> extensionsFromList [<span class="dt">Ext_yaml_metadata_block</span>]</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>                         , writerTemplate <span class="ot">=</span> <span class="dt">Just</span> tmpl</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>                         }</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    pandocDoc <span class="ot">&lt;-</span> readOrg def rawContent</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>    writeMarkdown writerOpts <span class="op">$</span> setMeta (T.pack <span class="st">&quot;author&quot;</span>) <span class="st">&quot;test&quot;</span> pandocDoc</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>  txt <span class="ot">&lt;-</span> handleError result</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>  TIO.writeFile <span class="st">&quot;/tmp/dist.md&quot;</span> txt</span></code></pre></div>
</div></li>
<li><p><code>PandocPure</code> モナド内で行う場合</p>
<p><code>PandocPure</code> モナド内で行う場合は、 <code>PandocIO</code>
を用いたコードに加えた変更にプラスして少し手を加える必要があります。
<code>PandocPure</code>
内ではファイルシステムにアクセスすることが出来ず、デフォルトのテンプレートファイルが存在しないので、
そのまま <code>compileDefaultTemplate</code>
してしまうと以下のような実行時エラーが吐かれます。</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>Could not find data file data/data/templates/default.markdown</p>
</blockquote>
</div>
<p>そこで、 <code>PandocPure</code>
内にある仮想ファイルシステム的なものに該当のファイルを追加する必要があります。
そのためには、<a
href="https://hackage.haskell.org/package/pandoc-3.1.2/docs/Text-Pandoc-Class.html#t:PureState"><code>PureState</code></a>
の <code>stFiles</code> を <a
href="https://hackage.haskell.org/package/pandoc-3.1.2/docs/Text-Pandoc-Class.html#v:modifyPureState"><code>modifyPureState</code></a>
で編集します。</p>
<div class="ui segment">
<div class="ui top right attached label">
haskell
</div>
<div class="sourceCode" id="cb6"><pre
class="sourceCode haskell SourceCode"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Builder</span> (setMeta)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text.IO</span> <span class="kw">as</span> <span class="dt">TIO</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text</span> <span class="kw">as</span> <span class="dt">T</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.String</span> (fromString)</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- | デフォルトのマークダウン用テンプレートファイル</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- ファイルの内容は @pandoc -D markdown@ コマンドの出力をそのまま使っています</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="ot">defaultMarkdownTemplate ::</span> <span class="dt">FileInfo</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>defaultMarkdownTemplate <span class="ot">=</span> <span class="dt">FileInfo</span> (<span class="fu">read</span> <span class="st">&quot;2023-06-03 0:00:00UTC&quot;</span>) (fromString content)</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>    content <span class="ot">=</span> <span class="fu">unlines</span> [<span class="st">&quot;$if(titleblock)$&quot;</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$titleblock$&quot;</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;&quot;</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$endif$&quot;</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$for(header-includes)$&quot;</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$header-includes$&quot;</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;&quot;</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$endfor$&quot;</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$for(include-before)$&quot;</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$include-before$&quot;</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;&quot;</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$endfor$&quot;</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$if(toc)$&quot;</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$table-of-contents$&quot;</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;&quot;</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$endif$&quot;</span></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$body$&quot;</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$for(include-after)$&quot;</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;&quot;</span></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$include-after$&quot;</span></span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>                      , <span class="st">&quot;$endfor$&quot;</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>                      ]</span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a>  rawContent <span class="ot">&lt;-</span> TIO.readFile <span class="st">&quot;/tmp/FILENAME.org&quot;</span></span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a>  txt <span class="ot">&lt;-</span> handleError <span class="op">.</span> runPure <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- ファイルを追加します</span></span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a>    files <span class="ot">&lt;-</span> (getsPureState stFiles)</span>
<span id="cb6-42"><a href="#cb6-42" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> dummyDataFiles <span class="ot">=</span> insertInFileTree <span class="st">&quot;data/data/templates/default.markdown&quot;</span> defaultMarkdownTemplate files</span>
<span id="cb6-43"><a href="#cb6-43" aria-hidden="true" tabindex="-1"></a>    modifyPureState (\st <span class="ot">-&gt;</span> st {stFiles <span class="ot">=</span> dummyDataFiles })</span>
<span id="cb6-44"><a href="#cb6-44" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- ^</span></span>
<span id="cb6-45"><a href="#cb6-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-46"><a href="#cb6-46" aria-hidden="true" tabindex="-1"></a>    tmpl <span class="ot">&lt;-</span> compileDefaultTemplate (T.pack <span class="st">&quot;markdown&quot;</span>)</span>
<span id="cb6-47"><a href="#cb6-47" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> writerOpts <span class="ot">=</span> def { writerExtensions <span class="ot">=</span> extensionsFromList [<span class="dt">Ext_yaml_metadata_block</span>]</span>
<span id="cb6-48"><a href="#cb6-48" aria-hidden="true" tabindex="-1"></a>                         , writerTemplate <span class="ot">=</span> <span class="dt">Just</span> tmpl</span>
<span id="cb6-49"><a href="#cb6-49" aria-hidden="true" tabindex="-1"></a>                         }</span>
<span id="cb6-50"><a href="#cb6-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-51"><a href="#cb6-51" aria-hidden="true" tabindex="-1"></a>    pandocDoc <span class="ot">&lt;-</span> readOrg def rawContent</span>
<span id="cb6-52"><a href="#cb6-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-53"><a href="#cb6-53" aria-hidden="true" tabindex="-1"></a>    writeMarkdown writerOpts <span class="op">$</span> setMeta (T.pack <span class="st">&quot;author&quot;</span>) <span class="st">&quot;test&quot;</span> pandocDoc</span>
<span id="cb6-54"><a href="#cb6-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-55"><a href="#cb6-55" aria-hidden="true" tabindex="-1"></a>  TIO.writeFile <span class="st">&quot;/tmp/dist.md&quot;</span> txt</span></code></pre></div>
</div></li>
</ol>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Wed, 12 Apr 2023 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2023-04-12-pandoc-library-how-to-write-yaml-metadata-with-markdown-writer.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>

    </channel>
</rss>
