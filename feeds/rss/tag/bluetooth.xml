<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>CLI! CLI! CLI!</title>
        <link>https://cj-bc.github.io/blog</link>
        <description><![CDATA[Cj-bc's personal blog posts.]]></description>
        <atom:link href="https://cj-bc.github.io/blog/feeds/rss/tag/bluetooth.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 02 May 2022 00:00:00 UT</lastBuildDate>
        <item>
    <title>2022-05-02-elisp-hashtable-key-comparison-method</title>
    <link>https://cj-bc.github.io/blog/posts/2022-05-02-elisp-hashtable-key-comparison-method.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>ElispのHash Tableのキーの一意性確認のための方法について</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on May  2, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on May  4, 2022
	</div>

	

	
	<a title="All pages tagged &#39;elisp&#39;." href="/tags/elisp.html" class="ui tag label">elisp</a><a title="All pages tagged &#39;emacs&#39;." href="/tags/emacs.html" class="ui tag label">emacs</a>
	
      </div>

    <div class="description">
      <h1 id="Hash Tableの種類">Hash Tableの種類</h1>
<p>elispにおいてHash Tableは一つではあるが、キーを比較するための方法は 複数存在する (<a href="help:make-hash-table">help:make-hash-table</a>)</p>
<p>そして、この比較する方法の違いを把握してないと「何故これが重複して存在するの!？」 みたいなことになるので気をつける必要がある。</p>
<p>一応ユーザーが自分で実装することもできるそうだが (<a href="info:elisp#Defining Hash">elisp#Defining Hash</a>の help:define-hash-table-test を参照)、 今回はそれは含めない。</p>
<p>情報源は <a href="info:elisp#Creating Hash">elisp#Creating Hash</a></p>
<h2 id="eql (デフォルト)"><code>eql</code> (デフォルト)</h2>
<p>数字(float若しくはinteger)は <code>equal</code> で等しければ同じと判断され、 <strong>他のオブジェクトは全て等しくなることはない</strong> (!)</p>
<h2 id="equal"><code>equal</code></h2>
<p><code>equal</code> によって判定される。</p>
<h2 id="eq"><code>eq</code></h2>
<p>異なるLispオブジェクトは同じになることはない。</p>
<h1 id="「こういう時は？」">「こういう時は？」</h1>
<h2 id="キーに文字列を使いたい">キーに文字列を使いたい</h2>
<p><strong>デフォルトの <code>eql</code> では決して等しくならない</strong> <code>'equal</code> にする</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(make-hash-table :test &#39;equal)
</code></pre>
</div>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Mon, 02 May 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-05-02-elisp-hashtable-key-comparison-method.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2022-04-21-fomantic-ui-use-custom-site-directory</title>
    <link>https://cj-bc.github.io/blog/posts/2022-04-21-fomantic-ui-use-custom-site-directory.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>Fomantic-UIで'site'に別ディレクトリを使用する際の注意点</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on April 21, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on April 21, 2022
	</div>

	

	
	<a title="All pages tagged &#39;fomantic-ui&#39;." href="/tags/fomantic-ui.html" class="ui tag label">fomantic-ui</a><a title="All pages tagged &#39;blog&#39;." href="/tags/blog.html" class="ui tag label">blog</a>
	
      </div>

    <div class="description">
      <p><code>semantic.json</code> の部分だけ変えたらよさそうに思うが、 <code>theme.config</code> も変える必要があるので注意。</p>
<div class="ui segment">
<div class="ui top right attached label">
javascript
</div>
<div class="sourceCode" id="~semantic.json~ の変更場所"><pre class="sourceCode javascript SourceCode"><code class="sourceCode javascript"><span id="~semantic.json~ の変更場所-1"><a href="#~semantic.json~ の変更場所-1" aria-hidden="true" tabindex="-1"></a>   {</span>
<span id="~semantic.json~ の変更場所-2"><a href="#~semantic.json~ の変更場所-2" aria-hidden="true" tabindex="-1"></a>     <span class="st">&quot;base&quot;</span><span class="op">:</span> <span class="st">&quot;.&quot;</span><span class="op">,</span></span>
<span id="~semantic.json~ の変更場所-3"><a href="#~semantic.json~ の変更場所-3" aria-hidden="true" tabindex="-1"></a>     <span class="st">&quot;paths&quot;</span><span class="op">:</span> {</span>
<span id="~semantic.json~ の変更場所-4"><a href="#~semantic.json~ の変更場所-4" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;source&quot;</span><span class="op">:</span> {</span>
<span id="~semantic.json~ の変更場所-5"><a href="#~semantic.json~ の変更場所-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="~semantic.json~ の変更場所-6"><a href="#~semantic.json~ の変更場所-6" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;site&quot;</span><span class="op">:</span> <span class="st">&quot;src/site&quot;</span><span class="op">,</span></span>
<span id="~semantic.json~ の変更場所-7"><a href="#~semantic.json~ の変更場所-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
conf-javaprop
</div>
<pre id="~theme.config~ の変更場所" class="conf-javaprop SourceCode"><code>
/* Path to site override folder */
@siteFolder  : &#39;src/site&#39;;
</code></pre>
</div>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Thu, 21 Apr 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-04-21-fomantic-ui-use-custom-site-directory.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2022-04-16-emacs-set-different-fonts-for-different-language-letters</title>
    <link>https://cj-bc.github.io/blog/posts/2022-04-16-emacs-set-different-fonts-for-different-language-letters.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>複数のフォントを自然言語毎に使い分ける</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on April 16, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on April 16, 2022
	</div>

	

	
	<a title="All pages tagged &#39;emacs&#39;." href="/tags/emacs.html" class="ui tag label">emacs</a>
	
      </div>

    <div class="description">
      <p>複数の自然言語(特に母国語と英語以外)を使うようになると、 普段使いのフォントではカバーできない文字が出てくると思います。</p>
<p>Emacsでは、どうやら文字毎に使用するフォントを設定することができるようなので その設定をしてみることにします。</p>
<p>今回は例として、韓国語のハングルを使えるようにしたいと思います。</p>
<h1 id="1. フォントを取得してインストールする">1. フォントを取得してインストールする</h1>
<p>これは各自ディストリビューションで異なると思います。</p>
<p>私のarchlinux環境では、 <code>/usr/share/fonts</code> か <code>$HOME/.local/share/fonts</code> 以下にフォントファイルを仕舞えば良いようです。 (詳しくは <a href="https://wiki.archlinux.jp/index.php/フォント設定">archwiki – フォント設定</a>を参照)</p>
<p>もしかしたらパッケージにもあるかもしれません。</p>
<p>私はGoogle Fontsで調べてきて、簡単なPKGBUILD(archlinuxのパッケージを 作成するために使用するファイル)を書いてパッケージ化してインストールしました。</p>
<h1 id="2. set-fontset-font 関数でフォントを適用する">2. <code>set-fontset-font</code> 関数でフォントを適用する</h1>
<p>文字毎にフォントを適用できると書きましたが、勿論範囲指定もできます。</p>
<h2 id="一つの文字だけ">一つの文字だけ</h2>
<p>一つの文字だけならば、その文字をcharacterとして使用します。 Elispで特定のcharacterを表現するには、そのcharacterの頭に <code>?</code> を つけてあげれば良いので、 例えば'ㅣ'という文字だけに適用したければ:</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(set-fontset-font t ?ㅣ &quot;NanumGothic&quot;)
</code></pre>
</div>
<p>とします。</p>
<h2 id="特定のScriptのみ">特定のScriptのみ</h2>
<p>正直Scriptとは何ぞや、というのはあんまりわからんです… info覗いてもあまり解説がなかったので、一般的な用語なのかも しれません(若しくは見付けられていないか)</p>
<p>とりいそぎ、Emacsに認識されているScriptの一覧は <code>script-representative-chars</code> という変数に格納されているのでそれを確認します (help:script-representative-chars)</p>
<p>そうすると、今回の場合 <code>hangul</code> という使えそうなシンボルがあるので これを用いることにします。 シンボルは、単純にシンボルとして渡してあげれば良いです。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(set-fontset-font t &#39;hangul &quot;NanumGothic&quot;)
</code></pre>
</div>
<h1 id="参考資料">参考資料</h1>
<ul>
<li><a href="https://qiita.com/kawabata@github/items/2c4b0b689834c9c193aa">Emacs で全世界の文字を表示・編集可能にする。 - Qiita</a></li>
<li>help:set-fontset-font</li>
<li><a href="info:Emacs#Defining Fontsets">info:Emacs#Defining Fontsets</a></li>
</ul>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Sat, 16 Apr 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-04-16-emacs-set-different-fonts-for-different-language-letters.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2022-04-01-org-roam-when-you-can-use-completion-by-default</title>
    <link>https://cj-bc.github.io/blog/posts/2022-04-01-org-roam-when-you-can-use-completion-by-default.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>org roam標準で補完が効く条件</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on April  1, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on April  2, 2022
	</div>

	

	
	<a title="All pages tagged &#39;emacs&#39;." href="/tags/emacs.html" class="ui tag label">emacs</a><a title="All pages tagged &#39;org-roam&#39;." href="/tags/org-roam.html" class="ui tag label">org-roam</a><a title="All pages tagged &#39;org&#39;." href="/tags/org.html" class="ui tag label">org</a>
	
      </div>

    <div class="description">
      <p><a href="info:org-roam#Completion"><a href="info:org-roam#Completion">info:org-roam#Completion</a></a>にあるように、 org-roamは標準で補完機能を持っています。</p>
<p>が、自分の環境では上手く動かなかったので原因を探った際のメモ。</p>
<h1 id="Tl;Dr:">Tl;Dr:</h1>
<p>デフォルトでは、help:org-roam-db-autosync-mode を有効にした状態で、 ファイルからバッファーを読み込んだ際に有効化される。</p>
<p><strong>help:org-roam-completion-everywhere ですらこの条件が必要</strong> なので注意。</p>
<h1 id="詳しく">詳しく</h1>
<h2 id="org-roamが提供する補完機能の概要">org-roamが提供する補完機能の概要</h2>
<p>org-roamは、help:completion-at-point を用いた補完機能を提供しています。 又、company-modeも別途対応している模様です。</p>
<h2 id="実際の仕組み">実際の仕組み</h2>
<p>そもそものcompletion-at-pointの仕組みについては割愛しますが 簡単に必要なことだけを書くと、補完に使用する関数を <code>completion-at-point-functions</code> 変数から取得して補完を行います。</p>
<p>なので、 <code>completion-at-point</code> を使用した補完の際は、その変数をいじっている所を探しにいけば良いということになります。 org-roamでもこの <code>completion-at-point-functions</code> に関数を追加しています。</p>
<ul>
<li><a href="~/.emacs.d/elpa/org-roam-20220319.1902/org-roam-node.el::defun org-roam--register-completion-functions-h (">org-roam–register-completion-functions-h</a>で help:completion-at-point-functions を設定している
<ul>
<li><code>org-roam--register-completion-functions-h</code> は help:org-roam-find-file-hook に追加されている</li>
</ul></li>
</ul>
<ul>
<li>help:org-roam-find-file-hook は help:org-roam-db-autosync–setup-file-h から実行される</li>
<li>help:org-roam-db-autosync–setup-file-h は help:org-roam-db-autosync-mode を有効にした時に help:find-file-hook に 追加される
<ul>
<li>help:find-file-hook はファイルからバッファーが読み込まれた際に実行される</li>
</ul>
よって、 help:org-roam-db-autosync-mode を有効にしていない限りは同期されない。 まぁそれはそうか。</li>
</ul>
<h1 id="手動で設定する方法">手動で設定する方法</h1>
<p>db-syncはしなくていいけど補完は使えるようになってほしい、という場合 help:org-roam–register-completion-functions-h を手動で実行すれば良いです。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(org-roam--register-completion-functions-h)
</code></pre>
</div>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Fri, 01 Apr 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-04-01-org-roam-when-you-can-use-completion-by-default.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2022-03-31-archiso-create-x-enabled-archiso</title>
    <link>https://cj-bc.github.io/blog/posts/2022-03-31-archiso-create-x-enabled-archiso.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>X環境を含んだarchsioイメージを作成する</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on March 31, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on April  1, 2022
	</div>

	

	
	<a title="All pages tagged &#39;archlinux&#39;." href="/tags/archlinux.html" class="ui tag label">archlinux</a><a title="All pages tagged &#39;archiso&#39;." href="/tags/archiso.html" class="ui tag label">archiso</a>
	
      </div>

    <div class="description">
      <p>基本は<a href="https://wiki.archlinux.jp/index.php/Archiso#USB">wiki</a>に従って作業します。 正直思った以上にやること少なかったので、この記事はwikiのまとめ的メモになります。</p>
<p>やったこと全部書いているつもりではあるけど、今回は後から纏めなおしたので何か欠けている 可能性があります。</p>
<p>実際に使っているものはこちら: <a href="https://github.com/Cj-bc/dotfiles/tree/master/dotfiles/archiso">Cj-bc/dotfiles/dotfiles/archiso</a></p>
<h1 id="パッケージの追加">パッケージの追加</h1>
<p><code>packages.x86_64</code> にパッケージを追加。</p>
<div class="ui segment">
<div class="ui top right attached label">
diff
</div>
<div class="sourceCode" id="cb1"><pre class="sourceCode diff SourceCode"><code class="sourceCode diff"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/dotfiles/archiso/packages.x86_64 b/dotfiles/archiso/packages.x86_64</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>index aaf2416..2bbce38 100644</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/dotfiles/archiso/packages.x86_64</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/dotfiles/archiso/packages.x86_64</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -119,3 +119,10 @@ wvdial</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a> xfsprogs</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a> xl2tpd</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a> zsh</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="va">+xorg-server</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="va">+lightdm</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="va">+lightdm-gtk-greeter</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="va">+xterm</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="va">+xmonad</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="va">+linux-surface</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="va">+gparted</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>\ No newline at end of file</span></code></pre></div>
</div>
<p>WMやDMは好みのものを使って大丈夫だと思います。 私はメイン環境と合わせてLightDM+XMonadにしてあります。</p>
<h1 id="レポジトリの追加">レポジトリの追加</h1>
<p>linux-surfaceを使いたいのでレポジトリを追加する</p>
<div class="ui segment">
<div class="ui top right attached label">
diff
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff SourceCode"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/dotfiles/archiso/pacman.conf b/dotfiles/archiso/pacman.conf</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>index 5ee6c1e..2ba1626 100644</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/dotfiles/archiso/pacman.conf</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/dotfiles/archiso/pacman.conf</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -30,7 +30,7 @@ Architecture = auto</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a> # Misc options</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a> #UseSyslog</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="st">-#Color</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="va">+Color</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a> #NoProgressBar</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a> # We cannot check disk space from within a chroot environment</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a> #CheckSpace</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -99,3 +99,7 @@ Include = /etc/pacman.d/mirrorlist</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a> #[custom]</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a> #SigLevel = Optional TrustAll</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a> #Server = file:///home/custompkgs</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="va">+[linux-surface]</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="va">+SigLevel = Optional TrustAll</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="va">+Server = https://pkg.surfacelinux.com/arch/</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>\ No newline at end of file</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
</div>
<h1 id="メタデータの編集">メタデータの編集</h1>
<p>ついでなのでメタデータもちょっと書き換えておきました。 後々識別しやすい…かな?</p>
<div class="ui segment">
<div class="ui top right attached label">
diff
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff SourceCode"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/dotfiles/archiso/profiledef.sh b/dotfiles/archiso/profiledef.sh</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>index 5feb205..7ce4a85 100644</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/dotfiles/archiso/profiledef.sh</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/dotfiles/archiso/profiledef.sh</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,9 +1,9 @@</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a> #!/usr/bin/env bash</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a> # shellcheck disable=SC2034</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="st">-iso_name=&quot;archlinux&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="va">+iso_name=&quot;archlinux-x&quot;</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a> iso_label=&quot;ARCH_$(date +%Y%m)&quot;</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="st">-iso_publisher=&quot;Arch Linux &lt;https://archlinux.org&gt;&quot;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="va">+iso_publisher=&quot;Cj.bc-sd &lt;cj.bc-sd@outlook.jp&gt;&quot;</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a> iso_application=&quot;Arch Linux Live/Rescue CD&quot;</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a> iso_version=&quot;$(date +%Y.%m.%d)&quot;</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a> install_dir=&quot;arch&quot;</span></code></pre></div>
</div>
<h1 id="デフォルトでXが起動するように設定">デフォルトでXが起動するように設定</h1>
<p>systemdのUnitにsymlinkを貼ります。 これは <code>systemctl enable</code> がするのと同じ挙動です。</p>
<h2 id="古い手法について">古い手法について</h2>
<p>Wikiには <code>customize_airootfs.sh</code> の編集をする方法も記載されていますが、 これはもうdeprecatedとなっています</p>
<p>(参考: <a href="https://gitlab.archlinux.org/archlinux/archiso/-/blob/master/CHANGELOG.rst">バージョン51のCHANGELOG</a>)</p>
<p>実行したら怒られたログ↓</p>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>[mkarchiso] WARNING: customize_airootfs.sh is deprecated! Support for it will be removed in a future archiso version.
</code></pre>
</div>
<h1 id="mkarchisoする">mkarchisoする</h1>
<p>あとはやるだけ。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb5" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> workdir out</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="ex">mkarchiso</span> <span class="at">-v</span> <span class="at">-w</span> workdir <span class="at">-o</span> out .</span></code></pre></div>
</div>
<table>
<thead>
<tr class="header">
<th>オプション</th>
<th>解説</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>-v</code></td>
<td>verbose。ログの出力をします</td>
</tr>
<tr class="even">
<td><code>-w workdir</code></td>
<td>作業ディレクトリの設定をします</td>
</tr>
<tr class="odd">
<td><code>-o out</code></td>
<td>最終的に出来上がったisoファイルを格納するディレクトリの設定をします</td>
</tr>
</tbody>
</table>
<p>ちょっと時間(とストレージ)食うので待つ。 うちの環境では 5GBくらい要求されたので気をつけてとのこと。</p>
<h1 id="できたisoを焼く">できたisoを焼く</h1>
<p><a href="https://wiki.archlinux.jp/index.php/USB_インストールメディア#dd_を使う">USBインストールメディアを作成するwiki</a>に従って焼く。 今回はddを使う。各パラメーターについては各自確認してから焼いてほしい。 あぶないので。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb6" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> dd bs=4M if=out/archlinux-x-2022.04.01-x86_64.iso of=/dev/sda status=progress <span class="kw">&amp;&amp;</span> <span class="fu">sync</span></span></code></pre></div>
</div>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Thu, 31 Mar 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-03-31-archiso-create-x-enabled-archiso.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2022-03-18</title>
    <link>https://cj-bc.github.io/blog/posts/2022-03-18.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>2022/03/18</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on March 18, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on March 19, 2022
	</div>

	

	
	<a title="All pages tagged &#39;環境構築&#39;." href="/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89.html" class="ui tag label">環境構築</a>
	
      </div>

    <div class="description">
      <h1 id="やったこと">やったこと</h1>
<h2 id="stack-staticのインストール(前日の続き)">stack-staticのインストール(前日の続き)</h2>
<p><a href="https://aur.archlinux.org/packages/stack-static">stac-staticのAURページ</a>より<a href="https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=stack-static">PKGBUILD</a>を見てみたところ、 新しいGPGキー (フィンガープリント: <code>C5705533DA4F78D8664B5DC0575159689BEFB442</code>) の読み込みをしていた。 このキーが何者だかわからなくって怖いので、 色々調べてみる。</p>
<p><a href="https://docs.haskellstack.org/en/stable/SIGNING_KEY/">haskellstack.orgのドキュメント</a>によると、 全てのリリースはそれをビルドした人の鍵によって 署名されており、それらの鍵は KeyID <code>0x575159689BEFB442</code> によって署名されているとのこと(きちんと各自確認してほしい)</p>
<p>で、実際のGithub release(例えば<a href="https://github.com/commercialhaskell/stack/releases/tag/v2.7.5">v2.7.5</a>)を見てみると、 最近はEmanuel Borsboomさんによって署名されていることがわかり、 彼のKey IDは <code>65101FF31C5C154D</code> である。</p>
<p>issueを調べてみると、 Emanuelさんのキーは以下の二つの場所で 署名されているとのこと(<a href="https://github.com/commercialhaskell/stack/issues/5122#issuecomment-591424040">ソース</a>)</p>
<ul>
<li>pool.sks-keyservers.net</li>
<li>pgp.mit.edu</li>
</ul>
<p>このうち、sks-keyservers.netはどうやら完全に落ちているようで 通信不可能だったため、 pgp.mit.eduから読み込んでみることにした。</p>
<h2 id="キーサーバーからGPGキーの取り込みが上手くいかない">キーサーバーからGPGキーの取り込みが上手くいかない</h2>
<p>うまくいったわ。<a href="https://cj-bc.github.io/blog/posts/2022-03-18-gpg-stuggled-to-search-key-from-keyserver.html">別途記事にした</a> これを元にstack-staticを明日入れる</p>
<h1 id="知ったこと">知ったこと</h1>
<h2 id="SKS keyserversは落ちている">SKS keyserversは落ちている</h2>
<p>sks-keyservers.netもpool.sks-keyservers.netもどちらも pingもwhoisも通らない。</p>
<p><a href="https://twitter.com/Cj_bc_sd/status/1504612612281344000?s=20&amp;t=PEdWvA4ytQxDokG7Ci8wGQ">https://twitter.com/Cj_bc_sd/status/1504612612281344000?s=20&amp;t=PEdWvA4ytQxDokG7Ci8wGQ</a></p>
<p><a href="https://github.com/SKS-keyserver/sks-keyserver/issues/88">SKS-Keyserverのissue</a>によると、<a href="https://lists.gnupg.org/pipermail/gnupg-users/2021-June/065261.html">メーリングリスト</a>で法的理由により閉鎖したとの報告が あったとのこと。</p>
<ul>
<li><a href="https://github.com/mono/mono/issues/21121">mono/mono #21121</a></li>
<li><a href="https://code.firstlook.media/the-death-of-sks-pgp-keyservers-and-how-first-look-media-is-handling-it">The Death of SKS PGP Keyservers, and How First Look Media is Handling It</a></li>
</ul>
<h2 id="thee, thou">thee, thou</h2>
<p>you; object form of thou; used when speaking to one person</p>
<h1 id="やること">やること</h1>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Fri, 18 Mar 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-03-18.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2022-03-18-gpg-stuggled-to-search-key-from-keyserver</title>
    <link>https://cj-bc.github.io/blog/posts/2022-03-18-gpg-stuggled-to-search-key-from-keyserver.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>gpg --search-keys がうまくいかなかったので調べる</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on March 18, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on March 18, 2022
	</div>

	

	
	<a title="All pages tagged &#39;gpg&#39;." href="/tags/gpg.html" class="ui tag label">gpg</a>
	
      </div>

    <div class="description">
      <h1 id="状況">状況</h1>
<p>stackの署名キーを引いてくるために、 <code>--search-keywords</code> を してみたところエラーが起きた。</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">gpg</span> <span class="at">--search-keys</span> 65101FF31C5C154D</span></code></pre></div>
</div>
<p>gpg: error searching keyserver: Server indicated a failure gpg: keyserver search failed: Server indicated a failure</p>
<h1 id="原因: DNSリゾルバが適切に設定されていなかった">原因: DNSリゾルバが適切に設定されていなかった</h1>
<p>らしい。 <strong>systemd-resolvedを使用している場合</strong> 注意が必要そう。</p>
<p>具体的には、 <strong>GnuPGはドメイン名解決のために <code>/etc/resolv.conf</code> を参照するが systemd-resolvedは <code>/etc/resolv.conf</code> を参照も設定もしない</strong></p>
<p>なので、ドメイン名解決のための設定を何もしていない状況になっていた。</p>
<p>実は <a href="https://wiki.archlinux.jp/index.php/Systemd-resolved#DNS">archwikiのsystemd-resolvedページに記載がある</a>のでそれに従い、</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 私の場合は元から /etc/resolve.conf が</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co"># 空だったので削除しているが、必要に応じて</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co"># なんかして</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="fu">rm</span> /etc/resolv.conf</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="fu">ln</span> <span class="at">-s</span> /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf</span></code></pre></div>
</div>
<p>としてリンクを作成した。</p>
<p>この後 <code>gpgconf --reload</code> で設定を読み直したら動くようになった!</p>
<h1 id="過去の調べ物">過去の調べ物</h1>
<p>とりあえず色々調べたけど、 結論今回は関係なかったものたち。 まぁ状況によっては役立つかもなので残しておく。</p>
<h2 id="dirmngr 2.1.17時代のバグの話">dirmngr 2.1.17時代のバグの話</h2>
<p>これは無関係だった。dirmngrの昔のバージョンにて、 全ての操作が出来無いバグがあったらしい。わぁぉ。</p>
<ul>
<li><a href="https://bbs.archlinux.org/viewtopic.php?id=220996">https://bbs.archlinux.org/viewtopic.php?id=220996</a></li>
<li><a href="https://dev.gnupg.org/T2889">https://dev.gnupg.org/T2889</a></li>
</ul>
<h2 id="コードリーディングで原因探し">コードリーディングで原因探し</h2>
<p>とりあえずもうちょい確信に迫りたかったので、 えいやって <a href="https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=summary">gnupgのgitレポジトリ</a>cloneしてきて読んだ。</p>
<p><code>gpg --debug-all --search-keys &lt;key_id&gt;</code> が出力した エラーメッセージ "Try again later" をとりあえずgrepする。</p>
<p>けどみつからん。</p>
<p>実は実際は<a href="https://git.gnupg.org/cgi-bin/gitweb.cgi?p=libgpg-error.git;a=blob;f=src/err-codes.h.in;hb=32dad4e4135f0bdc436ed684da753d4b0cdb0ea1#l334">libgpg-error</a>の中にエラーメッセージが定義されており、 そちらを探すと以下のコードが見付かる。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="src/err-codes.h.in:334"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="src/err-codes.h.in:334-1"><a href="#src/err-codes.h.in:334-1" aria-hidden="true" tabindex="-1"></a><span class="dv">312</span>     GPG_ERR_TRY_LATER               Try again later</span></code></pre></div>
</div>
<p>これだけだとわからないが、 <em>まぁ多分これ定数だろうという推測</em> のもと今度は <code>GPG_ERR_TRY_LATER</code> を(今度こそ) gnupgのコードベースで grepしてみる。 と、一箇所だけ見付かる:</p>
<div class="ui segment">
<div class="ui top right attached label">
bash
</div>
<div class="sourceCode" id="cb3" data-org-language="sh" wrap="src c"><pre class="sourceCode bash SourceCode"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">find</span> . <span class="at">-regex</span> <span class="st">&#39;.*\.c\|.*\.h&#39;</span> <span class="at">-exec</span> grep <span class="st">&#39;GPG_ERR_TRY_LATER&#39;</span> {} <span class="dt">\+</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="cb4"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="op">./</span>dirmngr<span class="op">/</span>dns<span class="op">-</span>stuff<span class="op">.</span>c<span class="op">:</span>    <span class="cf">case</span> TRY_AGAIN<span class="op">:</span>      ec <span class="op">=</span> GPG_ERR_TRY_LATER<span class="op">;</span> <span class="cf">break</span><span class="op">;</span></span></code></pre></div>
</div>
<p>これは <code>get_h_errno_as_gpg_error</code> 関数であり、 説明によると <code>H_ERRNO</code> をgpgで使用されるエラーコードに直してくれるらしい。</p>
<p>…まぁとりあえず使用例を追う。と、 <a href="https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=blob;f=dirmngr/dns-stuff.c;h=0edbc0442e05086c5785a2efb75292e526291319;hb=HEAD">dirmngr/dns-stuff.c</a>の中に2箇所あるがどちらも <code>res_query</code> を呼んだ結果によって使用されている。</p>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="getsrv_standard()"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="getsrv_standard()-1"><a href="#getsrv_standard()-1" aria-hidden="true" tabindex="-1"></a>     <span class="op">...</span></span>
<span id="getsrv_standard()-2"><a href="#getsrv_standard()-2" aria-hidden="true" tabindex="-1"></a>     r <span class="op">=</span> res_query <span class="op">(</span>name<span class="op">,</span> C_IN<span class="op">,</span> T_SRV<span class="op">,</span> answer<span class="op">,</span> <span class="kw">sizeof</span> res<span class="op">.</span>ans<span class="op">);</span></span>
<span id="getsrv_standard()-3"><a href="#getsrv_standard()-3" aria-hidden="true" tabindex="-1"></a>     my_protect <span class="op">();</span></span>
<span id="getsrv_standard()-4"><a href="#getsrv_standard()-4" aria-hidden="true" tabindex="-1"></a>     <span class="cf">if</span> <span class="op">(</span>r <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="getsrv_standard()-5"><a href="#getsrv_standard()-5" aria-hidden="true" tabindex="-1"></a><span class="cf">return</span> get_h_errno_as_gpg_error <span class="op">();</span></span>
<span id="getsrv_standard()-6"><a href="#getsrv_standard()-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="getsrv_standard()-7"><a href="#getsrv_standard()-7" aria-hidden="true" tabindex="-1"></a>     <span class="op">...</span></span></code></pre></div>
</div>
<div class="ui segment">
<div class="ui top right attached label">
c
</div>
<div class="sourceCode" id="get_dns_cname_standard()"><pre class="sourceCode c SourceCode"><code class="sourceCode c"><span id="get_dns_cname_standard()-1"><a href="#get_dns_cname_standard()-1" aria-hidden="true" tabindex="-1"></a>     <span class="op">...</span></span>
<span id="get_dns_cname_standard()-2"><a href="#get_dns_cname_standard()-2" aria-hidden="true" tabindex="-1"></a>     r <span class="op">=</span> res_query <span class="op">(</span>name<span class="op">,</span> C_IN<span class="op">,</span> T_CERT<span class="op">,</span> answer<span class="op">,</span> <span class="kw">sizeof</span> res<span class="op">.</span>ans<span class="op">);</span></span>
<span id="get_dns_cname_standard()-3"><a href="#get_dns_cname_standard()-3" aria-hidden="true" tabindex="-1"></a>     my_protect <span class="op">();</span></span>
<span id="get_dns_cname_standard()-4"><a href="#get_dns_cname_standard()-4" aria-hidden="true" tabindex="-1"></a>     <span class="cf">if</span> <span class="op">(</span>r <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="get_dns_cname_standard()-5"><a href="#get_dns_cname_standard()-5" aria-hidden="true" tabindex="-1"></a><span class="cf">return</span> get_h_errno_as_gpg_error <span class="op">();</span></span>
<span id="get_dns_cname_standard()-6"><a href="#get_dns_cname_standard()-6" aria-hidden="true" tabindex="-1"></a>     <span class="op">...</span></span></code></pre></div>
</div>
<p>で、じゃぁこいつが何か…?と思ってgrepしてみると 定義がない。実はこいつはresolverで定義されており、manページを 引くことができる<a href="https://man.archlinux.org/man/res_query.3">res<sub>query</sub>(3)</a></p>
<p>Cだとこういうのたまに見掛けるので面白いね。</p>
<p>で、芋蔓式にわかるのだけれど <code>h_errno</code> も <a href="https://man.archlinux.org/man/gethostbyname.3">gethostbyname(3)</a>に定義されている。</p>
<p>なので、あとはそこを追えばよさそう!!!</p>
<p>…なのだけど、この段階になって先に述べた解決方法が 判明してしまったのでここまでで打ち切り。</p>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Fri, 18 Mar 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-03-18-gpg-stuggled-to-search-key-from-keyserver.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2022-03-17</title>
    <link>https://cj-bc.github.io/blog/posts/2022-03-17.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>2022/03/17</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on March 17, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on March 18, 2022
	</div>

	

	
	<a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" class="ui tag label">haskell</a><a title="All pages tagged &#39;stack&#39;." href="/tags/stack.html" class="ui tag label">stack</a><a title="All pages tagged &#39;archlinux&#39;." href="/tags/archlinux.html" class="ui tag label">archlinux</a>
	
      </div>

    <div class="description">
      <h1 id="やったこと">やったこと</h1>
<p>全体的には、家にいる間は <code>stack-static</code> にふりまわされてた</p>
<h2 id="stackを stack-static に変えようとしている">stackを <code>stack-static</code> に変えようとしている</h2>
<p>今迄stackは公式レポジトリのものを使っていたが、グローバルにhaskell パッケージを導入する必要があるのがちょっと嫌だった。</p>
<p>今朝、 <code>pacman -Syu</code> した所、依存パッケージの <code>haskell-cryptonite-conduit</code> の関係でstackが使えなくなった。</p>
<p>そもそもグローバルにインストールしてるのがあまり好きではないので、 Archlinux-jpで存在を教わった、AURの <code>stack-static</code> に変えようとしている…のだけど 結構てこずっている。</p>
<h2 id="yay -Sc"><code>yay -Sc</code></h2>
<p>容量空ける為に走らせたところ、空き容量2GB→8.5GBと大幅に増えた。 やったね!</p>
<h2 id="散歩した">散歩した</h2>
<p>散歩した。ついでに、お弁当を買って公園で御飯を食べるなどした。 前から気になってたお店で買ったのだけど、思った以上に美味しくてとてもハッピー…!</p>
<p>御飯食べて、近くにカフェがあったので珈琲買って飲んだ。 結構長いこと外におったな今日は。</p>
<h1 id="知ったこと">知ったこと</h1>
<h2 id="Archlinuxのパッケージが、pkgrelのみアップデートされている現象について">Archlinuxのパッケージが、pkgrelのみアップデートされている現象について</h2>
<p>Archlinux-jpで聞いた所リンクを貰った、まだ理解しきれてないのでとりあえずここに。</p>
<p><a href="https://www.reddit.com/r/archlinux/comments/7qtx37/why_do_haskellbased_software_upgrades_require_a/">https://www.reddit.com/r/archlinux/comments/7qtx37/why_do_haskellbased_software_upgrades_require_a/</a></p>
<h1 id="やること">やること</h1>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Thu, 17 Mar 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-03-17.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2022-03-16-environment-thinking-about-knowledge-management-system</title>
    <link>https://cj-bc.github.io/blog/posts/2022-03-16-environment-thinking-about-knowledge-management-system.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>ノートの取り方と関連ソフトウェアについての考察</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on March 16, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on April  1, 2022
	</div>

	

	
	<a title="All pages tagged &#39;note&#39;." href="/tags/note.html" class="ui tag label">note</a><a title="All pages tagged &#39;ナレッジベース&#39;." href="/tags/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8%E3%83%99%E3%83%BC%E3%82%B9.html" class="ui tag label">ナレッジベース</a>
	
      </div>

    <div class="description">
      <p>世の中には知識を保存するための色々な手法があり、 それぞれ役割が違っていたりする。 ノートを取る際にどうするのが良いか長らく迷っているので、 一旦今の考えを纏めようと思う。</p>
<p>又、今回は「知識保存の手法」だけにフォーカスするので、 例えば「章をどう構築するか」みたいな話は別の話題とする。</p>
<h1 id="最終的にやりたいこと">最終的にやりたいこと</h1>
<p>今回は「講義や研修・勉強会等の最中にノートを取る」ことを目的とする。 そのノートはそのご見返しをして、纏め直すとする。 この場合、やりたいことは</p>
<ul>
<li>後で見返した時にわかりやすい</li>
<li>(特に講義)日毎、少なくとも学期毎の区切りが明確にわかる</li>
<li>資料との関連付けが出来る</li>
<li>あまり時間を掛けずに書ける</li>
</ul>
<ul>
<li>すぐに関連する知識等を検索できる</li>
<li>参照しやすい</li>
</ul>
<p>キーボードドリブンがいいとか、そこらへんはあるけど それは本質ではないので今は除外</p>
<h1 id="存在するソフトウェア・手法">存在するソフトウェア・手法</h1>
<p>ナレッジベース等と呼ばれるものはいくつかある。 とりあえずアプリケーション名として書き出す</p>
<ul>
<li>Plain Text</li>
<li>Wiki</li>
<li>Roam research</li>
<li>Obsidian</li>
<li>Notion</li>
<li>Evernote</li>
<li>Scrapbox</li>
<li>Delite</li>
</ul>
<p>これらは、情報の蓄積の仕方によっていくつかに分類できると思う。 (さらに細かくわけられるが、とりあえず大まかに)</p>
<h2 id="紙のノート継承系">紙のノート継承系</h2>
<p>特にそれ自身で特殊な構造を持たず、 紙に書いていたノートを拡張するような形のアプリケーション。 検索性やレンダリング等を進化させたかんじ。</p>
<p>Plain Text, Evernoteなど</p>
<h2 id="知識集約系">知識集約系</h2>
<p>何か一つのトピックに対して、 纏まった知識を集約していくアプリケーション。 具体的な「とあるモノ」についての知識が欲しい時は有用。</p>
<p>Wiki, Scrapboxなど</p>
<h2 id="思考集約系">思考集約系</h2>
<p>「考えたこと」「本・Podcast・動画・記事等を見ていて知ったこと」など を都度メモし、それを後に纏めたりするもの。</p>
<p>Roam Research, Obsidian, Deliteなど</p>
<h1 id="それぞれの利点・欠点">それぞれの利点・欠点</h1>
<h2 id="紙のノート継承系">紙のノート継承系</h2>
<div id="要件">
<table>
<tbody>
<tr class="odd">
<td>後で見返した時にわかりやすい?</td>
<td>(場合による)</td>
</tr>
<tr class="even">
<td>(特に講義)日毎、少なくとも学期毎の区切りが明確にわかる?</td>
<td>O</td>
</tr>
<tr class="odd">
<td>資料との関連付けが出来る?</td>
<td>O</td>
</tr>
<tr class="even">
<td>あまり時間を掛けずに書ける?</td>
<td>O</td>
</tr>
<tr class="odd">
<td>すぐに関連する知識等を検索できる?</td>
<td>X</td>
</tr>
<tr class="even">
<td>参照しやすい?</td>
<td>X</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><p>利点</p>
<ul>
<li>今迄紙で取っていたノートの取り方をそのまま継承できる。</li>
<li>元々フォーマットを持っていた場合や、ノート取るのに慣れている場合一番直感的</li>
<li>いつノートを取ったか、同じ時間に他のどんな情報を取得していたかがわかりやすい。</li>
</ul>
<p>(私はあまりノートをうまく取れていなかったためあてはまらず)</p></li>
<li><p>欠点</p>
<ul>
<li>何をするにも自由!!!</li>
<li>自由であるがあまり、何かしら統一基準がない場合はゴチャりそう。</li>
</ul>
<p>結局は「中身をどう構築するか」による。</p></li>
</ol>
<h2 id="知識集約系">知識集約系</h2>
<div id="要件">
<table>
<tbody>
<tr class="odd">
<td>後で見返した時にわかりやすい?</td>
<td>O</td>
</tr>
<tr class="even">
<td>(特に講義)日毎、少なくとも学期毎の区切りが明確にわかる?</td>
<td>X</td>
</tr>
<tr class="odd">
<td>資料との関連付けが出来る?</td>
<td>O</td>
</tr>
<tr class="even">
<td>あまり時間を掛けずに書ける?</td>
<td>X (纏まった情報にする必要)</td>
</tr>
<tr class="odd">
<td>すぐに関連する知識等を検索できる?</td>
<td>O</td>
</tr>
<tr class="even">
<td>参照しやすい?</td>
<td>O</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><p>利点</p>
<ul>
<li>なにかしら「これについて知りたい!」という時、大体イッパツで分かる。</li>
<li>関連した項目について探す手間がない。</li>
<li>項目が明確なので、リンクを貼りやすい</li>
</ul></li>
<li><p>欠点</p>
<ul>
<li>複数のトピックにまたがるものについて、どこに書くべきか明瞭ではない。 (例えば「vimからEmacsへの移行の仕方」)</li>
<li>一つのポストが長くなりがち。</li>
<li>「この講義の間にとったノート」というのが分散してしまう
<ul>
<li>日付ベースの記事を別に書いて、そこからリンクさせるのはあり</li>
<li>それってWikiの役割ではなくないか？という疑問</li>
</ul></li>
<li>きちんと使い易くするためには、それなりに時間を掛ける必要がでてくる</li>
</ul></li>
</ol>
<h2 id="思考集約系">思考集約系</h2>
<div id="要件">
<table>
<tbody>
<tr class="odd">
<td>後で見返した時にわかりやすい?</td>
<td>X</td>
</tr>
<tr class="even">
<td>(特に講義)日毎、少なくとも学期毎の区切りが明確にわかる?</td>
<td>X</td>
</tr>
<tr class="odd">
<td>資料との関連付けが出来る?</td>
<td>O</td>
</tr>
<tr class="even">
<td>あまり時間を掛けずに書ける?</td>
<td>O</td>
</tr>
<tr class="odd">
<td>すぐに関連する知識等を検索できる?</td>
<td>O</td>
</tr>
<tr class="even">
<td>参照しやすい?</td>
<td>O</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><p>利点</p>
<ul>
<li>そもそものワークフローとして「見返す」という行動があるので、 ノート整理をしやすい</li>
<li>「~の仕方」みたいなアイデア系のことも書き易い</li>
</ul></li>
<li><p>欠点</p>
<ul>
<li>あくまでも「アイデアやアウトプットに使う」のがメインの目的なので、 知識を永続的に保管しておくのとは少し方向性が違う気がする</li>
<li>(特にZettelkasten法の場合)アイデアを小さく纏めるのが良いので、 一つのノートに知識をつめこめない</li>
<li>(個人的な問題として)どういう区切りで情報を分ければいいのかがわからない</li>
</ul></li>
</ol>
<h1 id="現在使っている手法">現在使っている手法</h1>
<p>現在は用途によって複合的に使い分けている。</p>
<p>ノート自体には、<a href="https://github.com/Cj-bc/dotfiles/blob/master/dotfiles/emacs/emacs.d/lib/ol-notes.el">自作したパッケージ</a>で「紙のノート継承系」のものを使っている。 これは、知識集約系も思考集約系も試したが上手くいかなかったのでとりあえず、 という側面が強い。</p>
<p>ちなみに <em>振り返りをしたり整理したりをあまりしてない</em> のが多分結構問題点。</p>
<h1 id="改善案">改善案</h1>
<p><strong>きちんと見直す時間を取った上で</strong> Roamを取る。</p>
<p>運用方針をきちんと立てておく必要がある気がした。 (メモ的に取る→一日の終わりに復習してpermanent noteを書く→wikiにリンク、など)</p>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Wed, 16 Mar 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-03-16-environment-thinking-about-knowledge-management-system.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>
<item>
    <title>2022-03-14-org-mode-fix-clock-start-time-is-gone</title>
    <link>https://cj-bc.github.io/blog/posts/2022-03-14-org-mode-fix-clock-start-time-is-gone.html</link>
    <description><![CDATA[<div id="body-content">
  <div class="content of Memo">
    <div class="ui center aligned icon header">
      <h1>"Clock start time is gone" エラーを解消する</h1>
    </div>
      <div class="meta ui list">
	<div class="item">Posted on March 14, 2022</div>
	<div class="item">
	  <i class="history icon"></i>
	  Updated on March 14, 2022
	</div>

	

	
	<a title="All pages tagged &#39;elisp&#39;." href="/tags/elisp.html" class="ui tag label">elisp</a><a title="All pages tagged &#39;emacs&#39;." href="/tags/emacs.html" class="ui tag label">emacs</a><a title="All pages tagged &#39;org-mode&#39;." href="/tags/org-mode.html" class="ui tag label">org-mode</a>
	
      </div>

    <div class="description">
      <p>Org captureから戻る時とか、たまに</p>
<div class="ui piled segment" style="z-index: 0">
<blockquote>
<p>Clock start time is gone</p>
</blockquote>
</div>
<p>とか言われて戻れないことがあります。 この時の対処法についてです。</p>
<h1 id="原因: org-clock-marker がずれている">原因: <code>org-clock-marker</code> がずれている</h1>
<p>これは珍しい事例なのでは？と思うのですが、 最後の <code class="verbatim">Clock-in</code> した場所を保持している <code>org-clock-marker</code> が ずれている場合があります。</p>
<p>このマーカーは、 <code>CLOCK: ~ 等の行の先頭に位置する必要がありますが、
   私の見た環境では ~:LOGBOOK:</code> の行に存在していました。 この場合、 <code class="verbatim">org-clock.el</code> の以下の部分で弾かれてエラーになってしまいます。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>  (if (and (looking-at (concat &quot;[ \t]*&quot; org-keyword-time-regexp))
(equal (match-string 1) org-clock-string))
  (setq ts (match-string 2))
(if fail-quietly (throw &#39;exit nil) (error &quot;Clock start time is gone&quot;)))
</code></pre>
</div>
<p>[[<a href="file:/usr/share/emacs/27.2/lisp/org/org-clock.el.gz">file:/usr/share/emacs/27.2/lisp/org/org-clock.el.gz</a>::if (and (looking-at (concat "<span class="math display">$$ \t$$</span>*" org-keyword-time-regexp)][source code(オフライン用)]]</p>
<h1 id="解決策: マーカーをずらす">解決策: マーカーをずらす</h1>
<p>凄く愚直ですがまぁ。 help:move-marker でマーカーを動かせるので、それを使用します。</p>
<p>マーカーは <code>CLOCK:</code> の行の最初にある必要があるので、まずはそこの 位置を調べる必要があります。 カーソルの位置を調べる方法は何かありそうではありますが、 今回はマーカーを置きたい位置にカーソルを置き、そこのtext Propertyを調べます。</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(describe-text-properties)
</code></pre>
</div>
<p>そうすると、以下のように表示されます。この場合位置は <code>1411</code> ということになります。</p>
<div class="ui segment">
<div class="ui top right attached label">

</div>
<pre class="SourceCode"><code>Text content at position 1411:


There are text properties here:
  fontified            t

[back]
</code></pre>
</div>
<p>で、その番号を <code>new-pt</code> と仮置きすると、</p>
<div class="ui segment">
<div class="ui top right attached label">
elisp
</div>
<pre class="elisp SourceCode"><code>(move-marker org-clock-marker new-pt)
</code></pre>
</div>
<p>で設定しなおせます。</p>
    </div>
  </div>
  

</div>
]]></description>
    <pubDate>Mon, 14 Mar 2022 00:00:00 UT</pubDate>
    <guid>https://cj-bc.github.io/blog/posts/2022-03-14-org-mode-fix-clock-start-time-is-gone.html</guid>
    <dc:creator>Cj-bc a.k.a Cj.BC_SD</dc:creator>
</item>

    </channel>
</rss>
