* git credentialにpassを使う
    :PROPERTIES:
    :DATE: [2021-04-13 Tue]
    :TAGS: :git:pass:
    :AUTHOR: Cj-bc
    :BLOG_POST_KIND: Memo
    :BLOG_POST_PROGRESS: Published
    :BLOG_POST_STATUS: Normal
    :END:
gitの認証情報を保存する為に使う =git-credential helper=
ですが、passを用いたものはデフォルトで存在しないので作ることにします。

ちなみに元はどこかで見たアイデアです。
pythonを用いた実装があります([[https://wiki.archlinux.jp/index.php/Pass#Git_.E3.81.AE.E7.B5.B1.E5.90.88][archlinux wiki -- Pass#Gitの統合]]を参照)
私はなんとなく自作したかったので作っています。

** git credential helperについて
   :PROPERTIES:
   :CUSTOM_ID: git-credential-helperについて
   :END:
git credentialは、機密を保存する為に外部のプログラムを使用します。
その方法は
[[https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%81%AE%E4%BF%9D%E5%AD%98][git-scm.com
Git-様々なツール-認証情報の保存]] で書かれています。

*** Git credential helperの役割
    :PROPERTIES:
    :CUSTOM_ID: git-credential-helperの役割
    :END:
git credential helperは、3つの用途で呼ばれます。

- store
- get
- erase

です。

**** store -- 新しい認証情報を登録する
     :PROPERTIES:
     :CUSTOM_ID: store-新しい認証情報を登録する
     :END:
Storeは、新しい認証情報を登録する時に呼び出されます。
標準入力から情報を受け取り、それを保存します。
標準出力から何かを返しても良いですが、gitはそれを無視するので必要ではないです。

**** erase -- 既存の認証情報を消去する
     :PROPERTIES:
     :CUSTOM_ID: erase-既存の認証情報を消去する
     :END:
Eraseは、認証情報を消去したい時に呼ばれます。
標準入力から情報を受け取り、それに該当するものがあればそれを消去します。
標準出力から何かを返しても良いですが、これについてもgitは無視するので必要ではないです。

**** get -- 渡された情報を基に認証情報を返す
     :PROPERTIES:
     :CUSTOM_ID: get-渡された情報を基に認証情報を返す
     :END:
Getは、渡された情報に合致するエントリがあればその情報を返します。
この場合のみ標準出力は必須で、gitはこの標準出力をそのまま代入文として扱います。

** helperの作成
   :PROPERTIES:
   :CUSTOM_ID: helperの作成
   :END:
さて、簡単な説明も済んだので実際にスクリプトを組もうと思います。
例示ではRubyが使われていましたが、passコマンドを使用することと、自分がbash
に慣れていることから、bashを使おうと思います。

*** データの格納方法
    :PROPERTIES:
    :CUSTOM_ID: データの格納方法
    :END:
データはpassに格納しますが、格納する階層構造は以下のようにしようと思います。

#+begin_quote
  Password Store └── git-cli └── <protocol>:<host> └── <username>
#+end_quote

トップの =git-cli=
はgitコマンドで使うものであることを示し、後はそのままです。

URI形式にしようと思いましたが、

- =//= がパスとして認識されてしまう
- =Username= は =get= の際に与えられない

ことから、

- プロトコルとホスト名の間はコロン1つ
- ユーザー名は下位エントリ

にしました。

*** 1. storeの作成
    :PROPERTIES:
    :CUSTOM_ID: storeの作成
    :END:
storeは、シンプルに与えられた情報からpassに登録をします。 標準入力は

#+begin_quote
  protocol=<protocol> host=<host> username=<username>
  password=<password>
#+end_quote

という4つの入力です。 これを保存します

#+begin_src shell
  function createStoreKey {
      case $1 in
    "store") echo "git-cli/${2}:${3}/${4}";;
    "get")   echo "git-cli/${2}:${3}";;
    *) ;;
      esac
  }

  function store_key() {
    declare -A input=()

    # バックスラッシュをエスケープ用に使わないために ~-r~ が必要です。
    while IFS=\= read -r key value; do
  input[$key]=$value
    done < <(cat -)

    store_key=$(createStoreKey "store" ${input[protocol]} ${input[host]} ${input[username]})

    echo "Save credential info into pass."
    echo "Key is set to \"${store_key}\""
    cat <<EOF | pass insert $store_key
    ${input[password]}
    ${input[password]}
    EOF

    [ $? -eq 0 ] && echo "Credential saved noormally" \
      || echo "Failed to save credential"
  }
#+end_src

**** 実例
     :PROPERTIES:
     :CUSTOM_ID: 実例
     :END:
例として

#+begin_quote
  protocol=https host=myGitHost.com username=me
  password=some_{simplepassword}
#+end_quote

を登録してみます。

#+begin_src shell
  cat - | store_key
#+end_src

#+NAME: store_key-example
#+CALL: store_key-example-code[:stdin store_key-example-source]()
#+RESULTS: store_key-example
#+begin_example
  /tmp/babel-EN1Wbc/sh-script-qhWEEa: line 3: store_key: command not found
#+end_example

*** 2. getの作成
    :PROPERTIES:
    :CUSTOM_ID: getの作成
    :END:
getは、標準入力からホストとプロトコルの情報を読み込み、
標準出力からユーザー名とパスワードを返します。

#+begin_src shell
  function createStoreKey {
      case $1 in
    "store") echo "git-cli/${2}:${3}/${4}";;
    "get")   echo "git-cli/${2}:${3}";;
    *) ;;
      esac
  }
  declare -A input=()

  while IFS=\= read -r key value; do
    [[ ${#key} -eq 0 ]] && continue
    input[$key]=$value
  done < <(cat -)

  store_key=$(createStoreKey "get" ${input[protocol]} ${input[host]})

  username=$(LANG=C pass show "$store_key" | awk -v storeKey="$store_key" -v store_key="$store_key" '$1 == store_key { getline; sub("`-- +", ""); print }')

  [[ -z $username ]] && { echo "failed to look up user for ${store_key}. exit" ; exit; }

  password=$(LANG=C pass show "${store_key}/$username")
  cat <<EOF
  username=$username
  password=$password
  EOF
#+end_src

**** 実例
     :PROPERTIES:
     :CUSTOM_ID: 実例-1
     :END:
getに必要なのはホストとプロトコル(とそれに続く空白行)だけなので以下の情報を入れます

#+begin_quote
  protocol=https host=myGitHost.com
#+end_quote

#+CALL: pass_get[:stdin pass_get-example-source]()
#+RESULTS:
#+begin_example
  username=me
  password=some_simple_password
#+end_example

*** 3. Eraseの作成(未作成)
    :PROPERTIES:
    :CUSTOM_ID: eraseの作成未作成
    :END:
Eraseも本来は存在しますが、入力で何を期待すれば良いのかが分からないため今はスルーすることにします。

#+begin_src shell
  exit
#+end_src

** 最終的に出来たもの
   :PROPERTIES:
   :CUSTOM_ID: 最終的に出来たもの
   :END:
[[https://github.com/Cj-bc/dotfiles/blob/master/dotfiles/bin/git-credential-pass][Cj-bc/dotfiles
-- dotfiles/bin/git-credential-pass]] にあります。

このポストから =org tangle=
しようとしたのですが、諸々(関数化したりetc)上手く出来なかったのでtangleではないです
実用的なスクリプトとしてはそちらを参照して下さい
